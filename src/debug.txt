PLY: PARSE DEBUG START

State  : 0
Stack  : . LexToken(INT,'int',1,0)
Action : Shift and goto state 20

State  : 20
Stack  : INT . LexToken(ID,'main',1,4)
Action : Reduce rule [type_specifier -> INT] with ['int'] and goto state 8
Result : <Node @ 0x7f8b92401e90> (<parser.Node object at 0x7f8b92401e90>)

State  : 8
Stack  : type_specifier . LexToken(ID,'main',1,4)
Action : Reduce rule [declaration_specifiers -> type_specifier] with [<Node @ 0x7f8b92401e90>] and goto state 5
Result : <Node @ 0x7f8b92401e90> (<parser.Node object at 0x7f8b92401e90>)

State  : 5
Stack  : declaration_specifiers . LexToken(ID,'main',1,4)
Action : Shift and goto state 32

State  : 32
Stack  : declaration_specifiers ID . LexToken(LPAREN,'(',1,8)
Action : Reduce rule [direct_declarator -> ID] with ['main'] and goto state 11
Result : <Node @ 0x7f8b92401dd0> (<parser.Node object at 0x7f8b92401dd0>)

State  : 11
Stack  : declaration_specifiers direct_declarator . LexToken(LPAREN,'(',1,8)
Action : Shift and goto state 54

State  : 54
Stack  : declaration_specifiers direct_declarator LPAREN . LexToken(RPAREN,')',1,9)
Action : Reduce rule [lopenparen -> LPAREN] with ['('] and goto state 52
Result : <str @ 0x7f8b8f674130> ('(')

State  : 52
Stack  : declaration_specifiers direct_declarator lopenparen . LexToken(RPAREN,')',1,9)
Action : Shift and goto state 138

State  : 138
Stack  : declaration_specifiers direct_declarator lopenparen RPAREN . LexToken(LCURLYBRACKET,'{',1,11)
Action : Reduce rule [direct_declarator -> direct_declarator lopenparen RPAREN] with [<Node @ 0x7f8b92401dd0>,'(',')'] and goto state 11
Result : <Node @ 0x7f8b92401dd0> (<parser.Node object at 0x7f8b92401dd0>)

State  : 11
Stack  : declaration_specifiers direct_declarator . LexToken(LCURLYBRACKET,'{',1,11)
Action : Reduce rule [declarator -> direct_declarator] with [<Node @ 0x7f8b92401dd0>] and goto state 39
Result : <Node @ 0x7f8b92401dd0> (<parser.Node object at 0x7f8b92401dd0>)

State  : 39
Stack  : declaration_specifiers declarator . LexToken(LCURLYBRACKET,'{',1,11)
Action : Shift and goto state 46

State  : 46
Stack  : declaration_specifiers declarator LCURLYBRACKET . LexToken(INT,'int',2,17)
Action : Shift and goto state 20

State  : 20
Stack  : declaration_specifiers declarator LCURLYBRACKET INT . LexToken(ID,'a',2,21)
Action : Reduce rule [type_specifier -> INT] with ['int'] and goto state 8
Result : <Node @ 0x7f8b92401fd0> (<parser.Node object at 0x7f8b92401fd0>)

State  : 8
Stack  : declaration_specifiers declarator LCURLYBRACKET type_specifier . LexToken(ID,'a',2,21)
Action : Reduce rule [declaration_specifiers -> type_specifier] with [<Node @ 0x7f8b92401fd0>] and goto state 47
Result : <Node @ 0x7f8b92401fd0> (<parser.Node object at 0x7f8b92401fd0>)

State  : 47
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers . LexToken(ID,'a',2,21)
Action : Shift and goto state 32

State  : 32
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers ID . LexToken(EQUALS,'=',2,23)
Action : Reduce rule [direct_declarator -> ID] with ['a'] and goto state 11
Result : <Node @ 0x7f8b92401f90> (<parser.Node object at 0x7f8b92401f90>)

State  : 11
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers direct_declarator . LexToken(EQUALS,'=',2,23)
Action : Reduce rule [declarator -> direct_declarator] with [<Node @ 0x7f8b92401f90>] and goto state 136
Result : <Node @ 0x7f8b92401f90> (<parser.Node object at 0x7f8b92401f90>)

State  : 136
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers declarator . LexToken(EQUALS,'=',2,23)
Action : Shift and goto state 66

State  : 66
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers declarator EQUALS . LexToken(INT_CONST,'5',2,25)
Action : Shift and goto state 126

State  : 126
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers declarator EQUALS INT_CONST . LexToken(SEMICOLON,';',2,26)
Action : Reduce rule [primary_expression -> INT_CONST] with ['5'] and goto state 114
Result : <Node @ 0x7f8b92401f50> (<parser.Node object at 0x7f8b92401f50>)

State  : 114
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers declarator EQUALS primary_expression . LexToken(SEMICOLON,';',2,26)
Action : Reduce rule [postfix_expression -> primary_expression] with [<Node @ 0x7f8b92401f50>] and goto state 107
Result : <Node @ 0x7f8b92401f50> (<parser.Node object at 0x7f8b92401f50>)

State  : 107
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers declarator EQUALS postfix_expression . LexToken(SEMICOLON,';',2,26)
Action : Reduce rule [unary_expression -> postfix_expression] with [<Node @ 0x7f8b92401f50>] and goto state 105
Result : <Node @ 0x7f8b92401f50> (<parser.Node object at 0x7f8b92401f50>)

State  : 105
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers declarator EQUALS unary_expression . LexToken(SEMICOLON,';',2,26)
Action : Reduce rule [cast_expression -> unary_expression] with [<Node @ 0x7f8b92401f50>] and goto state 111
Result : <Node @ 0x7f8b92401f50> (<parser.Node object at 0x7f8b92401f50>)

State  : 111
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers declarator EQUALS cast_expression . LexToken(SEMICOLON,';',2,26)
Action : Reduce rule [multiplicative_expression -> cast_expression] with [<Node @ 0x7f8b92401f50>] and goto state 135
Result : <Node @ 0x7f8b92401f50> (<parser.Node object at 0x7f8b92401f50>)

State  : 135
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers declarator EQUALS multiplicative_expression . LexToken(SEMICOLON,';',2,26)
Action : Reduce rule [additive_expression -> multiplicative_expression] with [<Node @ 0x7f8b92401f50>] and goto state 134
Result : <Node @ 0x7f8b92401f50> (<parser.Node object at 0x7f8b92401f50>)

State  : 134
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers declarator EQUALS additive_expression . LexToken(SEMICOLON,';',2,26)
Action : Reduce rule [shift_expression -> additive_expression] with [<Node @ 0x7f8b92401f50>] and goto state 133
Result : <Node @ 0x7f8b92401f50> (<parser.Node object at 0x7f8b92401f50>)

State  : 133
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers declarator EQUALS shift_expression . LexToken(SEMICOLON,';',2,26)
Action : Reduce rule [relational_expression -> shift_expression] with [<Node @ 0x7f8b92401f50>] and goto state 132
Result : <Node @ 0x7f8b92401f50> (<parser.Node object at 0x7f8b92401f50>)

State  : 132
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers declarator EQUALS relational_expression . LexToken(SEMICOLON,';',2,26)
Action : Reduce rule [equality_expression -> relational_expression] with [<Node @ 0x7f8b92401f50>] and goto state 131
Result : <Node @ 0x7f8b92401f50> (<parser.Node object at 0x7f8b92401f50>)

State  : 131
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers declarator EQUALS equality_expression . LexToken(SEMICOLON,';',2,26)
Action : Reduce rule [and_expression -> equality_expression] with [<Node @ 0x7f8b92401f50>] and goto state 130
Result : <Node @ 0x7f8b92401f50> (<parser.Node object at 0x7f8b92401f50>)

State  : 130
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers declarator EQUALS and_expression . LexToken(SEMICOLON,';',2,26)
Action : Reduce rule [exclusive_or_expression -> and_expression] with [<Node @ 0x7f8b92401f50>] and goto state 129
Result : <Node @ 0x7f8b92401f50> (<parser.Node object at 0x7f8b92401f50>)

State  : 129
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers declarator EQUALS exclusive_or_expression . LexToken(SEMICOLON,';',2,26)
Action : Reduce rule [inclusive_or_expression -> exclusive_or_expression] with [<Node @ 0x7f8b92401f50>] and goto state 121
Result : <Node @ 0x7f8b92401f50> (<parser.Node object at 0x7f8b92401f50>)

State  : 121
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers declarator EQUALS inclusive_or_expression . LexToken(SEMICOLON,';',2,26)
Action : Reduce rule [logical_and_expression -> inclusive_or_expression] with [<Node @ 0x7f8b92401f50>] and goto state 113
Result : <Node @ 0x7f8b92401f50> (<parser.Node object at 0x7f8b92401f50>)

State  : 113
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers declarator EQUALS logical_and_expression . LexToken(SEMICOLON,';',2,26)
Action : Reduce rule [logical_or_expression -> logical_and_expression] with [<Node @ 0x7f8b92401f50>] and goto state 106
Result : <Node @ 0x7f8b92401f50> (<parser.Node object at 0x7f8b92401f50>)

State  : 106
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers declarator EQUALS logical_or_expression . LexToken(SEMICOLON,';',2,26)
Action : Reduce rule [conditional_expression -> logical_or_expression] with [<Node @ 0x7f8b92401f50>] and goto state 104
Result : <Node @ 0x7f8b92401f50> (<parser.Node object at 0x7f8b92401f50>)

State  : 104
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers declarator EQUALS conditional_expression . LexToken(SEMICOLON,';',2,26)
Action : Reduce rule [assignment_expression -> conditional_expression] with [<Node @ 0x7f8b92401f50>] and goto state 161
Result : <Node @ 0x7f8b92401f50> (<parser.Node object at 0x7f8b92401f50>)

State  : 161
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers declarator EQUALS assignment_expression . LexToken(SEMICOLON,';',2,26)
Action : Reduce rule [initializer -> assignment_expression] with [<Node @ 0x7f8b92401f50>] and goto state 160
Result : <Node @ 0x7f8b92401f50> (<parser.Node object at 0x7f8b92401f50>)

State  : 160
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers declarator EQUALS initializer . LexToken(SEMICOLON,';',2,26)
Action : Reduce rule [init_declarator -> declarator EQUALS initializer] with [<Node @ 0x7f8b92401f90>,'=',<Node @ 0x7f8b92401f50>] and goto state 42
Result : <Node @ 0x7f8b92401ed0> (<parser.Node object at 0x7f8b92401ed0>)

State  : 42
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator . LexToken(SEMICOLON,';',2,26)
Action : Reduce rule [init_declarator_list -> init_declarator] with [<Node @ 0x7f8b92401ed0>] and goto state 41
Result : <Node @ 0x7f8b8f704290> (<parser.Node object at 0x7f8b8f704290>)

State  : 41
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list . LexToken(SEMICOLON,';',2,26)
Action : Shift and goto state 67

State  : 67
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list SEMICOLON . LexToken(RCURLYBRACKET,'}',3,28)
Action : Reduce rule [declaration -> declaration_specifiers init_declarator_list SEMICOLON] with [<Node @ 0x7f8b92401fd0>,<Node @ 0x7f8b8f704290>,';'] and goto state 45
Result : <Node @ 0x7f8b92411190> (<parser.Node object at 0x7f8b92411190>)

State  : 45
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration . LexToken(RCURLYBRACKET,'}',3,28)
Action : Reduce rule [declaration_list -> declaration] with [<Node @ 0x7f8b92411190>] and goto state 73
Result : <Node @ 0x7f8b92411190> (<parser.Node object at 0x7f8b92411190>)

State  : 73
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list . LexToken(RCURLYBRACKET,'}',3,28)
Action : Shift and goto state 74

State  : 74
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list RCURLYBRACKET . $end
Action : Reduce rule [closebrace -> RCURLYBRACKET] with ['}'] and goto state 167
Result : <str @ 0x7f8b8f4da670> ('}')

State  : 167
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list closebrace . $end
Action : Reduce rule [function_compound_statement -> LCURLYBRACKET declaration_list closebrace] with ['{',<Node @ 0x7f8b92411190>,'}'] and goto state 65
Result : <Node @ 0x7f8b92411190> (<parser.Node object at 0x7f8b92411190>)

State  : 65
Stack  : declaration_specifiers declarator function_compound_statement . $end
Action : Reduce rule [function_definition -> declaration_specifiers declarator function_compound_statement] with [<Node @ 0x7f8b92401e90>,<Node @ 0x7f8b92401dd0>,<Node @ 0x7f8b92411190>] and goto state 3
Result : <Node @ 0x7f8b92401ed0> (<parser.Node object at 0x7f8b92401ed0>)

State  : 3
Stack  : function_definition . $end
Action : Reduce rule [external_declaration -> function_definition] with [<Node @ 0x7f8b92401ed0>] and goto state 2
Result : <Node @ 0x7f8b92401ed0> (<parser.Node object at 0x7f8b92401ed0>)

State  : 2
Stack  : external_declaration . $end
Action : Reduce rule [translation_unit -> external_declaration] with [<Node @ 0x7f8b92401ed0>] and goto state 1
Result : <Node @ 0x7f8b92401f50> (<parser.Node object at 0x7f8b92401f50>)

State  : 1
Stack  : translation_unit . $end
Done   : Returning <Node @ 0x7f8b92401f50> (<parser.Node object at 0x7f8b92401f50>)
PLY: PARSE DEBUG END
