PLY: PARSE DEBUG START

State  : 0
Stack  : . LexToken(INT,'int',1,0)
Action : Shift and goto state 20

State  : 20
Stack  : INT . LexToken(ID,'main',1,4)
Action : Reduce rule [type_specifier -> INT] with ['int'] and goto state 8
Result : <Node @ 0x7f5c33060460> (<parser.Node object at 0x7f5c33060460>)

State  : 8
Stack  : type_specifier . LexToken(ID,'main',1,4)
Action : Reduce rule [declaration_specifiers -> type_specifier] with [<Node @ 0x7f5c33060460>] and goto state 5
Result : <Node @ 0x7f5c33060460> (<parser.Node object at 0x7f5c33060460>)

State  : 5
Stack  : declaration_specifiers . LexToken(ID,'main',1,4)
Action : Shift and goto state 32

State  : 32
Stack  : declaration_specifiers ID . LexToken(LPAREN,'(',1,8)
Action : Reduce rule [direct_declarator -> ID] with ['main'] and goto state 11
Result : <Node @ 0x7f5c33060340> (<parser.Node object at 0x7f5c33060340>)

State  : 11
Stack  : declaration_specifiers direct_declarator . LexToken(LPAREN,'(',1,8)
Action : Shift and goto state 54

State  : 54
Stack  : declaration_specifiers direct_declarator LPAREN . LexToken(RPAREN,')',1,9)
Action : Reduce rule [lopenparen -> LPAREN] with ['('] and goto state 52
Result : <str @ 0x7f5c3353bfb0> ('(')

State  : 52
Stack  : declaration_specifiers direct_declarator lopenparen . LexToken(RPAREN,')',1,9)
Action : Shift and goto state 138

State  : 138
Stack  : declaration_specifiers direct_declarator lopenparen RPAREN . LexToken(LCURLYBRACKET,'{',2,11)
Action : Reduce rule [direct_declarator -> direct_declarator lopenparen RPAREN] with [<Node @ 0x7f5c33060340>,'(',')'] and goto state 11
Result : <Node @ 0x7f5c33060340> (<parser.Node object at 0x7f5c33060340>)

State  : 11
Stack  : declaration_specifiers direct_declarator . LexToken(LCURLYBRACKET,'{',2,11)
Action : Reduce rule [declarator -> direct_declarator] with [<Node @ 0x7f5c33060340>] and goto state 39
Result : <Node @ 0x7f5c33060340> (<parser.Node object at 0x7f5c33060340>)

State  : 39
Stack  : declaration_specifiers declarator . LexToken(LCURLYBRACKET,'{',2,11)
Action : Shift and goto state 46

State  : 46
Stack  : declaration_specifiers declarator LCURLYBRACKET . LexToken(ID,'main',3,17)
Action : Shift and goto state 83

State  : 83
Stack  : declaration_specifiers declarator LCURLYBRACKET ID . LexToken(LPAREN,'(',3,21)
Action : Reduce rule [primary_expression -> ID] with ['main'] and goto state 114
Result : <Node @ 0x7f5c330603a0> (<parser.Node object at 0x7f5c330603a0>)

State  : 114
Stack  : declaration_specifiers declarator LCURLYBRACKET primary_expression . LexToken(LPAREN,'(',3,21)
Action : Reduce rule [postfix_expression -> primary_expression] with [<Node @ 0x7f5c330603a0>] and goto state 107
Result : <Node @ 0x7f5c330603a0> (<parser.Node object at 0x7f5c330603a0>)

State  : 107
Stack  : declaration_specifiers declarator LCURLYBRACKET postfix_expression . LexToken(LPAREN,'(',3,21)
Action : Shift and goto state 208

State  : 208
Stack  : declaration_specifiers declarator LCURLYBRACKET postfix_expression LPAREN . LexToken(RPAREN,')',3,22)
Action : Shift and goto state 286

State  : 286
Stack  : declaration_specifiers declarator LCURLYBRACKET postfix_expression LPAREN RPAREN . LexToken(SEMICOLON,';',3,24)
Action : Reduce rule [postfix_expression -> postfix_expression LPAREN RPAREN] with [<Node @ 0x7f5c330603a0>,'(',')'] and goto state 107
Result : <Node @ 0x7f5c331fa610> (<parser.Node object at 0x7f5c331fa610>)

State  : 107
Stack  : declaration_specifiers declarator LCURLYBRACKET postfix_expression . LexToken(SEMICOLON,';',3,24)
Action : Reduce rule [unary_expression -> postfix_expression] with [<Node @ 0x7f5c331fa610>] and goto state 105
Result : <Node @ 0x7f5c331fa610> (<parser.Node object at 0x7f5c331fa610>)

State  : 105
Stack  : declaration_specifiers declarator LCURLYBRACKET unary_expression . LexToken(SEMICOLON,';',3,24)
Action : Reduce rule [cast_expression -> unary_expression] with [<Node @ 0x7f5c331fa610>] and goto state 111
Result : <Node @ 0x7f5c331fa610> (<parser.Node object at 0x7f5c331fa610>)

State  : 111
Stack  : declaration_specifiers declarator LCURLYBRACKET cast_expression . LexToken(SEMICOLON,';',3,24)
Action : Reduce rule [multiplicative_expression -> cast_expression] with [<Node @ 0x7f5c331fa610>] and goto state 135
Result : <Node @ 0x7f5c331fa610> (<parser.Node object at 0x7f5c331fa610>)

State  : 135
Stack  : declaration_specifiers declarator LCURLYBRACKET multiplicative_expression . LexToken(SEMICOLON,';',3,24)
Action : Reduce rule [additive_expression -> multiplicative_expression] with [<Node @ 0x7f5c331fa610>] and goto state 134
Result : <Node @ 0x7f5c331fa610> (<parser.Node object at 0x7f5c331fa610>)

State  : 134
Stack  : declaration_specifiers declarator LCURLYBRACKET additive_expression . LexToken(SEMICOLON,';',3,24)
Action : Reduce rule [shift_expression -> additive_expression] with [<Node @ 0x7f5c331fa610>] and goto state 133
Result : <Node @ 0x7f5c331fa610> (<parser.Node object at 0x7f5c331fa610>)

State  : 133
Stack  : declaration_specifiers declarator LCURLYBRACKET shift_expression . LexToken(SEMICOLON,';',3,24)
Action : Reduce rule [relational_expression -> shift_expression] with [<Node @ 0x7f5c331fa610>] and goto state 132
Result : <Node @ 0x7f5c331fa610> (<parser.Node object at 0x7f5c331fa610>)

State  : 132
Stack  : declaration_specifiers declarator LCURLYBRACKET relational_expression . LexToken(SEMICOLON,';',3,24)
Action : Reduce rule [equality_expression -> relational_expression] with [<Node @ 0x7f5c331fa610>] and goto state 131
Result : <Node @ 0x7f5c331fa610> (<parser.Node object at 0x7f5c331fa610>)

State  : 131
Stack  : declaration_specifiers declarator LCURLYBRACKET equality_expression . LexToken(SEMICOLON,';',3,24)
Action : Reduce rule [and_expression -> equality_expression] with [<Node @ 0x7f5c331fa610>] and goto state 130
Result : <Node @ 0x7f5c331fa610> (<parser.Node object at 0x7f5c331fa610>)

State  : 130
Stack  : declaration_specifiers declarator LCURLYBRACKET and_expression . LexToken(SEMICOLON,';',3,24)
Action : Reduce rule [exclusive_or_expression -> and_expression] with [<Node @ 0x7f5c331fa610>] and goto state 129
Result : <Node @ 0x7f5c331fa610> (<parser.Node object at 0x7f5c331fa610>)

State  : 129
Stack  : declaration_specifiers declarator LCURLYBRACKET exclusive_or_expression . LexToken(SEMICOLON,';',3,24)
Action : Reduce rule [inclusive_or_expression -> exclusive_or_expression] with [<Node @ 0x7f5c331fa610>] and goto state 121
Result : <Node @ 0x7f5c331fa610> (<parser.Node object at 0x7f5c331fa610>)

State  : 121
Stack  : declaration_specifiers declarator LCURLYBRACKET inclusive_or_expression . LexToken(SEMICOLON,';',3,24)
Action : Reduce rule [logical_and_expression -> inclusive_or_expression] with [<Node @ 0x7f5c331fa610>] and goto state 113
Result : <Node @ 0x7f5c331fa610> (<parser.Node object at 0x7f5c331fa610>)

State  : 113
Stack  : declaration_specifiers declarator LCURLYBRACKET logical_and_expression . LexToken(SEMICOLON,';',3,24)
Action : Reduce rule [logical_or_expression -> logical_and_expression] with [<Node @ 0x7f5c331fa610>] and goto state 106
Result : <Node @ 0x7f5c331fa610> (<parser.Node object at 0x7f5c331fa610>)

State  : 106
Stack  : declaration_specifiers declarator LCURLYBRACKET logical_or_expression . LexToken(SEMICOLON,';',3,24)
Action : Reduce rule [conditional_expression -> logical_or_expression] with [<Node @ 0x7f5c331fa610>] and goto state 104
Result : <Node @ 0x7f5c331fa610> (<parser.Node object at 0x7f5c331fa610>)

State  : 104
Stack  : declaration_specifiers declarator LCURLYBRACKET conditional_expression . LexToken(SEMICOLON,';',3,24)
Action : Reduce rule [assignment_expression -> conditional_expression] with [<Node @ 0x7f5c331fa610>] and goto state 99
Result : <Node @ 0x7f5c331fa610> (<parser.Node object at 0x7f5c331fa610>)

State  : 99
Stack  : declaration_specifiers declarator LCURLYBRACKET assignment_expression . LexToken(SEMICOLON,';',3,24)
Action : Reduce rule [expression -> assignment_expression] with [<Node @ 0x7f5c331fa610>] and goto state 87
Result : <Node @ 0x7f5c331fa610> (<parser.Node object at 0x7f5c331fa610>)

State  : 87
Stack  : declaration_specifiers declarator LCURLYBRACKET expression . LexToken(SEMICOLON,';',3,24)
Action : Shift and goto state 178

State  : 178
Stack  : declaration_specifiers declarator LCURLYBRACKET expression SEMICOLON . LexToken(RCURLYBRACKET,'}',4,26)
Action : Reduce rule [expression_statement -> expression SEMICOLON] with [<Node @ 0x7f5c331fa610>,';'] and goto state 78
Result : <Node @ 0x7f5c331fa610> (<parser.Node object at 0x7f5c331fa610>)

State  : 78
Stack  : declaration_specifiers declarator LCURLYBRACKET expression_statement . LexToken(RCURLYBRACKET,'}',4,26)
Action : Reduce rule [statement -> expression_statement] with [<Node @ 0x7f5c331fa610>] and goto state 75
Result : <Node @ 0x7f5c331fa610> (<parser.Node object at 0x7f5c331fa610>)

State  : 75
Stack  : declaration_specifiers declarator LCURLYBRACKET statement . LexToken(RCURLYBRACKET,'}',4,26)
Action : Reduce rule [statement_list -> statement] with [<Node @ 0x7f5c331fa610>] and goto state 72
Result : <Node @ 0x7f5c331fa610> (<parser.Node object at 0x7f5c331fa610>)

State  : 72
Stack  : declaration_specifiers declarator LCURLYBRACKET statement_list . LexToken(RCURLYBRACKET,'}',4,26)
Action : Shift and goto state 74

State  : 74
Stack  : declaration_specifiers declarator LCURLYBRACKET statement_list RCURLYBRACKET . $end
Action : Reduce rule [closebrace -> RCURLYBRACKET] with ['}'] and goto state 165
Result : <str @ 0x7f5c3360a230> ('}')

State  : 165
Stack  : declaration_specifiers declarator LCURLYBRACKET statement_list closebrace . $end
Action : Reduce rule [function_compound_statement -> LCURLYBRACKET statement_list closebrace] with ['{',<Node @ 0x7f5c331fa610>,'}'] and goto state 65
Result : <Node @ 0x7f5c331fa610> (<parser.Node object at 0x7f5c331fa610>)

State  : 65
Stack  : declaration_specifiers declarator function_compound_statement . $end
Action : Reduce rule [function_definition -> declaration_specifiers declarator function_compound_statement] with [<Node @ 0x7f5c33060460>,<Node @ 0x7f5c33060340>,<Node @ 0x7f5c331fa610>] and goto state 3
Result : <Node @ 0x7f5c331fa460> (<parser.Node object at 0x7f5c331fa460>)

State  : 3
Stack  : function_definition . $end
Action : Reduce rule [external_declaration -> function_definition] with [<Node @ 0x7f5c331fa460>] and goto state 2
Result : <Node @ 0x7f5c331fa460> (<parser.Node object at 0x7f5c331fa460>)

State  : 2
Stack  : external_declaration . $end
Action : Reduce rule [translation_unit -> external_declaration] with [<Node @ 0x7f5c331fa460>] and goto state 1
Result : <NoneType @ 0x90aa10> (None)

State  : 1
Stack  : translation_unit . $end
Done   : Returning <NoneType @ 0x90aa10> (None)
PLY: PARSE DEBUG END
