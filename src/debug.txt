PLY: PARSE DEBUG START

State  : 0
Stack  : . LexToken(STRUCT,'struct',1,0)
Action : Shift and goto state 36

State  : 36
Stack  : STRUCT . LexToken(ID,'point',1,7)
Action : Reduce rule [struct_or_union -> STRUCT] with ['struct'] and goto state 34
Result : <Node @ 0x7fc63070dd60> (<parser.Node object at 0x7fc63070dd60>)

State  : 34
Stack  : struct_or_union . LexToken(ID,'point',1,7)
Action : Shift and goto state 59

State  : 59
Stack  : struct_or_union ID . LexToken(LCURLYBRACKET,'{',1,12)
Action : Shift and goto state 61

State  : 61
Stack  : struct_or_union ID LCURLYBRACKET . LexToken(INT,'int',2,18)
Action : Reduce rule [openbrace -> LCURLYBRACKET] with ['{'] and goto state 153
Result : <str @ 0x7fc630cdf1b0> ('{')

State  : 153
Stack  : struct_or_union ID openbrace . LexToken(INT,'int',2,18)
Action : Shift and goto state 20

State  : 20
Stack  : struct_or_union ID openbrace INT . LexToken(ID,'x',2,22)
Action : Reduce rule [type_specifier -> INT] with ['int'] and goto state 157
Result : <Node @ 0x7fc63070ddc0> (<parser.Node object at 0x7fc63070ddc0>)

State  : 157
Stack  : struct_or_union ID openbrace type_specifier . LexToken(ID,'x',2,22)
Action : Reduce rule [specifier_qualifier_list -> type_specifier] with [<Node @ 0x7fc63070ddc0>] and goto state 156
Result : <Node @ 0x7fc63070de80> (<parser.Node object at 0x7fc63070de80>)

State  : 156
Stack  : struct_or_union ID openbrace specifier_qualifier_list . LexToken(ID,'x',2,22)
Action : Shift and goto state 32

State  : 32
Stack  : struct_or_union ID openbrace specifier_qualifier_list ID . LexToken(SEMICOLON,';',2,24)
Action : Reduce rule [direct_declarator -> ID] with ['x'] and goto state 11
Result : <Node @ 0x7fc63070dc70> (<parser.Node object at 0x7fc63070dc70>)

State  : 11
Stack  : struct_or_union ID openbrace specifier_qualifier_list direct_declarator . LexToken(SEMICOLON,';',2,24)
Action : Reduce rule [declarator -> direct_declarator] with [<Node @ 0x7fc63070dc70>] and goto state 252
Result : <Node @ 0x7fc63070dc70> (<parser.Node object at 0x7fc63070dc70>)

State  : 252
Stack  : struct_or_union ID openbrace specifier_qualifier_list declarator . LexToken(SEMICOLON,';',2,24)
Action : Reduce rule [struct_declarator -> declarator] with [<Node @ 0x7fc63070dc70>] and goto state 251
Result : <Node @ 0x7fc63070dc70> (<parser.Node object at 0x7fc63070dc70>)

State  : 251
Stack  : struct_or_union ID openbrace specifier_qualifier_list struct_declarator . LexToken(SEMICOLON,';',2,24)
Action : Reduce rule [struct_declarator_list -> struct_declarator] with [<Node @ 0x7fc63070dc70>] and goto state 250
Result : <Node @ 0x7fc63070dee0> (<parser.Node object at 0x7fc63070dee0>)

State  : 250
Stack  : struct_or_union ID openbrace specifier_qualifier_list struct_declarator_list . LexToken(SEMICOLON,';',2,24)
Action : Shift and goto state 320

State  : 320
Stack  : struct_or_union ID openbrace specifier_qualifier_list struct_declarator_list SEMICOLON . LexToken(INT,'int',3,30)
Action : Reduce rule [struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON] with [<Node @ 0x7fc63070de80>,<Node @ 0x7fc63070dee0>,';'] and goto state 155
Result : <Node @ 0x7fc63070dcd0> (<parser.Node object at 0x7fc63070dcd0>)

State  : 155
Stack  : struct_or_union ID openbrace struct_declaration . LexToken(INT,'int',3,30)
Action : Reduce rule [struct_declaration_list -> struct_declaration] with [<Node @ 0x7fc63070dcd0>] and goto state 247
Result : <Node @ 0x7fc63070ddf0> (<parser.Node object at 0x7fc63070ddf0>)

State  : 247
Stack  : struct_or_union ID openbrace struct_declaration_list . LexToken(INT,'int',3,30)
Action : Shift and goto state 20

State  : 20
Stack  : struct_or_union ID openbrace struct_declaration_list INT . LexToken(ID,'y',3,34)
Action : Reduce rule [type_specifier -> INT] with ['int'] and goto state 157
Result : <Node @ 0x7fc63070ddc0> (<parser.Node object at 0x7fc63070ddc0>)

State  : 157
Stack  : struct_or_union ID openbrace struct_declaration_list type_specifier . LexToken(ID,'y',3,34)
Action : Reduce rule [specifier_qualifier_list -> type_specifier] with [<Node @ 0x7fc63070ddc0>] and goto state 156
Result : <Node @ 0x7fc63070dfd0> (<parser.Node object at 0x7fc63070dfd0>)

State  : 156
Stack  : struct_or_union ID openbrace struct_declaration_list specifier_qualifier_list . LexToken(ID,'y',3,34)
Action : Shift and goto state 32

State  : 32
Stack  : struct_or_union ID openbrace struct_declaration_list specifier_qualifier_list ID . LexToken(SEMICOLON,';',3,36)
Action : Reduce rule [direct_declarator -> ID] with ['y'] and goto state 11
Result : <Node @ 0x7fc63070df10> (<parser.Node object at 0x7fc63070df10>)

State  : 11
Stack  : struct_or_union ID openbrace struct_declaration_list specifier_qualifier_list direct_declarator . LexToken(SEMICOLON,';',3,36)
Action : Reduce rule [declarator -> direct_declarator] with [<Node @ 0x7fc63070df10>] and goto state 252
Result : <Node @ 0x7fc63070df10> (<parser.Node object at 0x7fc63070df10>)

State  : 252
Stack  : struct_or_union ID openbrace struct_declaration_list specifier_qualifier_list declarator . LexToken(SEMICOLON,';',3,36)
Action : Reduce rule [struct_declarator -> declarator] with [<Node @ 0x7fc63070df10>] and goto state 251
Result : <Node @ 0x7fc63070df10> (<parser.Node object at 0x7fc63070df10>)

State  : 251
Stack  : struct_or_union ID openbrace struct_declaration_list specifier_qualifier_list struct_declarator . LexToken(SEMICOLON,';',3,36)
Action : Reduce rule [struct_declarator_list -> struct_declarator] with [<Node @ 0x7fc63070df10>] and goto state 250
Result : <Node @ 0x7fc63070dfa0> (<parser.Node object at 0x7fc63070dfa0>)

State  : 250
Stack  : struct_or_union ID openbrace struct_declaration_list specifier_qualifier_list struct_declarator_list . LexToken(SEMICOLON,';',3,36)
Action : Shift and goto state 320

State  : 320
Stack  : struct_or_union ID openbrace struct_declaration_list specifier_qualifier_list struct_declarator_list SEMICOLON . LexToken(RCURLYBRACKET,'}',4,38)
Action : Reduce rule [struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON] with [<Node @ 0x7fc63070dfd0>,<Node @ 0x7fc63070dfa0>,';'] and goto state 249
Result : <Node @ 0x7fc63070de80> (<parser.Node object at 0x7fc63070de80>)

State  : 249
Stack  : struct_or_union ID openbrace struct_declaration_list struct_declaration . LexToken(RCURLYBRACKET,'}',4,38)
Action : Reduce rule [struct_declaration_list -> struct_declaration_list struct_declaration] with [<Node @ 0x7fc63070ddf0>,<Node @ 0x7fc63070de80>] and goto state 247
Result : <Node @ 0x7fc63070dee0> (<parser.Node object at 0x7fc63070dee0>)

State  : 247
Stack  : struct_or_union ID openbrace struct_declaration_list . LexToken(RCURLYBRACKET,'}',4,38)
Action : Shift and goto state 74

State  : 74
Stack  : struct_or_union ID openbrace struct_declaration_list RCURLYBRACKET . LexToken(INT,'int',7,42)
Action : Reduce rule [closebrace -> RCURLYBRACKET] with ['}'] and goto state 319
Result : <str @ 0x7fc630cdf1f0> ('}')

State  : 319
Stack  : struct_or_union ID openbrace struct_declaration_list closebrace . LexToken(INT,'int',7,42)
Action : Reduce rule [struct_or_union_specifier -> struct_or_union ID openbrace struct_declaration_list closebrace] with [<Node @ 0x7fc63070dd60>,'point','{',<Node @ 0x7fc63070dee0>,'}'] and goto state 27
Result : <Node @ 0x7fc63070ddc0> (<parser.Node object at 0x7fc63070ddc0>)

State  : 27
Stack  : struct_or_union_specifier . LexToken(INT,'int',7,42)
Action : Reduce rule [type_specifier -> struct_or_union_specifier] with [<Node @ 0x7fc63070ddc0>] and goto state 8
Result : <Node @ 0x7fc63070ddc0> (<parser.Node object at 0x7fc63070ddc0>)

State  : 8
Stack  : type_specifier . LexToken(INT,'int',7,42)
Action : Shift and goto state 20

State  : 20
Stack  : type_specifier INT . LexToken(ID,'main',7,46)
Action : Reduce rule [type_specifier -> INT] with ['int'] and goto state 8
Result : <Node @ 0x7fc63070deb0> (<parser.Node object at 0x7fc63070deb0>)

State  : 8
Stack  : type_specifier type_specifier . LexToken(ID,'main',7,46)
Action : Reduce rule [declaration_specifiers -> type_specifier] with [<Node @ 0x7fc63070deb0>] and goto state 49
Result : <Node @ 0x7fc63070deb0> (<parser.Node object at 0x7fc63070deb0>)

State  : 49
Stack  : type_specifier declaration_specifiers . LexToken(ID,'main',7,46)
Action : Reduce rule [declaration_specifiers -> type_specifier declaration_specifiers] with [<Node @ 0x7fc63070ddc0>,<Node @ 0x7fc63070deb0>] and goto state 5
Result : <Node @ 0x7fc63070de80> (<parser.Node object at 0x7fc63070de80>)

State  : 5
Stack  : declaration_specifiers . LexToken(ID,'main',7,46)
Action : Shift and goto state 32

State  : 32
Stack  : declaration_specifiers ID . LexToken(LPAREN,'(',7,50)
Action : Reduce rule [direct_declarator -> ID] with ['main'] and goto state 11
Result : <Node @ 0x7fc63070ddf0> (<parser.Node object at 0x7fc63070ddf0>)

State  : 11
Stack  : declaration_specifiers direct_declarator . LexToken(LPAREN,'(',7,50)
Action : Shift and goto state 54

State  : 54
Stack  : declaration_specifiers direct_declarator LPAREN . LexToken(RPAREN,')',7,51)
Action : Reduce rule [lopenparen -> LPAREN] with ['('] and goto state 52
Result : <str @ 0x7fc630c10fb0> ('(')

State  : 52
Stack  : declaration_specifiers direct_declarator lopenparen . LexToken(RPAREN,')',7,51)
Action : Shift and goto state 138

State  : 138
Stack  : declaration_specifiers direct_declarator lopenparen RPAREN . LexToken(LCURLYBRACKET,'{',8,53)
Action : Reduce rule [direct_declarator -> direct_declarator lopenparen RPAREN] with [<Node @ 0x7fc63070ddf0>,'(',')'] and goto state 11
Result : <Node @ 0x7fc63070ddf0> (<parser.Node object at 0x7fc63070ddf0>)

State  : 11
Stack  : declaration_specifiers direct_declarator . LexToken(LCURLYBRACKET,'{',8,53)
Action : Reduce rule [declarator -> direct_declarator] with [<Node @ 0x7fc63070ddf0>] and goto state 39
Result : <Node @ 0x7fc63070ddf0> (<parser.Node object at 0x7fc63070ddf0>)

State  : 39
Stack  : declaration_specifiers declarator . LexToken(LCURLYBRACKET,'{',8,53)
Action : Shift and goto state 46

State  : 46
Stack  : declaration_specifiers declarator LCURLYBRACKET . LexToken(RETURN,'return',9,59)
Action : Shift and goto state 96

State  : 96
Stack  : declaration_specifiers declarator LCURLYBRACKET RETURN . LexToken(INT_CONST,'0',9,66)
Action : Shift and goto state 126

State  : 126
Stack  : declaration_specifiers declarator LCURLYBRACKET RETURN INT_CONST . LexToken(SEMICOLON,';',9,68)
Action : Reduce rule [primary_expression -> INT_CONST] with ['0'] and goto state 114
Result : <Node @ 0x7fc63070dc40> (<parser.Node object at 0x7fc63070dc40>)

State  : 114
Stack  : declaration_specifiers declarator LCURLYBRACKET RETURN primary_expression . LexToken(SEMICOLON,';',9,68)
Action : Reduce rule [postfix_expression -> primary_expression] with [<Node @ 0x7fc63070dc40>] and goto state 107
Result : <Node @ 0x7fc63070dc40> (<parser.Node object at 0x7fc63070dc40>)

State  : 107
Stack  : declaration_specifiers declarator LCURLYBRACKET RETURN postfix_expression . LexToken(SEMICOLON,';',9,68)
Action : Reduce rule [unary_expression -> postfix_expression] with [<Node @ 0x7fc63070dc40>] and goto state 105
Result : <Node @ 0x7fc63070dc40> (<parser.Node object at 0x7fc63070dc40>)

State  : 105
Stack  : declaration_specifiers declarator LCURLYBRACKET RETURN unary_expression . LexToken(SEMICOLON,';',9,68)
Action : Reduce rule [cast_expression -> unary_expression] with [<Node @ 0x7fc63070dc40>] and goto state 111
Result : <Node @ 0x7fc63070dc40> (<parser.Node object at 0x7fc63070dc40>)

State  : 111
Stack  : declaration_specifiers declarator LCURLYBRACKET RETURN cast_expression . LexToken(SEMICOLON,';',9,68)
Action : Reduce rule [multiplicative_expression -> cast_expression] with [<Node @ 0x7fc63070dc40>] and goto state 135
Result : <Node @ 0x7fc63070dc40> (<parser.Node object at 0x7fc63070dc40>)

State  : 135
Stack  : declaration_specifiers declarator LCURLYBRACKET RETURN multiplicative_expression . LexToken(SEMICOLON,';',9,68)
Action : Reduce rule [additive_expression -> multiplicative_expression] with [<Node @ 0x7fc63070dc40>] and goto state 134
Result : <Node @ 0x7fc63070dc40> (<parser.Node object at 0x7fc63070dc40>)

State  : 134
Stack  : declaration_specifiers declarator LCURLYBRACKET RETURN additive_expression . LexToken(SEMICOLON,';',9,68)
Action : Reduce rule [shift_expression -> additive_expression] with [<Node @ 0x7fc63070dc40>] and goto state 133
Result : <Node @ 0x7fc63070dc40> (<parser.Node object at 0x7fc63070dc40>)

State  : 133
Stack  : declaration_specifiers declarator LCURLYBRACKET RETURN shift_expression . LexToken(SEMICOLON,';',9,68)
Action : Reduce rule [relational_expression -> shift_expression] with [<Node @ 0x7fc63070dc40>] and goto state 132
Result : <Node @ 0x7fc63070dc40> (<parser.Node object at 0x7fc63070dc40>)

State  : 132
Stack  : declaration_specifiers declarator LCURLYBRACKET RETURN relational_expression . LexToken(SEMICOLON,';',9,68)
Action : Reduce rule [equality_expression -> relational_expression] with [<Node @ 0x7fc63070dc40>] and goto state 131
Result : <Node @ 0x7fc63070dc40> (<parser.Node object at 0x7fc63070dc40>)

State  : 131
Stack  : declaration_specifiers declarator LCURLYBRACKET RETURN equality_expression . LexToken(SEMICOLON,';',9,68)
Action : Reduce rule [and_expression -> equality_expression] with [<Node @ 0x7fc63070dc40>] and goto state 130
Result : <Node @ 0x7fc63070dc40> (<parser.Node object at 0x7fc63070dc40>)

State  : 130
Stack  : declaration_specifiers declarator LCURLYBRACKET RETURN and_expression . LexToken(SEMICOLON,';',9,68)
Action : Reduce rule [exclusive_or_expression -> and_expression] with [<Node @ 0x7fc63070dc40>] and goto state 129
Result : <Node @ 0x7fc63070dc40> (<parser.Node object at 0x7fc63070dc40>)

State  : 129
Stack  : declaration_specifiers declarator LCURLYBRACKET RETURN exclusive_or_expression . LexToken(SEMICOLON,';',9,68)
Action : Reduce rule [inclusive_or_expression -> exclusive_or_expression] with [<Node @ 0x7fc63070dc40>] and goto state 121
Result : <Node @ 0x7fc63070dc40> (<parser.Node object at 0x7fc63070dc40>)

State  : 121
Stack  : declaration_specifiers declarator LCURLYBRACKET RETURN inclusive_or_expression . LexToken(SEMICOLON,';',9,68)
Action : Reduce rule [logical_and_expression -> inclusive_or_expression] with [<Node @ 0x7fc63070dc40>] and goto state 113
Result : <Node @ 0x7fc63070dc40> (<parser.Node object at 0x7fc63070dc40>)

State  : 113
Stack  : declaration_specifiers declarator LCURLYBRACKET RETURN logical_and_expression . LexToken(SEMICOLON,';',9,68)
Action : Reduce rule [logical_or_expression -> logical_and_expression] with [<Node @ 0x7fc63070dc40>] and goto state 106
Result : <Node @ 0x7fc63070dc40> (<parser.Node object at 0x7fc63070dc40>)

State  : 106
Stack  : declaration_specifiers declarator LCURLYBRACKET RETURN logical_or_expression . LexToken(SEMICOLON,';',9,68)
Action : Reduce rule [conditional_expression -> logical_or_expression] with [<Node @ 0x7fc63070dc40>] and goto state 104
Result : <Node @ 0x7fc63070dc40> (<parser.Node object at 0x7fc63070dc40>)

State  : 104
Stack  : declaration_specifiers declarator LCURLYBRACKET RETURN conditional_expression . LexToken(SEMICOLON,';',9,68)
Action : Reduce rule [assignment_expression -> conditional_expression] with [<Node @ 0x7fc63070dc40>] and goto state 99
Result : <Node @ 0x7fc63070dc40> (<parser.Node object at 0x7fc63070dc40>)

State  : 99
Stack  : declaration_specifiers declarator LCURLYBRACKET RETURN assignment_expression . LexToken(SEMICOLON,';',9,68)
Action : Reduce rule [expression -> assignment_expression] with [<Node @ 0x7fc63070dc40>] and goto state 190
Result : <Node @ 0x7fc63070dc40> (<parser.Node object at 0x7fc63070dc40>)

State  : 190
Stack  : declaration_specifiers declarator LCURLYBRACKET RETURN expression . LexToken(SEMICOLON,';',9,68)
Action : Shift and goto state 281

State  : 281
Stack  : declaration_specifiers declarator LCURLYBRACKET RETURN expression SEMICOLON . LexToken(RCURLYBRACKET,'}',10,70)
Action : Reduce rule [jump_statement -> RETURN expression SEMICOLON] with ['return',<Node @ 0x7fc63070dc40>,';'] and goto state 81
Result : <Node @ 0x7fc63070dd60> (<parser.Node object at 0x7fc63070dd60>)

State  : 81
Stack  : declaration_specifiers declarator LCURLYBRACKET jump_statement . LexToken(RCURLYBRACKET,'}',10,70)
Action : Reduce rule [statement -> jump_statement] with [<Node @ 0x7fc63070dd60>] and goto state 75
Result : <Node @ 0x7fc63070dd60> (<parser.Node object at 0x7fc63070dd60>)

State  : 75
Stack  : declaration_specifiers declarator LCURLYBRACKET statement . LexToken(RCURLYBRACKET,'}',10,70)
Action : Reduce rule [statement_list -> statement] with [<Node @ 0x7fc63070dd60>] and goto state 72
Result : <Node @ 0x7fc63070dd60> (<parser.Node object at 0x7fc63070dd60>)

State  : 72
Stack  : declaration_specifiers declarator LCURLYBRACKET statement_list . LexToken(RCURLYBRACKET,'}',10,70)
Action : Shift and goto state 74

State  : 74
Stack  : declaration_specifiers declarator LCURLYBRACKET statement_list RCURLYBRACKET . $end
Action : Reduce rule [closebrace -> RCURLYBRACKET] with ['}'] and goto state 168
Result : <str @ 0x7fc630cdf1f0> ('}')

State  : 168
Stack  : declaration_specifiers declarator LCURLYBRACKET statement_list closebrace . $end
Action : Reduce rule [function_compound_statement -> LCURLYBRACKET statement_list closebrace] with ['{',<Node @ 0x7fc63070dd60>,'}'] and goto state 65
Result : <Node @ 0x7fc63070dd60> (<parser.Node object at 0x7fc63070dd60>)

State  : 65
Stack  : declaration_specifiers declarator function_compound_statement . $end
Action : Reduce rule [function_definition -> declaration_specifiers declarator function_compound_statement] with [<Node @ 0x7fc63070de80>,<Node @ 0x7fc63070ddf0>,<Node @ 0x7fc63070dd60>] and goto state 3
Result : <Node @ 0x7fc63070deb0> (<parser.Node object at 0x7fc63070deb0>)

State  : 3
Stack  : function_definition . $end
Action : Reduce rule [external_declaration -> function_definition] with [<Node @ 0x7fc63070deb0>] and goto state 2
Result : <Node @ 0x7fc63070deb0> (<parser.Node object at 0x7fc63070deb0>)

State  : 2
Stack  : external_declaration . $end
Action : Reduce rule [translation_unit -> external_declaration] with [<Node @ 0x7fc63070deb0>] and goto state 1
Result : <NoneType @ 0x90aa10> (None)

State  : 1
Stack  : translation_unit . $end
Done   : Returning <NoneType @ 0x90aa10> (None)
PLY: PARSE DEBUG END
