PLY: PARSE DEBUG START

State  : 0
Stack  : . LexToken(INT,'int',3,2)
Action : Shift and goto state 20

State  : 20
Stack  : INT . LexToken(ID,'main',3,6)
Action : Reduce rule [type_specifier -> INT] with ['int'] and goto state 8
Result : <Node @ 0x7fe92b56b370> (<parser.Node object at 0x7fe92b56b370>)

State  : 8
Stack  : type_specifier . LexToken(ID,'main',3,6)
Action : Reduce rule [declaration_specifiers -> type_specifier] with [<Node @ 0x7fe92b56b370>] and goto state 5
Result : <Node @ 0x7fe92b56b370> (<parser.Node object at 0x7fe92b56b370>)

State  : 5
Stack  : declaration_specifiers . LexToken(ID,'main',3,6)
Action : Shift and goto state 32

State  : 32
Stack  : declaration_specifiers ID . LexToken(LPAREN,'(',3,10)
Action : Reduce rule [direct_declarator -> ID] with ['main'] and goto state 11
Result : <Node @ 0x7fe92b56b250> (<parser.Node object at 0x7fe92b56b250>)

State  : 11
Stack  : declaration_specifiers direct_declarator . LexToken(LPAREN,'(',3,10)
Action : Shift and goto state 54

State  : 54
Stack  : declaration_specifiers direct_declarator LPAREN . LexToken(RPAREN,')',3,11)
Action : Reduce rule [lopenparen -> LPAREN] with ['('] and goto state 52
Result : <str @ 0x7fe92ba5eeb0> ('(')

State  : 52
Stack  : declaration_specifiers direct_declarator lopenparen . LexToken(RPAREN,')',3,11)
Action : Shift and goto state 137

State  : 137
Stack  : declaration_specifiers direct_declarator lopenparen RPAREN . LexToken(LCURLYBRACKET,'{',4,13)
Action : Reduce rule [direct_declarator -> direct_declarator lopenparen RPAREN] with [<Node @ 0x7fe92b56b250>,'(',')'] and goto state 11
Result : <Node @ 0x7fe92b56b250> (<parser.Node object at 0x7fe92b56b250>)

State  : 11
Stack  : declaration_specifiers direct_declarator . LexToken(LCURLYBRACKET,'{',4,13)
Action : Reduce rule [declarator -> direct_declarator] with [<Node @ 0x7fe92b56b250>] and goto state 39
Result : <Node @ 0x7fe92b56b250> (<parser.Node object at 0x7fe92b56b250>)

State  : 39
Stack  : declaration_specifiers declarator . LexToken(LCURLYBRACKET,'{',4,13)
Action : Shift and goto state 46

State  : 46
Stack  : declaration_specifiers declarator LCURLYBRACKET . LexToken(INT,'int',5,19)
Action : Shift and goto state 20

State  : 20
Stack  : declaration_specifiers declarator LCURLYBRACKET INT . LexToken(ID,'x',5,23)
Action : Reduce rule [type_specifier -> INT] with ['int'] and goto state 8
Result : <Node @ 0x7fe92b56b280> (<parser.Node object at 0x7fe92b56b280>)

State  : 8
Stack  : declaration_specifiers declarator LCURLYBRACKET type_specifier . LexToken(ID,'x',5,23)
Action : Reduce rule [declaration_specifiers -> type_specifier] with [<Node @ 0x7fe92b56b280>] and goto state 47
Result : <Node @ 0x7fe92b56b280> (<parser.Node object at 0x7fe92b56b280>)

State  : 47
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers . LexToken(ID,'x',5,23)
Action : Shift and goto state 32

State  : 32
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers ID . LexToken(SEMICOLON,';',5,24)
Action : Reduce rule [direct_declarator -> ID] with ['x'] and goto state 11
Result : <Node @ 0x7fe92b56b310> (<parser.Node object at 0x7fe92b56b310>)

State  : 11
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers direct_declarator . LexToken(SEMICOLON,';',5,24)
Action : Reduce rule [declarator -> direct_declarator] with [<Node @ 0x7fe92b56b310>] and goto state 135
Result : <Node @ 0x7fe92b56b310> (<parser.Node object at 0x7fe92b56b310>)

State  : 135
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers declarator . LexToken(SEMICOLON,';',5,24)
Action : Reduce rule [init_declarator -> declarator] with [<Node @ 0x7fe92b56b310>] and goto state 42
Result : <Node @ 0x7fe92b56b310> (<parser.Node object at 0x7fe92b56b310>)

State  : 42
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator . LexToken(SEMICOLON,';',5,24)
Action : Reduce rule [init_declarator_list -> init_declarator] with [<Node @ 0x7fe92b56b310>] and goto state 41
Result : <Node @ 0x7fe92b56b490> (<parser.Node object at 0x7fe92b56b490>)

State  : 41
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list . LexToken(SEMICOLON,';',5,24)
Action : Shift and goto state 67

State  : 67
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list SEMICOLON . LexToken(INT,'int',6,30)
Action : Reduce rule [declaration -> declaration_specifiers init_declarator_list SEMICOLON] with [<Node @ 0x7fe92b56b280>,<Node @ 0x7fe92b56b490>,';'] and goto state 45
Result : <Node @ 0x7fe92b56b340> (<parser.Node object at 0x7fe92b56b340>)

State  : 45
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration . LexToken(INT,'int',6,30)
Action : Reduce rule [declaration_list -> declaration] with [<Node @ 0x7fe92b56b340>] and goto state 73
Result : <Node @ 0x7fe92b56b340> (<parser.Node object at 0x7fe92b56b340>)

State  : 73
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list . LexToken(INT,'int',6,30)
Action : Shift and goto state 20

State  : 20
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list INT . LexToken(ID,'y',6,34)
Action : Reduce rule [type_specifier -> INT] with ['int'] and goto state 8
Result : <Node @ 0x7fe92b56b5e0> (<parser.Node object at 0x7fe92b56b5e0>)

State  : 8
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list type_specifier . LexToken(ID,'y',6,34)
Action : Reduce rule [declaration_specifiers -> type_specifier] with [<Node @ 0x7fe92b56b5e0>] and goto state 47
Result : <Node @ 0x7fe92b56b5e0> (<parser.Node object at 0x7fe92b56b5e0>)

State  : 47
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list declaration_specifiers . LexToken(ID,'y',6,34)
Action : Shift and goto state 32

State  : 32
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list declaration_specifiers ID . LexToken(COMMA,',',6,35)
Action : Reduce rule [direct_declarator -> ID] with ['y'] and goto state 11
Result : <Node @ 0x7fe92b56b4f0> (<parser.Node object at 0x7fe92b56b4f0>)

State  : 11
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list declaration_specifiers direct_declarator . LexToken(COMMA,',',6,35)
Action : Reduce rule [declarator -> direct_declarator] with [<Node @ 0x7fe92b56b4f0>] and goto state 135
Result : <Node @ 0x7fe92b56b4f0> (<parser.Node object at 0x7fe92b56b4f0>)

State  : 135
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list declaration_specifiers declarator . LexToken(COMMA,',',6,35)
Action : Reduce rule [init_declarator -> declarator] with [<Node @ 0x7fe92b56b4f0>] and goto state 42
Result : <Node @ 0x7fe92b56b4f0> (<parser.Node object at 0x7fe92b56b4f0>)

State  : 42
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list declaration_specifiers init_declarator . LexToken(COMMA,',',6,35)
Action : Reduce rule [init_declarator_list -> init_declarator] with [<Node @ 0x7fe92b56b4f0>] and goto state 41
Result : <Node @ 0x7fe92b56b430> (<parser.Node object at 0x7fe92b56b430>)

State  : 41
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list declaration_specifiers init_declarator_list . LexToken(COMMA,',',6,35)
Action : Shift and goto state 68

State  : 68
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list declaration_specifiers init_declarator_list COMMA . LexToken(ID,'z',6,37)
Action : Shift and goto state 32

State  : 32
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list declaration_specifiers init_declarator_list COMMA ID . LexToken(SEMICOLON,';',6,38)
Action : Reduce rule [direct_declarator -> ID] with ['z'] and goto state 11
Result : <Node @ 0x7fe92b56b5b0> (<parser.Node object at 0x7fe92b56b5b0>)

State  : 11
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list declaration_specifiers init_declarator_list COMMA direct_declarator . LexToken(SEMICOLON,';',6,38)
Action : Reduce rule [declarator -> direct_declarator] with [<Node @ 0x7fe92b56b5b0>] and goto state 135
Result : <Node @ 0x7fe92b56b5b0> (<parser.Node object at 0x7fe92b56b5b0>)

State  : 135
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list declaration_specifiers init_declarator_list COMMA declarator . LexToken(SEMICOLON,';',6,38)
Action : Reduce rule [init_declarator -> declarator] with [<Node @ 0x7fe92b56b5b0>] and goto state 163
Result : <Node @ 0x7fe92b56b5b0> (<parser.Node object at 0x7fe92b56b5b0>)

State  : 163
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list declaration_specifiers init_declarator_list COMMA init_declarator . LexToken(SEMICOLON,';',6,38)
Action : Reduce rule [init_declarator_list -> init_declarator_list COMMA init_declarator] with [<Node @ 0x7fe92b56b430>,',',<Node @ 0x7fe92b56b5b0>] and goto state 41
Result : <Node @ 0x7fe92b56b430> (<parser.Node object at 0x7fe92b56b430>)

State  : 41
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list declaration_specifiers init_declarator_list . LexToken(SEMICOLON,';',6,38)
Action : Shift and goto state 67

State  : 67
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list declaration_specifiers init_declarator_list SEMICOLON . LexToken(SWITCH,'switch',7,44)
Action : Reduce rule [declaration -> declaration_specifiers init_declarator_list SEMICOLON] with [<Node @ 0x7fe92b56b5e0>,<Node @ 0x7fe92b56b430>,';'] and goto state 70
Result : <Node @ 0x7fe92b56b670> (<parser.Node object at 0x7fe92b56b670>)

State  : 70
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list declaration . LexToken(SWITCH,'switch',7,44)
Action : Reduce rule [declaration_list -> declaration_list declaration] with [<Node @ 0x7fe92b56b340>,<Node @ 0x7fe92b56b670>] and goto state 73
Result : <Node @ 0x7fe92b56b640> (<parser.Node object at 0x7fe92b56b640>)

State  : 73
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list . LexToken(SWITCH,'switch',7,44)
Action : Shift and goto state 100

State  : 100
Defaulted state 100: Reduce using 207
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list SWITCH . None
Action : Reduce rule [switch -> SWITCH] with ['switch'] and goto state 89
Result : <str @ 0x7fe92b56f070> ('switch')

State  : 89
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch . LexToken(LPAREN,'(',7,50)
Action : Shift and goto state 180

State  : 180
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN . LexToken(ID,'x',7,51)
Action : Shift and goto state 162

State  : 162
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN ID . LexToken(RPAREN,')',7,52)
Action : Reduce rule [primary_expression -> ID] with ['x'] and goto state 113
Result : <Node @ 0x7fe92b56b850> (<parser.Node object at 0x7fe92b56b850>)

State  : 113
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN primary_expression . LexToken(RPAREN,')',7,52)
Action : Reduce rule [postfix_expression -> primary_expression] with [<Node @ 0x7fe92b56b850>] and goto state 106
Result : <Node @ 0x7fe92b56b850> (<parser.Node object at 0x7fe92b56b850>)

State  : 106
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN postfix_expression . LexToken(RPAREN,')',7,52)
Action : Reduce rule [unary_expression -> postfix_expression] with [<Node @ 0x7fe92b56b850>] and goto state 104
Result : <Node @ 0x7fe92b56b850> (<parser.Node object at 0x7fe92b56b850>)

State  : 104
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN unary_expression . LexToken(RPAREN,')',7,52)
Action : Reduce rule [cast_expression -> unary_expression] with [<Node @ 0x7fe92b56b850>] and goto state 110
Result : <Node @ 0x7fe92b56b850> (<parser.Node object at 0x7fe92b56b850>)

State  : 110
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN cast_expression . LexToken(RPAREN,')',7,52)
Action : Reduce rule [multiplicative_expression -> cast_expression] with [<Node @ 0x7fe92b56b850>] and goto state 134
Result : <Node @ 0x7fe92b56b850> (<parser.Node object at 0x7fe92b56b850>)

State  : 134
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN multiplicative_expression . LexToken(RPAREN,')',7,52)
Action : Reduce rule [additive_expression -> multiplicative_expression] with [<Node @ 0x7fe92b56b850>] and goto state 133
Result : <Node @ 0x7fe92b56b850> (<parser.Node object at 0x7fe92b56b850>)

State  : 133
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN additive_expression . LexToken(RPAREN,')',7,52)
Action : Reduce rule [shift_expression -> additive_expression] with [<Node @ 0x7fe92b56b850>] and goto state 132
Result : <Node @ 0x7fe92b56b850> (<parser.Node object at 0x7fe92b56b850>)

State  : 132
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN shift_expression . LexToken(RPAREN,')',7,52)
Action : Reduce rule [relational_expression -> shift_expression] with [<Node @ 0x7fe92b56b850>] and goto state 131
Result : <Node @ 0x7fe92b56b850> (<parser.Node object at 0x7fe92b56b850>)

State  : 131
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN relational_expression . LexToken(RPAREN,')',7,52)
Action : Reduce rule [equality_expression -> relational_expression] with [<Node @ 0x7fe92b56b850>] and goto state 130
Result : <Node @ 0x7fe92b56b850> (<parser.Node object at 0x7fe92b56b850>)

State  : 130
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN equality_expression . LexToken(RPAREN,')',7,52)
Action : Reduce rule [and_expression -> equality_expression] with [<Node @ 0x7fe92b56b850>] and goto state 129
Result : <Node @ 0x7fe92b56b850> (<parser.Node object at 0x7fe92b56b850>)

State  : 129
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN and_expression . LexToken(RPAREN,')',7,52)
Action : Reduce rule [exclusive_or_expression -> and_expression] with [<Node @ 0x7fe92b56b850>] and goto state 128
Result : <Node @ 0x7fe92b56b850> (<parser.Node object at 0x7fe92b56b850>)

State  : 128
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN exclusive_or_expression . LexToken(RPAREN,')',7,52)
Action : Reduce rule [inclusive_or_expression -> exclusive_or_expression] with [<Node @ 0x7fe92b56b850>] and goto state 120
Result : <Node @ 0x7fe92b56b850> (<parser.Node object at 0x7fe92b56b850>)

State  : 120
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN inclusive_or_expression . LexToken(RPAREN,')',7,52)
Action : Reduce rule [logical_and_expression -> inclusive_or_expression] with [<Node @ 0x7fe92b56b850>] and goto state 112
Result : <Node @ 0x7fe92b56b850> (<parser.Node object at 0x7fe92b56b850>)

State  : 112
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN logical_and_expression . LexToken(RPAREN,')',7,52)
Action : Reduce rule [logical_or_expression -> logical_and_expression] with [<Node @ 0x7fe92b56b850>] and goto state 105
Result : <Node @ 0x7fe92b56b850> (<parser.Node object at 0x7fe92b56b850>)

State  : 105
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN logical_or_expression . LexToken(RPAREN,')',7,52)
Action : Reduce rule [conditional_expression -> logical_or_expression] with [<Node @ 0x7fe92b56b850>] and goto state 103
Result : <Node @ 0x7fe92b56b850> (<parser.Node object at 0x7fe92b56b850>)

State  : 103
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN conditional_expression . LexToken(RPAREN,')',7,52)
Action : Reduce rule [assignment_expression -> conditional_expression] with [<Node @ 0x7fe92b56b850>] and goto state 98
Result : <Node @ 0x7fe92b56b850> (<parser.Node object at 0x7fe92b56b850>)

State  : 98
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN assignment_expression . LexToken(RPAREN,')',7,52)
Action : Reduce rule [expression -> assignment_expression] with [<Node @ 0x7fe92b56b850>] and goto state 275
Result : <Node @ 0x7fe92b56b850> (<parser.Node object at 0x7fe92b56b850>)

State  : 275
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression . LexToken(RPAREN,')',7,52)
Action : Shift and goto state 333

State  : 333
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN . LexToken(LCURLYBRACKET,'{',7,53)
Action : Reduce rule [SwMark2 -> <empty>] with [] and goto state 354
Result : <list @ 0x7fe92b5b9a40> (['l0', 'l1'])

State  : 354
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 . LexToken(LCURLYBRACKET,'{',7,53)
Action : Shift and goto state 61

State  : 61
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 LCURLYBRACKET . LexToken(CASE,'case',8,63)
Action : Reduce rule [openbrace -> LCURLYBRACKET] with ['{'] and goto state 85
Result : <str @ 0x7fe92bb2d1f0> ('{')

State  : 85
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace . LexToken(CASE,'case',8,63)
Action : Reduce rule [SwMark1 -> <empty>] with [] and goto state 84
Result : <str @ 0x7fe92b56f670> ('l2')

State  : 84
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 . LexToken(CASE,'case',8,63)
Action : Shift and goto state 169

State  : 169
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE . LexToken(INT_CONST,'1',8,68)
Action : Shift and goto state 125

State  : 125
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE INT_CONST . LexToken(COLON,':',8,69)
Action : Reduce rule [primary_expression -> INT_CONST] with ['1'] and goto state 113
Result : <Node @ 0x7fe92b56b970> (<parser.Node object at 0x7fe92b56b970>)

State  : 113
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE primary_expression . LexToken(COLON,':',8,69)
Action : Reduce rule [postfix_expression -> primary_expression] with [<Node @ 0x7fe92b56b970>] and goto state 106
Result : <Node @ 0x7fe92b56b970> (<parser.Node object at 0x7fe92b56b970>)

State  : 106
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE postfix_expression . LexToken(COLON,':',8,69)
Action : Reduce rule [unary_expression -> postfix_expression] with [<Node @ 0x7fe92b56b970>] and goto state 213
Result : <Node @ 0x7fe92b56b970> (<parser.Node object at 0x7fe92b56b970>)

State  : 213
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE unary_expression . LexToken(COLON,':',8,69)
Action : Reduce rule [cast_expression -> unary_expression] with [<Node @ 0x7fe92b56b970>] and goto state 110
Result : <Node @ 0x7fe92b56b970> (<parser.Node object at 0x7fe92b56b970>)

State  : 110
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE cast_expression . LexToken(COLON,':',8,69)
Action : Reduce rule [multiplicative_expression -> cast_expression] with [<Node @ 0x7fe92b56b970>] and goto state 134
Result : <Node @ 0x7fe92b56b970> (<parser.Node object at 0x7fe92b56b970>)

State  : 134
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE multiplicative_expression . LexToken(COLON,':',8,69)
Action : Reduce rule [additive_expression -> multiplicative_expression] with [<Node @ 0x7fe92b56b970>] and goto state 133
Result : <Node @ 0x7fe92b56b970> (<parser.Node object at 0x7fe92b56b970>)

State  : 133
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE additive_expression . LexToken(COLON,':',8,69)
Action : Reduce rule [shift_expression -> additive_expression] with [<Node @ 0x7fe92b56b970>] and goto state 132
Result : <Node @ 0x7fe92b56b970> (<parser.Node object at 0x7fe92b56b970>)

State  : 132
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE shift_expression . LexToken(COLON,':',8,69)
Action : Reduce rule [relational_expression -> shift_expression] with [<Node @ 0x7fe92b56b970>] and goto state 131
Result : <Node @ 0x7fe92b56b970> (<parser.Node object at 0x7fe92b56b970>)

State  : 131
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE relational_expression . LexToken(COLON,':',8,69)
Action : Reduce rule [equality_expression -> relational_expression] with [<Node @ 0x7fe92b56b970>] and goto state 130
Result : <Node @ 0x7fe92b56b970> (<parser.Node object at 0x7fe92b56b970>)

State  : 130
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE equality_expression . LexToken(COLON,':',8,69)
Action : Reduce rule [and_expression -> equality_expression] with [<Node @ 0x7fe92b56b970>] and goto state 129
Result : <Node @ 0x7fe92b56b970> (<parser.Node object at 0x7fe92b56b970>)

State  : 129
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE and_expression . LexToken(COLON,':',8,69)
Action : Reduce rule [exclusive_or_expression -> and_expression] with [<Node @ 0x7fe92b56b970>] and goto state 128
Result : <Node @ 0x7fe92b56b970> (<parser.Node object at 0x7fe92b56b970>)

State  : 128
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE exclusive_or_expression . LexToken(COLON,':',8,69)
Action : Reduce rule [inclusive_or_expression -> exclusive_or_expression] with [<Node @ 0x7fe92b56b970>] and goto state 120
Result : <Node @ 0x7fe92b56b970> (<parser.Node object at 0x7fe92b56b970>)

State  : 120
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE inclusive_or_expression . LexToken(COLON,':',8,69)
Action : Reduce rule [logical_and_expression -> inclusive_or_expression] with [<Node @ 0x7fe92b56b970>] and goto state 112
Result : <Node @ 0x7fe92b56b970> (<parser.Node object at 0x7fe92b56b970>)

State  : 112
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE logical_and_expression . LexToken(COLON,':',8,69)
Action : Reduce rule [logical_or_expression -> logical_and_expression] with [<Node @ 0x7fe92b56b970>] and goto state 105
Result : <Node @ 0x7fe92b56b970> (<parser.Node object at 0x7fe92b56b970>)

State  : 105
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE logical_or_expression . LexToken(COLON,':',8,69)
Action : Reduce rule [conditional_expression -> logical_or_expression] with [<Node @ 0x7fe92b56b970>] and goto state 263
Result : <Node @ 0x7fe92b56b970> (<parser.Node object at 0x7fe92b56b970>)

State  : 263
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE conditional_expression . LexToken(COLON,':',8,69)
Action : Reduce rule [constant_expression -> conditional_expression] with [<Node @ 0x7fe92b56b970>] and goto state 262
Result : <Node @ 0x7fe92b56b970> (<parser.Node object at 0x7fe92b56b970>)

State  : 262
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression . LexToken(COLON,':',8,69)
Action : Shift and goto state 328

State  : 328
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON . LexToken(ID,'y',9,83)
Action : Shift and goto state 83

State  : 83
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON ID . LexToken(EQUALS,'=',9,85)
Action : Reduce rule [primary_expression -> ID] with ['y'] and goto state 113
Result : <Node @ 0x7fe92b56b760> (<parser.Node object at 0x7fe92b56b760>)

State  : 113
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON primary_expression . LexToken(EQUALS,'=',9,85)
Action : Reduce rule [postfix_expression -> primary_expression] with [<Node @ 0x7fe92b56b760>] and goto state 106
Result : <Node @ 0x7fe92b56b760> (<parser.Node object at 0x7fe92b56b760>)

State  : 106
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON postfix_expression . LexToken(EQUALS,'=',9,85)
Action : Reduce rule [unary_expression -> postfix_expression] with [<Node @ 0x7fe92b56b760>] and goto state 104
Result : <Node @ 0x7fe92b56b760> (<parser.Node object at 0x7fe92b56b760>)

State  : 104
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON unary_expression . LexToken(EQUALS,'=',9,85)
Action : Shift and goto state 190

State  : 190
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON unary_expression EQUALS . LexToken(INT_CONST,'5',9,87)
Action : Reduce rule [assignment_operator -> EQUALS] with ['='] and goto state 189
Result : <Node @ 0x7fe92b56b9a0> (<parser.Node object at 0x7fe92b56b9a0>)

State  : 189
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON unary_expression assignment_operator . LexToken(INT_CONST,'5',9,87)
Action : Shift and goto state 125

State  : 125
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON unary_expression assignment_operator INT_CONST . LexToken(PLUS,'+',9,88)
Action : Reduce rule [primary_expression -> INT_CONST] with ['5'] and goto state 113
Result : <Node @ 0x7fe92b56ba60> (<parser.Node object at 0x7fe92b56ba60>)

State  : 113
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON unary_expression assignment_operator primary_expression . LexToken(PLUS,'+',9,88)
Action : Reduce rule [postfix_expression -> primary_expression] with [<Node @ 0x7fe92b56ba60>] and goto state 106
Result : <Node @ 0x7fe92b56ba60> (<parser.Node object at 0x7fe92b56ba60>)

State  : 106
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON unary_expression assignment_operator postfix_expression . LexToken(PLUS,'+',9,88)
Action : Reduce rule [unary_expression -> postfix_expression] with [<Node @ 0x7fe92b56ba60>] and goto state 104
Result : <Node @ 0x7fe92b56ba60> (<parser.Node object at 0x7fe92b56ba60>)

State  : 104
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON unary_expression assignment_operator unary_expression . LexToken(PLUS,'+',9,88)
Action : Reduce rule [cast_expression -> unary_expression] with [<Node @ 0x7fe92b56ba60>] and goto state 110
Result : <Node @ 0x7fe92b56ba60> (<parser.Node object at 0x7fe92b56ba60>)

State  : 110
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON unary_expression assignment_operator cast_expression . LexToken(PLUS,'+',9,88)
Action : Reduce rule [multiplicative_expression -> cast_expression] with [<Node @ 0x7fe92b56ba60>] and goto state 134
Result : <Node @ 0x7fe92b56ba60> (<parser.Node object at 0x7fe92b56ba60>)

State  : 134
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON unary_expression assignment_operator multiplicative_expression . LexToken(PLUS,'+',9,88)
Action : Reduce rule [additive_expression -> multiplicative_expression] with [<Node @ 0x7fe92b56ba60>] and goto state 133
Result : <Node @ 0x7fe92b56ba60> (<parser.Node object at 0x7fe92b56ba60>)

State  : 133
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON unary_expression assignment_operator additive_expression . LexToken(PLUS,'+',9,88)
Action : Shift and goto state 229

State  : 229
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON unary_expression assignment_operator additive_expression PLUS . LexToken(INT_CONST,'6',9,89)
Action : Shift and goto state 125

State  : 125
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON unary_expression assignment_operator additive_expression PLUS INT_CONST . LexToken(SEMICOLON,';',9,90)
Action : Reduce rule [primary_expression -> INT_CONST] with ['6'] and goto state 113
Result : <Node @ 0x7fe92b56ba90> (<parser.Node object at 0x7fe92b56ba90>)

State  : 113
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON unary_expression assignment_operator additive_expression PLUS primary_expression . LexToken(SEMICOLON,';',9,90)
Action : Reduce rule [postfix_expression -> primary_expression] with [<Node @ 0x7fe92b56ba90>] and goto state 106
Result : <Node @ 0x7fe92b56ba90> (<parser.Node object at 0x7fe92b56ba90>)

State  : 106
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON unary_expression assignment_operator additive_expression PLUS postfix_expression . LexToken(SEMICOLON,';',9,90)
Action : Reduce rule [unary_expression -> postfix_expression] with [<Node @ 0x7fe92b56ba90>] and goto state 213
Result : <Node @ 0x7fe92b56ba90> (<parser.Node object at 0x7fe92b56ba90>)

State  : 213
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON unary_expression assignment_operator additive_expression PLUS unary_expression . LexToken(SEMICOLON,';',9,90)
Action : Reduce rule [cast_expression -> unary_expression] with [<Node @ 0x7fe92b56ba90>] and goto state 110
Result : <Node @ 0x7fe92b56ba90> (<parser.Node object at 0x7fe92b56ba90>)

State  : 110
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON unary_expression assignment_operator additive_expression PLUS cast_expression . LexToken(SEMICOLON,';',9,90)
Action : Reduce rule [multiplicative_expression -> cast_expression] with [<Node @ 0x7fe92b56ba90>] and goto state 303
Result : <Node @ 0x7fe92b56ba90> (<parser.Node object at 0x7fe92b56ba90>)

State  : 303
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON unary_expression assignment_operator additive_expression PLUS multiplicative_expression . LexToken(SEMICOLON,';',9,90)
Action : Reduce rule [additive_expression -> additive_expression PLUS multiplicative_expression] with [<Node @ 0x7fe92b56ba60>,'+',<Node @ 0x7fe92b56ba90>] and goto state 133
Result : <Node @ 0x7fe92b56bca0> (<parser.Node object at 0x7fe92b56bca0>)

State  : 133
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON unary_expression assignment_operator additive_expression . LexToken(SEMICOLON,';',9,90)
Action : Reduce rule [shift_expression -> additive_expression] with [<Node @ 0x7fe92b56bca0>] and goto state 132
Result : <Node @ 0x7fe92b56bca0> (<parser.Node object at 0x7fe92b56bca0>)

State  : 132
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON unary_expression assignment_operator shift_expression . LexToken(SEMICOLON,';',9,90)
Action : Reduce rule [relational_expression -> shift_expression] with [<Node @ 0x7fe92b56bca0>] and goto state 131
Result : <Node @ 0x7fe92b56bca0> (<parser.Node object at 0x7fe92b56bca0>)

State  : 131
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON unary_expression assignment_operator relational_expression . LexToken(SEMICOLON,';',9,90)
Action : Reduce rule [equality_expression -> relational_expression] with [<Node @ 0x7fe92b56bca0>] and goto state 130
Result : <Node @ 0x7fe92b56bca0> (<parser.Node object at 0x7fe92b56bca0>)

State  : 130
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON unary_expression assignment_operator equality_expression . LexToken(SEMICOLON,';',9,90)
Action : Reduce rule [and_expression -> equality_expression] with [<Node @ 0x7fe92b56bca0>] and goto state 129
Result : <Node @ 0x7fe92b56bca0> (<parser.Node object at 0x7fe92b56bca0>)

State  : 129
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON unary_expression assignment_operator and_expression . LexToken(SEMICOLON,';',9,90)
Action : Reduce rule [exclusive_or_expression -> and_expression] with [<Node @ 0x7fe92b56bca0>] and goto state 128
Result : <Node @ 0x7fe92b56bca0> (<parser.Node object at 0x7fe92b56bca0>)

State  : 128
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON unary_expression assignment_operator exclusive_or_expression . LexToken(SEMICOLON,';',9,90)
Action : Reduce rule [inclusive_or_expression -> exclusive_or_expression] with [<Node @ 0x7fe92b56bca0>] and goto state 120
Result : <Node @ 0x7fe92b56bca0> (<parser.Node object at 0x7fe92b56bca0>)

State  : 120
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON unary_expression assignment_operator inclusive_or_expression . LexToken(SEMICOLON,';',9,90)
Action : Reduce rule [logical_and_expression -> inclusive_or_expression] with [<Node @ 0x7fe92b56bca0>] and goto state 112
Result : <Node @ 0x7fe92b56bca0> (<parser.Node object at 0x7fe92b56bca0>)

State  : 112
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON unary_expression assignment_operator logical_and_expression . LexToken(SEMICOLON,';',9,90)
Action : Reduce rule [logical_or_expression -> logical_and_expression] with [<Node @ 0x7fe92b56bca0>] and goto state 105
Result : <Node @ 0x7fe92b56bca0> (<parser.Node object at 0x7fe92b56bca0>)

State  : 105
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON unary_expression assignment_operator logical_or_expression . LexToken(SEMICOLON,';',9,90)
Action : Reduce rule [conditional_expression -> logical_or_expression] with [<Node @ 0x7fe92b56bca0>] and goto state 103
Result : <Node @ 0x7fe92b56bca0> (<parser.Node object at 0x7fe92b56bca0>)

State  : 103
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON unary_expression assignment_operator conditional_expression . LexToken(SEMICOLON,';',9,90)
Action : Reduce rule [assignment_expression -> conditional_expression] with [<Node @ 0x7fe92b56bca0>] and goto state 281
Result : <Node @ 0x7fe92b56bca0> (<parser.Node object at 0x7fe92b56bca0>)

State  : 281
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON unary_expression assignment_operator assignment_expression . LexToken(SEMICOLON,';',9,90)
Action : Reduce rule [assignment_expression -> unary_expression assignment_operator assignment_expression] with [<Node @ 0x7fe92b56b760>,<Node @ 0x7fe92b56b9a0>,<Node @ 0x7fe92b56bca0>] and goto state 98
Result : <Node @ 0x7fe92b56bbb0> (<parser.Node object at 0x7fe92b56bbb0>)

State  : 98
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON assignment_expression . LexToken(SEMICOLON,';',9,90)
Action : Reduce rule [expression -> assignment_expression] with [<Node @ 0x7fe92b56bbb0>] and goto state 86
Result : <Node @ 0x7fe92b56bbb0> (<parser.Node object at 0x7fe92b56bbb0>)

State  : 86
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON expression . LexToken(SEMICOLON,';',9,90)
Action : Shift and goto state 174

State  : 174
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON expression SEMICOLON . LexToken(BREAK,'break',10,104)
Action : Reduce rule [expression_statement -> expression SEMICOLON] with [<Node @ 0x7fe92b56bbb0>,';'] and goto state 78
Result : <Node @ 0x7fe92b56b8b0> (<parser.Node object at 0x7fe92b56b8b0>)

State  : 78
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON expression_statement . LexToken(BREAK,'break',10,104)
Action : Reduce rule [statement -> expression_statement] with [<Node @ 0x7fe92b56b8b0>] and goto state 352
Result : <Node @ 0x7fe92b56baf0> (<parser.Node object at 0x7fe92b56baf0>)

State  : 352
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace SwMark1 CASE constant_expression COLON statement . LexToken(BREAK,'break',10,104)
Action : Reduce rule [labeled_statement -> SwMark1 CASE constant_expression COLON statement] with ['l2','case',<Node @ 0x7fe92b56b970>,':',<Node @ 0x7fe92b56baf0>] and goto state 76
Result : <Node @ 0x7fe92b56ba30> (<parser.Node object at 0x7fe92b56ba30>)

State  : 76
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace labeled_statement . LexToken(BREAK,'break',10,104)
Action : Reduce rule [statement -> labeled_statement] with [<Node @ 0x7fe92b56ba30>] and goto state 75
Result : <Node @ 0x7fe92b56bc70> (<parser.Node object at 0x7fe92b56bc70>)

State  : 75
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement . LexToken(BREAK,'break',10,104)
Action : Reduce rule [statement_list -> statement] with [<Node @ 0x7fe92b56bc70>] and goto state 172
Result : <Node @ 0x7fe92b56bc70> (<parser.Node object at 0x7fe92b56bc70>)

State  : 172
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list . LexToken(BREAK,'break',10,104)
Action : Shift and goto state 95

State  : 95
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list BREAK . LexToken(SEMICOLON,';',10,109)
Action : Shift and goto state 186

State  : 186
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list BREAK SEMICOLON . LexToken(CASE,'case',11,119)
Action : Reduce rule [jump_statement -> BREAK SEMICOLON] with ['break',';'] and goto state 81
Result : <Node @ 0x7fe92b56b8b0> (<parser.Node object at 0x7fe92b56b8b0>)

State  : 81
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list jump_statement . LexToken(CASE,'case',11,119)
Action : Reduce rule [statement -> jump_statement] with [<Node @ 0x7fe92b56b8b0>] and goto state 165
Result : <Node @ 0x7fe92b56ba00> (<parser.Node object at 0x7fe92b56ba00>)

State  : 165
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list statement . LexToken(CASE,'case',11,119)
Action : Reduce rule [statement_list -> statement_list statement] with [<Node @ 0x7fe92b56bc70>,<Node @ 0x7fe92b56ba00>] and goto state 172
Result : <Node @ 0x7fe92b56b700> (<parser.Node object at 0x7fe92b56b700>)

State  : 172
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list . LexToken(CASE,'case',11,119)
Action : Reduce rule [SwMark1 -> <empty>] with [] and goto state 84
Result : <str @ 0x7fe92b56fbb0> ('l3')

State  : 84
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 . LexToken(CASE,'case',11,119)
Action : Shift and goto state 169

State  : 169
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE . LexToken(INT_CONST,'2',11,124)
Action : Shift and goto state 125

State  : 125
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE INT_CONST . LexToken(COLON,':',11,125)
Action : Reduce rule [primary_expression -> INT_CONST] with ['2'] and goto state 113
Result : <Node @ 0x7fe92b56b8e0> (<parser.Node object at 0x7fe92b56b8e0>)

State  : 113
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE primary_expression . LexToken(COLON,':',11,125)
Action : Reduce rule [postfix_expression -> primary_expression] with [<Node @ 0x7fe92b56b8e0>] and goto state 106
Result : <Node @ 0x7fe92b56b8e0> (<parser.Node object at 0x7fe92b56b8e0>)

State  : 106
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE postfix_expression . LexToken(COLON,':',11,125)
Action : Reduce rule [unary_expression -> postfix_expression] with [<Node @ 0x7fe92b56b8e0>] and goto state 213
Result : <Node @ 0x7fe92b56b8e0> (<parser.Node object at 0x7fe92b56b8e0>)

State  : 213
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE unary_expression . LexToken(COLON,':',11,125)
Action : Reduce rule [cast_expression -> unary_expression] with [<Node @ 0x7fe92b56b8e0>] and goto state 110
Result : <Node @ 0x7fe92b56b8e0> (<parser.Node object at 0x7fe92b56b8e0>)

State  : 110
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE cast_expression . LexToken(COLON,':',11,125)
Action : Reduce rule [multiplicative_expression -> cast_expression] with [<Node @ 0x7fe92b56b8e0>] and goto state 134
Result : <Node @ 0x7fe92b56b8e0> (<parser.Node object at 0x7fe92b56b8e0>)

State  : 134
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE multiplicative_expression . LexToken(COLON,':',11,125)
Action : Reduce rule [additive_expression -> multiplicative_expression] with [<Node @ 0x7fe92b56b8e0>] and goto state 133
Result : <Node @ 0x7fe92b56b8e0> (<parser.Node object at 0x7fe92b56b8e0>)

State  : 133
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE additive_expression . LexToken(COLON,':',11,125)
Action : Reduce rule [shift_expression -> additive_expression] with [<Node @ 0x7fe92b56b8e0>] and goto state 132
Result : <Node @ 0x7fe92b56b8e0> (<parser.Node object at 0x7fe92b56b8e0>)

State  : 132
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE shift_expression . LexToken(COLON,':',11,125)
Action : Reduce rule [relational_expression -> shift_expression] with [<Node @ 0x7fe92b56b8e0>] and goto state 131
Result : <Node @ 0x7fe92b56b8e0> (<parser.Node object at 0x7fe92b56b8e0>)

State  : 131
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE relational_expression . LexToken(COLON,':',11,125)
Action : Reduce rule [equality_expression -> relational_expression] with [<Node @ 0x7fe92b56b8e0>] and goto state 130
Result : <Node @ 0x7fe92b56b8e0> (<parser.Node object at 0x7fe92b56b8e0>)

State  : 130
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE equality_expression . LexToken(COLON,':',11,125)
Action : Reduce rule [and_expression -> equality_expression] with [<Node @ 0x7fe92b56b8e0>] and goto state 129
Result : <Node @ 0x7fe92b56b8e0> (<parser.Node object at 0x7fe92b56b8e0>)

State  : 129
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE and_expression . LexToken(COLON,':',11,125)
Action : Reduce rule [exclusive_or_expression -> and_expression] with [<Node @ 0x7fe92b56b8e0>] and goto state 128
Result : <Node @ 0x7fe92b56b8e0> (<parser.Node object at 0x7fe92b56b8e0>)

State  : 128
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE exclusive_or_expression . LexToken(COLON,':',11,125)
Action : Reduce rule [inclusive_or_expression -> exclusive_or_expression] with [<Node @ 0x7fe92b56b8e0>] and goto state 120
Result : <Node @ 0x7fe92b56b8e0> (<parser.Node object at 0x7fe92b56b8e0>)

State  : 120
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE inclusive_or_expression . LexToken(COLON,':',11,125)
Action : Reduce rule [logical_and_expression -> inclusive_or_expression] with [<Node @ 0x7fe92b56b8e0>] and goto state 112
Result : <Node @ 0x7fe92b56b8e0> (<parser.Node object at 0x7fe92b56b8e0>)

State  : 112
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE logical_and_expression . LexToken(COLON,':',11,125)
Action : Reduce rule [logical_or_expression -> logical_and_expression] with [<Node @ 0x7fe92b56b8e0>] and goto state 105
Result : <Node @ 0x7fe92b56b8e0> (<parser.Node object at 0x7fe92b56b8e0>)

State  : 105
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE logical_or_expression . LexToken(COLON,':',11,125)
Action : Reduce rule [conditional_expression -> logical_or_expression] with [<Node @ 0x7fe92b56b8e0>] and goto state 263
Result : <Node @ 0x7fe92b56b8e0> (<parser.Node object at 0x7fe92b56b8e0>)

State  : 263
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE conditional_expression . LexToken(COLON,':',11,125)
Action : Reduce rule [constant_expression -> conditional_expression] with [<Node @ 0x7fe92b56b8e0>] and goto state 262
Result : <Node @ 0x7fe92b56b8e0> (<parser.Node object at 0x7fe92b56b8e0>)

State  : 262
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression . LexToken(COLON,':',11,125)
Action : Shift and goto state 328

State  : 328
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON . LexToken(ID,'z',12,139)
Action : Shift and goto state 83

State  : 83
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON ID . LexToken(EQUALS,'=',12,141)
Action : Reduce rule [primary_expression -> ID] with ['z'] and goto state 113
Result : <Node @ 0x7fe92b56b880> (<parser.Node object at 0x7fe92b56b880>)

State  : 113
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON primary_expression . LexToken(EQUALS,'=',12,141)
Action : Reduce rule [postfix_expression -> primary_expression] with [<Node @ 0x7fe92b56b880>] and goto state 106
Result : <Node @ 0x7fe92b56b880> (<parser.Node object at 0x7fe92b56b880>)

State  : 106
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON postfix_expression . LexToken(EQUALS,'=',12,141)
Action : Reduce rule [unary_expression -> postfix_expression] with [<Node @ 0x7fe92b56b880>] and goto state 104
Result : <Node @ 0x7fe92b56b880> (<parser.Node object at 0x7fe92b56b880>)

State  : 104
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON unary_expression . LexToken(EQUALS,'=',12,141)
Action : Shift and goto state 190

State  : 190
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON unary_expression EQUALS . LexToken(INT_CONST,'1',12,143)
Action : Reduce rule [assignment_operator -> EQUALS] with ['='] and goto state 189
Result : <Node @ 0x7fe92b56bc10> (<parser.Node object at 0x7fe92b56bc10>)

State  : 189
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON unary_expression assignment_operator . LexToken(INT_CONST,'1',12,143)
Action : Shift and goto state 125

State  : 125
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON unary_expression assignment_operator INT_CONST . LexToken(PLUS,'+',12,144)
Action : Reduce rule [primary_expression -> INT_CONST] with ['1'] and goto state 113
Result : <Node @ 0x7fe92b56bac0> (<parser.Node object at 0x7fe92b56bac0>)

State  : 113
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON unary_expression assignment_operator primary_expression . LexToken(PLUS,'+',12,144)
Action : Reduce rule [postfix_expression -> primary_expression] with [<Node @ 0x7fe92b56bac0>] and goto state 106
Result : <Node @ 0x7fe92b56bac0> (<parser.Node object at 0x7fe92b56bac0>)

State  : 106
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON unary_expression assignment_operator postfix_expression . LexToken(PLUS,'+',12,144)
Action : Reduce rule [unary_expression -> postfix_expression] with [<Node @ 0x7fe92b56bac0>] and goto state 104
Result : <Node @ 0x7fe92b56bac0> (<parser.Node object at 0x7fe92b56bac0>)

State  : 104
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON unary_expression assignment_operator unary_expression . LexToken(PLUS,'+',12,144)
Action : Reduce rule [cast_expression -> unary_expression] with [<Node @ 0x7fe92b56bac0>] and goto state 110
Result : <Node @ 0x7fe92b56bac0> (<parser.Node object at 0x7fe92b56bac0>)

State  : 110
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON unary_expression assignment_operator cast_expression . LexToken(PLUS,'+',12,144)
Action : Reduce rule [multiplicative_expression -> cast_expression] with [<Node @ 0x7fe92b56bac0>] and goto state 134
Result : <Node @ 0x7fe92b56bac0> (<parser.Node object at 0x7fe92b56bac0>)

State  : 134
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON unary_expression assignment_operator multiplicative_expression . LexToken(PLUS,'+',12,144)
Action : Reduce rule [additive_expression -> multiplicative_expression] with [<Node @ 0x7fe92b56bac0>] and goto state 133
Result : <Node @ 0x7fe92b56bac0> (<parser.Node object at 0x7fe92b56bac0>)

State  : 133
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON unary_expression assignment_operator additive_expression . LexToken(PLUS,'+',12,144)
Action : Shift and goto state 229

State  : 229
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON unary_expression assignment_operator additive_expression PLUS . LexToken(INT_CONST,'5',12,145)
Action : Shift and goto state 125

State  : 125
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON unary_expression assignment_operator additive_expression PLUS INT_CONST . LexToken(SEMICOLON,';',12,146)
Action : Reduce rule [primary_expression -> INT_CONST] with ['5'] and goto state 113
Result : <Node @ 0x7fe92b56bc40> (<parser.Node object at 0x7fe92b56bc40>)

State  : 113
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON unary_expression assignment_operator additive_expression PLUS primary_expression . LexToken(SEMICOLON,';',12,146)
Action : Reduce rule [postfix_expression -> primary_expression] with [<Node @ 0x7fe92b56bc40>] and goto state 106
Result : <Node @ 0x7fe92b56bc40> (<parser.Node object at 0x7fe92b56bc40>)

State  : 106
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON unary_expression assignment_operator additive_expression PLUS postfix_expression . LexToken(SEMICOLON,';',12,146)
Action : Reduce rule [unary_expression -> postfix_expression] with [<Node @ 0x7fe92b56bc40>] and goto state 213
Result : <Node @ 0x7fe92b56bc40> (<parser.Node object at 0x7fe92b56bc40>)

State  : 213
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON unary_expression assignment_operator additive_expression PLUS unary_expression . LexToken(SEMICOLON,';',12,146)
Action : Reduce rule [cast_expression -> unary_expression] with [<Node @ 0x7fe92b56bc40>] and goto state 110
Result : <Node @ 0x7fe92b56bc40> (<parser.Node object at 0x7fe92b56bc40>)

State  : 110
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON unary_expression assignment_operator additive_expression PLUS cast_expression . LexToken(SEMICOLON,';',12,146)
Action : Reduce rule [multiplicative_expression -> cast_expression] with [<Node @ 0x7fe92b56bc40>] and goto state 303
Result : <Node @ 0x7fe92b56bc40> (<parser.Node object at 0x7fe92b56bc40>)

State  : 303
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON unary_expression assignment_operator additive_expression PLUS multiplicative_expression . LexToken(SEMICOLON,';',12,146)
Action : Reduce rule [additive_expression -> additive_expression PLUS multiplicative_expression] with [<Node @ 0x7fe92b56bac0>,'+',<Node @ 0x7fe92b56bc40>] and goto state 133
Result : <Node @ 0x7fe92b56bd90> (<parser.Node object at 0x7fe92b56bd90>)

State  : 133
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON unary_expression assignment_operator additive_expression . LexToken(SEMICOLON,';',12,146)
Action : Reduce rule [shift_expression -> additive_expression] with [<Node @ 0x7fe92b56bd90>] and goto state 132
Result : <Node @ 0x7fe92b56bd90> (<parser.Node object at 0x7fe92b56bd90>)

State  : 132
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON unary_expression assignment_operator shift_expression . LexToken(SEMICOLON,';',12,146)
Action : Reduce rule [relational_expression -> shift_expression] with [<Node @ 0x7fe92b56bd90>] and goto state 131
Result : <Node @ 0x7fe92b56bd90> (<parser.Node object at 0x7fe92b56bd90>)

State  : 131
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON unary_expression assignment_operator relational_expression . LexToken(SEMICOLON,';',12,146)
Action : Reduce rule [equality_expression -> relational_expression] with [<Node @ 0x7fe92b56bd90>] and goto state 130
Result : <Node @ 0x7fe92b56bd90> (<parser.Node object at 0x7fe92b56bd90>)

State  : 130
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON unary_expression assignment_operator equality_expression . LexToken(SEMICOLON,';',12,146)
Action : Reduce rule [and_expression -> equality_expression] with [<Node @ 0x7fe92b56bd90>] and goto state 129
Result : <Node @ 0x7fe92b56bd90> (<parser.Node object at 0x7fe92b56bd90>)

State  : 129
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON unary_expression assignment_operator and_expression . LexToken(SEMICOLON,';',12,146)
Action : Reduce rule [exclusive_or_expression -> and_expression] with [<Node @ 0x7fe92b56bd90>] and goto state 128
Result : <Node @ 0x7fe92b56bd90> (<parser.Node object at 0x7fe92b56bd90>)

State  : 128
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON unary_expression assignment_operator exclusive_or_expression . LexToken(SEMICOLON,';',12,146)
Action : Reduce rule [inclusive_or_expression -> exclusive_or_expression] with [<Node @ 0x7fe92b56bd90>] and goto state 120
Result : <Node @ 0x7fe92b56bd90> (<parser.Node object at 0x7fe92b56bd90>)

State  : 120
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON unary_expression assignment_operator inclusive_or_expression . LexToken(SEMICOLON,';',12,146)
Action : Reduce rule [logical_and_expression -> inclusive_or_expression] with [<Node @ 0x7fe92b56bd90>] and goto state 112
Result : <Node @ 0x7fe92b56bd90> (<parser.Node object at 0x7fe92b56bd90>)

State  : 112
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON unary_expression assignment_operator logical_and_expression . LexToken(SEMICOLON,';',12,146)
Action : Reduce rule [logical_or_expression -> logical_and_expression] with [<Node @ 0x7fe92b56bd90>] and goto state 105
Result : <Node @ 0x7fe92b56bd90> (<parser.Node object at 0x7fe92b56bd90>)

State  : 105
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON unary_expression assignment_operator logical_or_expression . LexToken(SEMICOLON,';',12,146)
Action : Reduce rule [conditional_expression -> logical_or_expression] with [<Node @ 0x7fe92b56bd90>] and goto state 103
Result : <Node @ 0x7fe92b56bd90> (<parser.Node object at 0x7fe92b56bd90>)

State  : 103
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON unary_expression assignment_operator conditional_expression . LexToken(SEMICOLON,';',12,146)
Action : Reduce rule [assignment_expression -> conditional_expression] with [<Node @ 0x7fe92b56bd90>] and goto state 281
Result : <Node @ 0x7fe92b56bd90> (<parser.Node object at 0x7fe92b56bd90>)

State  : 281
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON unary_expression assignment_operator assignment_expression . LexToken(SEMICOLON,';',12,146)
Action : Reduce rule [assignment_expression -> unary_expression assignment_operator assignment_expression] with [<Node @ 0x7fe92b56b880>,<Node @ 0x7fe92b56bc10>,<Node @ 0x7fe92b56bd90>] and goto state 98
Result : <Node @ 0x7fe92b56bbe0> (<parser.Node object at 0x7fe92b56bbe0>)

State  : 98
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON assignment_expression . LexToken(SEMICOLON,';',12,146)
Action : Reduce rule [expression -> assignment_expression] with [<Node @ 0x7fe92b56bbe0>] and goto state 86
Result : <Node @ 0x7fe92b56bbe0> (<parser.Node object at 0x7fe92b56bbe0>)

State  : 86
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON expression . LexToken(SEMICOLON,';',12,146)
Action : Shift and goto state 174

State  : 174
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON expression SEMICOLON . LexToken(BREAK,'break',13,160)
Action : Reduce rule [expression_statement -> expression SEMICOLON] with [<Node @ 0x7fe92b56bbe0>,';'] and goto state 78
Result : <Node @ 0x7fe92b56bd00> (<parser.Node object at 0x7fe92b56bd00>)

State  : 78
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON expression_statement . LexToken(BREAK,'break',13,160)
Action : Reduce rule [statement -> expression_statement] with [<Node @ 0x7fe92b56bd00>] and goto state 352
Result : <Node @ 0x7fe92b56ba60> (<parser.Node object at 0x7fe92b56ba60>)

State  : 352
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list SwMark1 CASE constant_expression COLON statement . LexToken(BREAK,'break',13,160)
Action : Reduce rule [labeled_statement -> SwMark1 CASE constant_expression COLON statement] with ['l3','case',<Node @ 0x7fe92b56b8e0>,':',<Node @ 0x7fe92b56ba60>] and goto state 76
Result : <Node @ 0x7fe92b56baf0> (<parser.Node object at 0x7fe92b56baf0>)

State  : 76
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list labeled_statement . LexToken(BREAK,'break',13,160)
Action : Reduce rule [statement -> labeled_statement] with [<Node @ 0x7fe92b56baf0>] and goto state 165
Result : <Node @ 0x7fe92b56bd60> (<parser.Node object at 0x7fe92b56bd60>)

State  : 165
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list statement . LexToken(BREAK,'break',13,160)
Action : Reduce rule [statement_list -> statement_list statement] with [<Node @ 0x7fe92b56b700>,<Node @ 0x7fe92b56bd60>] and goto state 172
Result : <Node @ 0x7fe92b56bb80> (<parser.Node object at 0x7fe92b56bb80>)

State  : 172
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list . LexToken(BREAK,'break',13,160)
Action : Shift and goto state 95

State  : 95
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list BREAK . LexToken(SEMICOLON,';',13,165)
Action : Shift and goto state 186

State  : 186
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list BREAK SEMICOLON . LexToken(RCURLYBRACKET,'}',14,171)
Action : Reduce rule [jump_statement -> BREAK SEMICOLON] with ['break',';'] and goto state 81
Result : <Node @ 0x7fe92b56b9d0> (<parser.Node object at 0x7fe92b56b9d0>)

State  : 81
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list jump_statement . LexToken(RCURLYBRACKET,'}',14,171)
Action : Reduce rule [statement -> jump_statement] with [<Node @ 0x7fe92b56b9d0>] and goto state 165
Result : <Node @ 0x7fe92b56b910> (<parser.Node object at 0x7fe92b56b910>)

State  : 165
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list statement . LexToken(RCURLYBRACKET,'}',14,171)
Action : Reduce rule [statement_list -> statement_list statement] with [<Node @ 0x7fe92b56bb80>,<Node @ 0x7fe92b56b910>] and goto state 172
Result : <Node @ 0x7fe92b56baf0> (<parser.Node object at 0x7fe92b56baf0>)

State  : 172
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list . LexToken(RCURLYBRACKET,'}',14,171)
Action : Shift and goto state 74

State  : 74
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list RCURLYBRACKET . LexToken(RCURLYBRACKET,'}',15,173)
Action : Reduce rule [closebrace -> RCURLYBRACKET] with ['}'] and goto state 265
Result : <str @ 0x7fe92bb2d230> ('}')

State  : 265
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 openbrace statement_list closebrace . LexToken(RCURLYBRACKET,'}',15,173)
Action : Reduce rule [compound_statement -> openbrace statement_list closebrace] with ['{',<Node @ 0x7fe92b56baf0>,'}'] and goto state 77
Result : <Node @ 0x7fe92b56baf0> (<parser.Node object at 0x7fe92b56baf0>)

State  : 77
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 compound_statement . LexToken(RCURLYBRACKET,'}',15,173)
Action : Reduce rule [statement -> compound_statement] with [<Node @ 0x7fe92b56baf0>] and goto state 364
Result : <Node @ 0x7fe92b56b6a0> (<parser.Node object at 0x7fe92b56b6a0>)

State  : 364
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 statement . LexToken(RCURLYBRACKET,'}',15,173)
Action : Reduce rule [SwMark3 -> <empty>] with [] and goto state 369
Result : <NoneType @ 0x90aa10> (None)

State  : 369
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list switch LPAREN expression RPAREN SwMark2 statement SwMark3 . LexToken(RCURLYBRACKET,'}',15,173)
Action : Reduce rule [selection_statement -> switch LPAREN expression RPAREN SwMark2 statement SwMark3] with ['switch','(',<Node @ 0x7fe92b56b850>,')',['l0', 'l1'],<Node @ 0x7fe92b56b6a0>,None] and goto state 79
Result : <Node @ 0x7fe92b56baf0> (<parser.Node object at 0x7fe92b56baf0>)

State  : 79
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list selection_statement . LexToken(RCURLYBRACKET,'}',15,173)
Action : Reduce rule [statement -> selection_statement] with [<Node @ 0x7fe92b56baf0>] and goto state 75
Result : <Node @ 0x7fe92b56b6d0> (<parser.Node object at 0x7fe92b56b6d0>)

State  : 75
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list statement . LexToken(RCURLYBRACKET,'}',15,173)
Action : Reduce rule [statement_list -> statement] with [<Node @ 0x7fe92b56b6d0>] and goto state 167
Result : <Node @ 0x7fe92b56b6d0> (<parser.Node object at 0x7fe92b56b6d0>)

State  : 167
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list statement_list . LexToken(RCURLYBRACKET,'}',15,173)
Action : Shift and goto state 74

State  : 74
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list statement_list RCURLYBRACKET . $end
Action : Reduce rule [closebrace -> RCURLYBRACKET] with ['}'] and goto state 260
Result : <str @ 0x7fe92bb2d230> ('}')

State  : 260
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list statement_list closebrace . $end
Action : Reduce rule [function_compound_statement -> LCURLYBRACKET declaration_list statement_list closebrace] with ['{',<Node @ 0x7fe92b56b640>,<Node @ 0x7fe92b56b6d0>,'}'] and goto state 65
Result : <Node @ 0x7fe92b56b4f0> (<parser.Node object at 0x7fe92b56b4f0>)

State  : 65
Stack  : declaration_specifiers declarator function_compound_statement . $end
Action : Reduce rule [function_definition -> declaration_specifiers declarator function_compound_statement] with [<Node @ 0x7fe92b56b370>,<Node @ 0x7fe92b56b250>,<Node @ 0x7fe92b56b4f0>] and goto state 3
Result : <Node @ 0x7fe92b56ba90> (<parser.Node object at 0x7fe92b56ba90>)

State  : 3
Stack  : function_definition . $end
Action : Reduce rule [external_declaration -> function_definition] with [<Node @ 0x7fe92b56ba90>] and goto state 2
Result : <Node @ 0x7fe92b56ba90> (<parser.Node object at 0x7fe92b56ba90>)

State  : 2
Stack  : external_declaration . $end
Action : Reduce rule [translation_unit -> external_declaration] with [<Node @ 0x7fe92b56ba90>] and goto state 1
Result : <Node @ 0x7fe92b56b5b0> (<parser.Node object at 0x7fe92b56b5b0>)

State  : 1
Stack  : translation_unit . $end
Done   : Returning <Node @ 0x7fe92b56b5b0> (<parser.Node object at 0x7fe92b56b5b0>)
PLY: PARSE DEBUG END
