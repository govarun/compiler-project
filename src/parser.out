Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BIN_CONST
    ENUM
    HASH
    HEX_CONST
    OCTAL_CONST
    STRUCT
    UNION

Grammar

Rule 0     S' -> translation_unit
Rule 1     primary_expression -> ID
Rule 2     primary_expression -> INT_CONST
Rule 3     primary_expression -> FLOAT_CONST
Rule 4     primary_expression -> CHAR_CONST
Rule 5     primary_expression -> STRING_LITERAL
Rule 6     primary_expression -> LPAREN expression RPAREN
Rule 7     argument_expression_list -> assignment_expression
Rule 8     argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 9     postfix_expression -> primary_expression
Rule 10    postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
Rule 11    postfix_expression -> postfix_expression LPAREN RPAREN
Rule 12    postfix_expression -> postfix_expression PERIOD ID
Rule 13    postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN
Rule 14    postfix_expression -> postfix_expression ARROW ID
Rule 15    postfix_expression -> postfix_expression INCREMENT
Rule 16    postfix_expression -> postfix_expression DECREMENT
Rule 17    unary_expression -> postfix_expression
Rule 18    unary_expression -> INCREMENT unary_expression
Rule 19    unary_expression -> DECREMENT unary_expression
Rule 20    unary_expression -> unary_operator cast_expression
Rule 21    unary_expression -> SIZEOF unary_expression
Rule 22    unary_expression -> SIZEOF LPAREN type_name RPAREN
Rule 23    unary_operator -> AND
Rule 24    unary_operator -> MULTIPLY
Rule 25    unary_operator -> PLUS
Rule 26    unary_operator -> MINUS
Rule 27    unary_operator -> NOT
Rule 28    unary_operator -> LNOT
Rule 29    cast_expression -> unary_expression
Rule 30    cast_expression -> LPAREN type_name RPAREN cast_expression
Rule 31    multiplicative_expression -> cast_expression
Rule 32    multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression
Rule 33    multiplicative_expression -> multiplicative_expression DIVIDE cast_expression
Rule 34    multiplicative_expression -> multiplicative_expression MOD cast_expression
Rule 35    additive_expression -> multiplicative_expression
Rule 36    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 37    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 38    shift_expression -> additive_expression
Rule 39    shift_expression -> shift_expression LSHIFT additive_expression
Rule 40    shift_expression -> shift_expression RSHIFT additive_expression
Rule 41    relational_expression -> shift_expression
Rule 42    relational_expression -> relational_expression LESS shift_expression
Rule 43    relational_expression -> relational_expression GREATER shift_expression
Rule 44    relational_expression -> relational_expression LESSEQUAL shift_expression
Rule 45    relational_expression -> relational_expression GREATEREQUAL shift_expression
Rule 46    equality_expression -> relational_expression
Rule 47    equality_expression -> equality_expression EQUAL relational_expression
Rule 48    equality_expression -> equality_expression NOTEQUAL relational_expression
Rule 49    and_expression -> equality_expression
Rule 50    and_expression -> and_expression AND equality_expression
Rule 51    exclusive_or_expression -> and_expression
Rule 52    exclusive_or_expression -> exclusive_or_expression XOR and_expression
Rule 53    inclusive_or_expression -> exclusive_or_expression
Rule 54    inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression
Rule 55    logical_and_expression -> inclusive_or_expression
Rule 56    logical_and_expression -> logical_and_expression LAND inclusive_or_expression
Rule 57    logical_or_expression -> logical_and_expression
Rule 58    logical_or_expression -> logical_or_expression LOR logical_and_expression
Rule 59    conditional_expression -> logical_or_expression
Rule 60    conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression
Rule 61    assignment_expression -> conditional_expression
Rule 62    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 63    assignment_operator -> EQUALS
Rule 64    assignment_operator -> MULTIPLYEQUAL
Rule 65    assignment_operator -> DIVIDEEQUAL
Rule 66    assignment_operator -> MODEQUAL
Rule 67    assignment_operator -> PLUSEQUAL
Rule 68    assignment_operator -> MINUSEQUAL
Rule 69    assignment_operator -> LSHIFTEQUAL
Rule 70    assignment_operator -> RSHIFTEQUAL
Rule 71    assignment_operator -> ANDEQUAL
Rule 72    assignment_operator -> XOREQUAL
Rule 73    assignment_operator -> OREQUAL
Rule 74    expression -> assignment_expression
Rule 75    expression -> expression COMMA assignment_expression
Rule 76    constant_expression -> conditional_expression
Rule 77    declaration -> declaration_specifiers SEMICOLON
Rule 78    declaration -> declaration_specifiers init_declarator_list SEMICOLON
Rule 79    declaration_specifiers -> storage_class_specifier
Rule 80    declaration_specifiers -> storage_class_specifier declaration_specifiers
Rule 81    declaration_specifiers -> type_specifier
Rule 82    declaration_specifiers -> type_specifier declaration_specifiers
Rule 83    declaration_specifiers -> type_qualifier
Rule 84    declaration_specifiers -> type_qualifier declaration_specifiers
Rule 85    init_declarator_list -> init_declarator
Rule 86    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 87    init_declarator -> declarator
Rule 88    init_declarator -> declarator EQUALS initializer
Rule 89    storage_class_specifier -> TYPEDEF
Rule 90    storage_class_specifier -> EXTERN
Rule 91    storage_class_specifier -> STATIC
Rule 92    storage_class_specifier -> AUTO
Rule 93    storage_class_specifier -> REGISTER
Rule 94    type_specifier -> VOID
Rule 95    type_specifier -> CHAR
Rule 96    type_specifier -> SHORT
Rule 97    type_specifier -> INT
Rule 98    type_specifier -> LONG
Rule 99    type_specifier -> FLOAT
Rule 100   type_specifier -> DOUBLE
Rule 101   type_specifier -> SIGNED
Rule 102   type_specifier -> UNSIGNED
Rule 103   type_specifier -> type_name
Rule 104   specifier_qualifier_list -> type_specifier specifier_qualifier_list
Rule 105   specifier_qualifier_list -> type_specifier
Rule 106   specifier_qualifier_list -> type_qualifier specifier_qualifier_list
Rule 107   specifier_qualifier_list -> type_qualifier
Rule 108   type_qualifier -> CONST
Rule 109   type_qualifier -> VOLATILE
Rule 110   declarator -> pointer direct_declarator
Rule 111   declarator -> direct_declarator
Rule 112   direct_declarator -> ID
Rule 113   direct_declarator -> LPAREN declarator RPAREN
Rule 114   direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET
Rule 115   direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET
Rule 116   direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN
Rule 117   direct_declarator -> direct_declarator LPAREN identifier_list RPAREN
Rule 118   direct_declarator -> direct_declarator LPAREN RPAREN
Rule 119   type_qualifier_list -> type_qualifier
Rule 120   type_qualifier_list -> type_qualifier_list type_qualifier
Rule 121   pointer -> MULTIPLY
Rule 122   pointer -> MULTIPLY type_qualifier_list
Rule 123   pointer -> MULTIPLY type_qualifier_list pointer
Rule 124   pointer -> MULTIPLY pointer
Rule 125   parameter_type_list -> parameter_list
Rule 126   parameter_type_list -> parameter_list COMMA ELLIPSIS
Rule 127   parameter_list -> parameter_declaration
Rule 128   parameter_list -> parameter_list COMMA parameter_declaration
Rule 129   parameter_declaration -> declaration_specifiers declarator
Rule 130   parameter_declaration -> declaration_specifiers abstract_declarator
Rule 131   parameter_declaration -> declaration_specifiers
Rule 132   identifier_list -> ID
Rule 133   identifier_list -> identifier_list COMMA ID
Rule 134   type_name -> specifier_qualifier_list
Rule 135   type_name -> specifier_qualifier_list abstract_declarator
Rule 136   abstract_declarator -> pointer
Rule 137   abstract_declarator -> direct_abstract_declarator
Rule 138   abstract_declarator -> pointer direct_abstract_declarator
Rule 139   direct_abstract_declarator -> LPAREN abstract_declarator RPAREN
Rule 140   direct_abstract_declarator -> LSQUAREBRACKET RSQUAREBRACKET
Rule 141   direct_abstract_declarator -> LSQUAREBRACKET constant_expression RSQUAREBRACKET
Rule 142   direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN
Rule 143   direct_abstract_declarator -> direct_abstract_declarator LPAREN constant_expression RPAREN
Rule 144   direct_abstract_declarator -> LPAREN RPAREN
Rule 145   direct_abstract_declarator -> LPAREN parameter_type_list RPAREN
Rule 146   direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN
Rule 147   initializer -> assignment_expression
Rule 148   initializer -> LCURLYBRACKET initializer_list RCURLYBRACKET
Rule 149   initializer -> LCURLYBRACKET initializer_list COMMA RCURLYBRACKET
Rule 150   initializer_list -> initializer
Rule 151   initializer_list -> initializer_list COMMA initializer
Rule 152   statement -> labeled_statement
Rule 153   statement -> compound_statement
Rule 154   statement -> expression_statement
Rule 155   statement -> selection_statement
Rule 156   statement -> iteration_statement
Rule 157   statement -> jump_statement
Rule 158   labeled_statement -> ID COLON statement
Rule 159   labeled_statement -> CASE constant_expression COLON statement
Rule 160   labeled_statement -> DEFAULT COLON statement
Rule 161   compound_statement -> LCURLYBRACKET RCURLYBRACKET
Rule 162   compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET
Rule 163   compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET
Rule 164   compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
Rule 165   expression_statement -> SEMICOLON
Rule 166   expression_statement -> expression SEMICOLON
Rule 167   declaration_list -> declaration
Rule 168   declaration_list -> declaration_list declaration
Rule 169   statement_list -> statement
Rule 170   statement_list -> statement_list statement
Rule 171   selection_statement -> IF LPAREN expression RPAREN statement
Rule 172   selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 173   selection_statement -> SWITCH LPAREN expression RPAREN statement
Rule 174   iteration_statement -> WHILE LPAREN expression RPAREN
Rule 175   iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON
Rule 176   iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement
Rule 177   iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement
Rule 178   jump_statement -> GOTO ID SEMICOLON
Rule 179   jump_statement -> CONTINUE SEMICOLON
Rule 180   jump_statement -> BREAK SEMICOLON
Rule 181   jump_statement -> RETURN SEMICOLON
Rule 182   jump_statement -> RETURN expression SEMICOLON
Rule 183   translation_unit -> external_declaration
Rule 184   translation_unit -> translation_unit external_declaration
Rule 185   external_declaration -> function_definition
Rule 186   external_declaration -> declaration
Rule 187   function_definition -> declaration_specifiers declarator declaration_list compound_statement
Rule 188   function_definition -> declaration_specifiers declarator compound_statement
Rule 189   function_definition -> declarator declaration_list compound_statement
Rule 190   function_definition -> declarator compound_statement

Terminals, with rules where they appear

AND                  : 23 50
ANDEQUAL             : 71
ARROW                : 14
AUTO                 : 92
BIN_CONST            : 
BREAK                : 180
CASE                 : 159
CHAR                 : 95
CHAR_CONST           : 4
COLON                : 60 158 159 160
COMMA                : 8 75 86 126 128 133 149 151
CONDOP               : 60
CONST                : 108
CONTINUE             : 179
DECREMENT            : 16 19
DEFAULT              : 160
DIVIDE               : 33
DIVIDEEQUAL          : 65
DO                   : 175
DOUBLE               : 100
ELLIPSIS             : 126
ELSE                 : 172
ENUM                 : 
EQUAL                : 47
EQUALS               : 63 88
EXTERN               : 90
FLOAT                : 99
FLOAT_CONST          : 3
FOR                  : 176 177
GOTO                 : 178
GREATER              : 43
GREATEREQUAL         : 45
HASH                 : 
HEX_CONST            : 
ID                   : 1 12 14 112 132 133 158 178
IF                   : 171 172
INCREMENT            : 15 18
INT                  : 97
INT_CONST            : 2
LAND                 : 56
LCURLYBRACKET        : 148 149 161 162 163 164
LESS                 : 42
LESSEQUAL            : 44
LNOT                 : 28
LONG                 : 98
LOR                  : 58
LPAREN               : 6 11 13 22 30 113 116 117 118 139 142 143 144 145 146 171 172 173 174 175 176 177
LSHIFT               : 39
LSHIFTEQUAL          : 69
LSQUAREBRACKET       : 10 114 115 140 141
MINUS                : 26 37
MINUSEQUAL           : 68
MOD                  : 34
MODEQUAL             : 66
MULTIPLY             : 24 32 121 122 123 124
MULTIPLYEQUAL        : 64
NOT                  : 27
NOTEQUAL             : 48
OCTAL_CONST          : 
OR                   : 54
OREQUAL              : 73
PERIOD               : 12
PLUS                 : 25 36
PLUSEQUAL            : 67
RCURLYBRACKET        : 148 149 161 162 163 164
REGISTER             : 93
RETURN               : 181 182
RPAREN               : 6 11 13 22 30 113 116 117 118 139 142 143 144 145 146 171 172 173 174 175 176 177
RSHIFT               : 40
RSHIFTEQUAL          : 70
RSQUAREBRACKET       : 10 114 115 140 141
SEMICOLON            : 77 78 165 166 175 178 179 180 181 182
SHORT                : 96
SIGNED               : 101
SIZEOF               : 21 22
STATIC               : 91
STRING_LITERAL       : 5
STRUCT               : 
SWITCH               : 173
TYPEDEF              : 89
UNION                : 
UNSIGNED             : 102
VOID                 : 94
VOLATILE             : 109
WHILE                : 174 175
XOR                  : 52
XOREQUAL             : 72
error                : 

Nonterminals, with rules where they appear

abstract_declarator  : 130 135 139
additive_expression  : 36 37 38 39 40
and_expression       : 50 51 52
argument_expression_list : 8 13
assignment_expression : 7 8 62 74 75 147
assignment_operator  : 62
cast_expression      : 20 30 31 32 33 34
compound_statement   : 153 187 188 189 190
conditional_expression : 60 61 76
constant_expression  : 114 141 143 159
declaration          : 167 168 186
declaration_list     : 163 164 168 187 189
declaration_specifiers : 77 78 80 82 84 129 130 131 187 188
declarator           : 87 88 113 129 187 188 189 190
direct_abstract_declarator : 137 138 142 143 146
direct_declarator    : 110 111 114 115 116 117 118
equality_expression  : 47 48 49 50
exclusive_or_expression : 52 53 54
expression           : 6 10 60 75 166 171 172 173 174 175 177 182
expression_statement : 154 176 176 177 177
external_declaration : 183 184
function_definition  : 185
identifier_list      : 117 133
inclusive_or_expression : 54 55 56
init_declarator      : 85 86
init_declarator_list : 78 86
initializer          : 88 150 151
initializer_list     : 148 149 151
iteration_statement  : 156
jump_statement       : 157
labeled_statement    : 152
logical_and_expression : 56 57 58
logical_or_expression : 58 59 60
multiplicative_expression : 32 33 34 35 36 37
parameter_declaration : 127 128
parameter_list       : 125 126 128
parameter_type_list  : 116 145 146
pointer              : 110 123 124 136 138
postfix_expression   : 10 11 12 13 14 15 16 17
primary_expression   : 9
relational_expression : 42 43 44 45 46 47 48
selection_statement  : 155
shift_expression     : 39 40 41 42 43 44 45
specifier_qualifier_list : 104 106 134 135
statement            : 158 159 160 169 170 171 172 172 173 175 176 177
statement_list       : 162 164 170
storage_class_specifier : 79 80
translation_unit     : 184 0
type_name            : 22 30 103
type_qualifier       : 83 84 106 107 119 120
type_qualifier_list  : 120 122 123
type_specifier       : 81 82 104 105
unary_expression     : 18 19 21 29 62
unary_operator       : 20

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (183) translation_unit -> . external_declaration
    (184) translation_unit -> . translation_unit external_declaration
    (185) external_declaration -> . function_definition
    (186) external_declaration -> . declaration
    (187) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (188) function_definition -> . declaration_specifiers declarator compound_statement
    (189) function_definition -> . declarator declaration_list compound_statement
    (190) function_definition -> . declarator compound_statement
    (77) declaration -> . declaration_specifiers SEMICOLON
    (78) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (79) declaration_specifiers -> . storage_class_specifier
    (80) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_qualifier
    (84) declaration_specifiers -> . type_qualifier declaration_specifiers
    (110) declarator -> . pointer direct_declarator
    (111) declarator -> . direct_declarator
    (89) storage_class_specifier -> . TYPEDEF
    (90) storage_class_specifier -> . EXTERN
    (91) storage_class_specifier -> . STATIC
    (92) storage_class_specifier -> . AUTO
    (93) storage_class_specifier -> . REGISTER
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . type_name
    (108) type_qualifier -> . CONST
    (109) type_qualifier -> . VOLATILE
    (121) pointer -> . MULTIPLY
    (122) pointer -> . MULTIPLY type_qualifier_list
    (123) pointer -> . MULTIPLY type_qualifier_list pointer
    (124) pointer -> . MULTIPLY pointer
    (112) direct_declarator -> . ID
    (113) direct_declarator -> . LPAREN declarator RPAREN
    (114) direct_declarator -> . direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (115) direct_declarator -> . direct_declarator LSQUAREBRACKET RSQUAREBRACKET
    (116) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (117) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (118) direct_declarator -> . direct_declarator LPAREN RPAREN
    (134) type_name -> . specifier_qualifier_list
    (135) type_name -> . specifier_qualifier_list abstract_declarator
    (104) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (105) specifier_qualifier_list -> . type_specifier
    (106) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (107) specifier_qualifier_list -> . type_qualifier

    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    CONST           shift and go to state 27
    VOLATILE        shift and go to state 28
    MULTIPLY        shift and go to state 29
    ID              shift and go to state 30
    LPAREN          shift and go to state 31

    translation_unit               shift and go to state 1
    external_declaration           shift and go to state 2
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    declaration_specifiers         shift and go to state 5
    declarator                     shift and go to state 6
    storage_class_specifier        shift and go to state 7
    type_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 9
    pointer                        shift and go to state 10
    direct_declarator              shift and go to state 11
    type_name                      shift and go to state 26
    specifier_qualifier_list       shift and go to state 32

state 1

    (0) S' -> translation_unit .
    (184) translation_unit -> translation_unit . external_declaration
    (185) external_declaration -> . function_definition
    (186) external_declaration -> . declaration
    (187) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (188) function_definition -> . declaration_specifiers declarator compound_statement
    (189) function_definition -> . declarator declaration_list compound_statement
    (190) function_definition -> . declarator compound_statement
    (77) declaration -> . declaration_specifiers SEMICOLON
    (78) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (79) declaration_specifiers -> . storage_class_specifier
    (80) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_qualifier
    (84) declaration_specifiers -> . type_qualifier declaration_specifiers
    (110) declarator -> . pointer direct_declarator
    (111) declarator -> . direct_declarator
    (89) storage_class_specifier -> . TYPEDEF
    (90) storage_class_specifier -> . EXTERN
    (91) storage_class_specifier -> . STATIC
    (92) storage_class_specifier -> . AUTO
    (93) storage_class_specifier -> . REGISTER
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . type_name
    (108) type_qualifier -> . CONST
    (109) type_qualifier -> . VOLATILE
    (121) pointer -> . MULTIPLY
    (122) pointer -> . MULTIPLY type_qualifier_list
    (123) pointer -> . MULTIPLY type_qualifier_list pointer
    (124) pointer -> . MULTIPLY pointer
    (112) direct_declarator -> . ID
    (113) direct_declarator -> . LPAREN declarator RPAREN
    (114) direct_declarator -> . direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (115) direct_declarator -> . direct_declarator LSQUAREBRACKET RSQUAREBRACKET
    (116) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (117) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (118) direct_declarator -> . direct_declarator LPAREN RPAREN
    (134) type_name -> . specifier_qualifier_list
    (135) type_name -> . specifier_qualifier_list abstract_declarator
    (104) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (105) specifier_qualifier_list -> . type_specifier
    (106) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (107) specifier_qualifier_list -> . type_qualifier

    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    CONST           shift and go to state 27
    VOLATILE        shift and go to state 28
    MULTIPLY        shift and go to state 29
    ID              shift and go to state 30
    LPAREN          shift and go to state 31

    external_declaration           shift and go to state 33
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    declaration_specifiers         shift and go to state 5
    declarator                     shift and go to state 6
    storage_class_specifier        shift and go to state 7
    type_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 9
    pointer                        shift and go to state 10
    direct_declarator              shift and go to state 11
    type_name                      shift and go to state 26
    specifier_qualifier_list       shift and go to state 32

state 2

    (183) translation_unit -> external_declaration .

    TYPEDEF         reduce using rule 183 (translation_unit -> external_declaration .)
    EXTERN          reduce using rule 183 (translation_unit -> external_declaration .)
    STATIC          reduce using rule 183 (translation_unit -> external_declaration .)
    AUTO            reduce using rule 183 (translation_unit -> external_declaration .)
    REGISTER        reduce using rule 183 (translation_unit -> external_declaration .)
    VOID            reduce using rule 183 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 183 (translation_unit -> external_declaration .)
    SHORT           reduce using rule 183 (translation_unit -> external_declaration .)
    INT             reduce using rule 183 (translation_unit -> external_declaration .)
    LONG            reduce using rule 183 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 183 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 183 (translation_unit -> external_declaration .)
    SIGNED          reduce using rule 183 (translation_unit -> external_declaration .)
    UNSIGNED        reduce using rule 183 (translation_unit -> external_declaration .)
    CONST           reduce using rule 183 (translation_unit -> external_declaration .)
    VOLATILE        reduce using rule 183 (translation_unit -> external_declaration .)
    MULTIPLY        reduce using rule 183 (translation_unit -> external_declaration .)
    ID              reduce using rule 183 (translation_unit -> external_declaration .)
    LPAREN          reduce using rule 183 (translation_unit -> external_declaration .)
    $end            reduce using rule 183 (translation_unit -> external_declaration .)


state 3

    (185) external_declaration -> function_definition .

    TYPEDEF         reduce using rule 185 (external_declaration -> function_definition .)
    EXTERN          reduce using rule 185 (external_declaration -> function_definition .)
    STATIC          reduce using rule 185 (external_declaration -> function_definition .)
    AUTO            reduce using rule 185 (external_declaration -> function_definition .)
    REGISTER        reduce using rule 185 (external_declaration -> function_definition .)
    VOID            reduce using rule 185 (external_declaration -> function_definition .)
    CHAR            reduce using rule 185 (external_declaration -> function_definition .)
    SHORT           reduce using rule 185 (external_declaration -> function_definition .)
    INT             reduce using rule 185 (external_declaration -> function_definition .)
    LONG            reduce using rule 185 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 185 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 185 (external_declaration -> function_definition .)
    SIGNED          reduce using rule 185 (external_declaration -> function_definition .)
    UNSIGNED        reduce using rule 185 (external_declaration -> function_definition .)
    CONST           reduce using rule 185 (external_declaration -> function_definition .)
    VOLATILE        reduce using rule 185 (external_declaration -> function_definition .)
    MULTIPLY        reduce using rule 185 (external_declaration -> function_definition .)
    ID              reduce using rule 185 (external_declaration -> function_definition .)
    LPAREN          reduce using rule 185 (external_declaration -> function_definition .)
    $end            reduce using rule 185 (external_declaration -> function_definition .)


state 4

    (186) external_declaration -> declaration .

    TYPEDEF         reduce using rule 186 (external_declaration -> declaration .)
    EXTERN          reduce using rule 186 (external_declaration -> declaration .)
    STATIC          reduce using rule 186 (external_declaration -> declaration .)
    AUTO            reduce using rule 186 (external_declaration -> declaration .)
    REGISTER        reduce using rule 186 (external_declaration -> declaration .)
    VOID            reduce using rule 186 (external_declaration -> declaration .)
    CHAR            reduce using rule 186 (external_declaration -> declaration .)
    SHORT           reduce using rule 186 (external_declaration -> declaration .)
    INT             reduce using rule 186 (external_declaration -> declaration .)
    LONG            reduce using rule 186 (external_declaration -> declaration .)
    FLOAT           reduce using rule 186 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 186 (external_declaration -> declaration .)
    SIGNED          reduce using rule 186 (external_declaration -> declaration .)
    UNSIGNED        reduce using rule 186 (external_declaration -> declaration .)
    CONST           reduce using rule 186 (external_declaration -> declaration .)
    VOLATILE        reduce using rule 186 (external_declaration -> declaration .)
    MULTIPLY        reduce using rule 186 (external_declaration -> declaration .)
    ID              reduce using rule 186 (external_declaration -> declaration .)
    LPAREN          reduce using rule 186 (external_declaration -> declaration .)
    $end            reduce using rule 186 (external_declaration -> declaration .)


state 5

    (187) function_definition -> declaration_specifiers . declarator declaration_list compound_statement
    (188) function_definition -> declaration_specifiers . declarator compound_statement
    (77) declaration -> declaration_specifiers . SEMICOLON
    (78) declaration -> declaration_specifiers . init_declarator_list SEMICOLON
    (110) declarator -> . pointer direct_declarator
    (111) declarator -> . direct_declarator
    (85) init_declarator_list -> . init_declarator
    (86) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (121) pointer -> . MULTIPLY
    (122) pointer -> . MULTIPLY type_qualifier_list
    (123) pointer -> . MULTIPLY type_qualifier_list pointer
    (124) pointer -> . MULTIPLY pointer
    (112) direct_declarator -> . ID
    (113) direct_declarator -> . LPAREN declarator RPAREN
    (114) direct_declarator -> . direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (115) direct_declarator -> . direct_declarator LSQUAREBRACKET RSQUAREBRACKET
    (116) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (117) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (118) direct_declarator -> . direct_declarator LPAREN RPAREN
    (87) init_declarator -> . declarator
    (88) init_declarator -> . declarator EQUALS initializer

    SEMICOLON       shift and go to state 35
    MULTIPLY        shift and go to state 29
    ID              shift and go to state 30
    LPAREN          shift and go to state 31

    declarator                     shift and go to state 34
    init_declarator_list           shift and go to state 36
    pointer                        shift and go to state 10
    direct_declarator              shift and go to state 11
    init_declarator                shift and go to state 37

state 6

    (189) function_definition -> declarator . declaration_list compound_statement
    (190) function_definition -> declarator . compound_statement
    (167) declaration_list -> . declaration
    (168) declaration_list -> . declaration_list declaration
    (161) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (162) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (163) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (164) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (77) declaration -> . declaration_specifiers SEMICOLON
    (78) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (79) declaration_specifiers -> . storage_class_specifier
    (80) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_qualifier
    (84) declaration_specifiers -> . type_qualifier declaration_specifiers
    (89) storage_class_specifier -> . TYPEDEF
    (90) storage_class_specifier -> . EXTERN
    (91) storage_class_specifier -> . STATIC
    (92) storage_class_specifier -> . AUTO
    (93) storage_class_specifier -> . REGISTER
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . type_name
    (108) type_qualifier -> . CONST
    (109) type_qualifier -> . VOLATILE
    (134) type_name -> . specifier_qualifier_list
    (135) type_name -> . specifier_qualifier_list abstract_declarator
    (104) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (105) specifier_qualifier_list -> . type_specifier
    (106) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (107) specifier_qualifier_list -> . type_qualifier

    LCURLYBRACKET   shift and go to state 41
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    CONST           shift and go to state 27
    VOLATILE        shift and go to state 28

    declaration_list               shift and go to state 38
    compound_statement             shift and go to state 39
    declaration                    shift and go to state 40
    declaration_specifiers         shift and go to state 42
    storage_class_specifier        shift and go to state 7
    type_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 9
    type_name                      shift and go to state 26
    specifier_qualifier_list       shift and go to state 32

state 7

    (79) declaration_specifiers -> storage_class_specifier .
    (80) declaration_specifiers -> storage_class_specifier . declaration_specifiers
    (79) declaration_specifiers -> . storage_class_specifier
    (80) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_qualifier
    (84) declaration_specifiers -> . type_qualifier declaration_specifiers
    (89) storage_class_specifier -> . TYPEDEF
    (90) storage_class_specifier -> . EXTERN
    (91) storage_class_specifier -> . STATIC
    (92) storage_class_specifier -> . AUTO
    (93) storage_class_specifier -> . REGISTER
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . type_name
    (108) type_qualifier -> . CONST
    (109) type_qualifier -> . VOLATILE
    (134) type_name -> . specifier_qualifier_list
    (135) type_name -> . specifier_qualifier_list abstract_declarator
    (104) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (105) specifier_qualifier_list -> . type_specifier
    (106) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (107) specifier_qualifier_list -> . type_qualifier

    SEMICOLON       reduce using rule 79 (declaration_specifiers -> storage_class_specifier .)
    MULTIPLY        reduce using rule 79 (declaration_specifiers -> storage_class_specifier .)
    ID              reduce using rule 79 (declaration_specifiers -> storage_class_specifier .)
    LPAREN          reduce using rule 79 (declaration_specifiers -> storage_class_specifier .)
    LSQUAREBRACKET  reduce using rule 79 (declaration_specifiers -> storage_class_specifier .)
    COMMA           reduce using rule 79 (declaration_specifiers -> storage_class_specifier .)
    RPAREN          reduce using rule 79 (declaration_specifiers -> storage_class_specifier .)
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    CONST           shift and go to state 27
    VOLATILE        shift and go to state 28

    storage_class_specifier        shift and go to state 7
    declaration_specifiers         shift and go to state 43
    type_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 9
    type_name                      shift and go to state 26
    specifier_qualifier_list       shift and go to state 32

state 8

    (81) declaration_specifiers -> type_specifier .
    (82) declaration_specifiers -> type_specifier . declaration_specifiers
    (104) specifier_qualifier_list -> type_specifier . specifier_qualifier_list
    (105) specifier_qualifier_list -> type_specifier .
    (79) declaration_specifiers -> . storage_class_specifier
    (80) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_qualifier
    (84) declaration_specifiers -> . type_qualifier declaration_specifiers
    (104) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (105) specifier_qualifier_list -> . type_specifier
    (106) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (107) specifier_qualifier_list -> . type_qualifier
    (89) storage_class_specifier -> . TYPEDEF
    (90) storage_class_specifier -> . EXTERN
    (91) storage_class_specifier -> . STATIC
    (92) storage_class_specifier -> . AUTO
    (93) storage_class_specifier -> . REGISTER
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . type_name
    (108) type_qualifier -> . CONST
    (109) type_qualifier -> . VOLATILE
    (134) type_name -> . specifier_qualifier_list
    (135) type_name -> . specifier_qualifier_list abstract_declarator

  ! reduce/reduce conflict for SEMICOLON resolved using rule 81 (declaration_specifiers -> type_specifier .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 81 (declaration_specifiers -> type_specifier .)
  ! reduce/reduce conflict for ID resolved using rule 81 (declaration_specifiers -> type_specifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 81 (declaration_specifiers -> type_specifier .)
  ! reduce/reduce conflict for LSQUAREBRACKET resolved using rule 81 (declaration_specifiers -> type_specifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 81 (declaration_specifiers -> type_specifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 81 (declaration_specifiers -> type_specifier .)
  ! shift/reduce conflict for TYPEDEF resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for REGISTER resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for SIGNED resolved as shift
  ! shift/reduce conflict for UNSIGNED resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for VOLATILE resolved as shift
    SEMICOLON       reduce using rule 81 (declaration_specifiers -> type_specifier .)
    MULTIPLY        reduce using rule 81 (declaration_specifiers -> type_specifier .)
    ID              reduce using rule 81 (declaration_specifiers -> type_specifier .)
    LPAREN          reduce using rule 81 (declaration_specifiers -> type_specifier .)
    LSQUAREBRACKET  reduce using rule 81 (declaration_specifiers -> type_specifier .)
    COMMA           reduce using rule 81 (declaration_specifiers -> type_specifier .)
    RPAREN          reduce using rule 81 (declaration_specifiers -> type_specifier .)
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    CONST           shift and go to state 27
    VOLATILE        shift and go to state 28

  ! TYPEDEF         [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]
  ! EXTERN          [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]
  ! STATIC          [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]
  ! AUTO            [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]
  ! REGISTER        [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]
  ! VOID            [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]
  ! CHAR            [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]
  ! SHORT           [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]
  ! INT             [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]
  ! LONG            [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]
  ! FLOAT           [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]
  ! DOUBLE          [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]
  ! SIGNED          [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]
  ! UNSIGNED        [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]
  ! CONST           [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]
  ! VOLATILE        [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]
  ! SEMICOLON       [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]
  ! MULTIPLY        [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]
  ! ID              [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]
  ! LPAREN          [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]
  ! LSQUAREBRACKET  [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]
  ! COMMA           [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]
  ! RPAREN          [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]

    type_specifier                 shift and go to state 8
    declaration_specifiers         shift and go to state 44
    specifier_qualifier_list       shift and go to state 45
    storage_class_specifier        shift and go to state 7
    type_qualifier                 shift and go to state 9
    type_name                      shift and go to state 26

state 9

    (83) declaration_specifiers -> type_qualifier .
    (84) declaration_specifiers -> type_qualifier . declaration_specifiers
    (106) specifier_qualifier_list -> type_qualifier . specifier_qualifier_list
    (107) specifier_qualifier_list -> type_qualifier .
    (79) declaration_specifiers -> . storage_class_specifier
    (80) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_qualifier
    (84) declaration_specifiers -> . type_qualifier declaration_specifiers
    (104) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (105) specifier_qualifier_list -> . type_specifier
    (106) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (107) specifier_qualifier_list -> . type_qualifier
    (89) storage_class_specifier -> . TYPEDEF
    (90) storage_class_specifier -> . EXTERN
    (91) storage_class_specifier -> . STATIC
    (92) storage_class_specifier -> . AUTO
    (93) storage_class_specifier -> . REGISTER
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . type_name
    (108) type_qualifier -> . CONST
    (109) type_qualifier -> . VOLATILE
    (134) type_name -> . specifier_qualifier_list
    (135) type_name -> . specifier_qualifier_list abstract_declarator

  ! reduce/reduce conflict for SEMICOLON resolved using rule 83 (declaration_specifiers -> type_qualifier .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 83 (declaration_specifiers -> type_qualifier .)
  ! reduce/reduce conflict for ID resolved using rule 83 (declaration_specifiers -> type_qualifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 83 (declaration_specifiers -> type_qualifier .)
  ! reduce/reduce conflict for LSQUAREBRACKET resolved using rule 83 (declaration_specifiers -> type_qualifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 83 (declaration_specifiers -> type_qualifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 83 (declaration_specifiers -> type_qualifier .)
  ! shift/reduce conflict for TYPEDEF resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for REGISTER resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for SIGNED resolved as shift
  ! shift/reduce conflict for UNSIGNED resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for VOLATILE resolved as shift
    SEMICOLON       reduce using rule 83 (declaration_specifiers -> type_qualifier .)
    MULTIPLY        reduce using rule 83 (declaration_specifiers -> type_qualifier .)
    ID              reduce using rule 83 (declaration_specifiers -> type_qualifier .)
    LPAREN          reduce using rule 83 (declaration_specifiers -> type_qualifier .)
    LSQUAREBRACKET  reduce using rule 83 (declaration_specifiers -> type_qualifier .)
    COMMA           reduce using rule 83 (declaration_specifiers -> type_qualifier .)
    RPAREN          reduce using rule 83 (declaration_specifiers -> type_qualifier .)
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    CONST           shift and go to state 27
    VOLATILE        shift and go to state 28

  ! TYPEDEF         [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]
  ! EXTERN          [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]
  ! STATIC          [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]
  ! AUTO            [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]
  ! REGISTER        [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]
  ! VOID            [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]
  ! CHAR            [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]
  ! SHORT           [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]
  ! INT             [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]
  ! LONG            [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]
  ! FLOAT           [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]
  ! DOUBLE          [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]
  ! SIGNED          [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]
  ! UNSIGNED        [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]
  ! CONST           [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]
  ! VOLATILE        [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]
  ! SEMICOLON       [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]
  ! MULTIPLY        [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]
  ! ID              [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]
  ! LPAREN          [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]
  ! LSQUAREBRACKET  [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]
  ! COMMA           [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]
  ! RPAREN          [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]

    type_qualifier                 shift and go to state 9
    declaration_specifiers         shift and go to state 46
    specifier_qualifier_list       shift and go to state 47
    storage_class_specifier        shift and go to state 7
    type_specifier                 shift and go to state 8
    type_name                      shift and go to state 26

state 10

    (110) declarator -> pointer . direct_declarator
    (112) direct_declarator -> . ID
    (113) direct_declarator -> . LPAREN declarator RPAREN
    (114) direct_declarator -> . direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (115) direct_declarator -> . direct_declarator LSQUAREBRACKET RSQUAREBRACKET
    (116) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (117) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (118) direct_declarator -> . direct_declarator LPAREN RPAREN

    ID              shift and go to state 30
    LPAREN          shift and go to state 31

    direct_declarator              shift and go to state 48

state 11

    (111) declarator -> direct_declarator .
    (114) direct_declarator -> direct_declarator . LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (115) direct_declarator -> direct_declarator . LSQUAREBRACKET RSQUAREBRACKET
    (116) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (117) direct_declarator -> direct_declarator . LPAREN identifier_list RPAREN
    (118) direct_declarator -> direct_declarator . LPAREN RPAREN

    LCURLYBRACKET   reduce using rule 111 (declarator -> direct_declarator .)
    TYPEDEF         reduce using rule 111 (declarator -> direct_declarator .)
    EXTERN          reduce using rule 111 (declarator -> direct_declarator .)
    STATIC          reduce using rule 111 (declarator -> direct_declarator .)
    AUTO            reduce using rule 111 (declarator -> direct_declarator .)
    REGISTER        reduce using rule 111 (declarator -> direct_declarator .)
    VOID            reduce using rule 111 (declarator -> direct_declarator .)
    CHAR            reduce using rule 111 (declarator -> direct_declarator .)
    SHORT           reduce using rule 111 (declarator -> direct_declarator .)
    INT             reduce using rule 111 (declarator -> direct_declarator .)
    LONG            reduce using rule 111 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 111 (declarator -> direct_declarator .)
    DOUBLE          reduce using rule 111 (declarator -> direct_declarator .)
    SIGNED          reduce using rule 111 (declarator -> direct_declarator .)
    UNSIGNED        reduce using rule 111 (declarator -> direct_declarator .)
    CONST           reduce using rule 111 (declarator -> direct_declarator .)
    VOLATILE        reduce using rule 111 (declarator -> direct_declarator .)
    EQUALS          reduce using rule 111 (declarator -> direct_declarator .)
    SEMICOLON       reduce using rule 111 (declarator -> direct_declarator .)
    COMMA           reduce using rule 111 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 111 (declarator -> direct_declarator .)
    LSQUAREBRACKET  shift and go to state 49
    LPAREN          shift and go to state 50


state 12

    (89) storage_class_specifier -> TYPEDEF .

    TYPEDEF         reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    EXTERN          reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    STATIC          reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    AUTO            reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    REGISTER        reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    VOID            reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    CHAR            reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    SHORT           reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    INT             reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    LONG            reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    CONST           reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    SEMICOLON       reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    MULTIPLY        reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    ID              reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    LPAREN          reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    LSQUAREBRACKET  reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    COMMA           reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    RPAREN          reduce using rule 89 (storage_class_specifier -> TYPEDEF .)


state 13

    (90) storage_class_specifier -> EXTERN .

    TYPEDEF         reduce using rule 90 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 90 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 90 (storage_class_specifier -> EXTERN .)
    AUTO            reduce using rule 90 (storage_class_specifier -> EXTERN .)
    REGISTER        reduce using rule 90 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 90 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 90 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 90 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 90 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 90 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 90 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 90 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 90 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 90 (storage_class_specifier -> EXTERN .)
    CONST           reduce using rule 90 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 90 (storage_class_specifier -> EXTERN .)
    SEMICOLON       reduce using rule 90 (storage_class_specifier -> EXTERN .)
    MULTIPLY        reduce using rule 90 (storage_class_specifier -> EXTERN .)
    ID              reduce using rule 90 (storage_class_specifier -> EXTERN .)
    LPAREN          reduce using rule 90 (storage_class_specifier -> EXTERN .)
    LSQUAREBRACKET  reduce using rule 90 (storage_class_specifier -> EXTERN .)
    COMMA           reduce using rule 90 (storage_class_specifier -> EXTERN .)
    RPAREN          reduce using rule 90 (storage_class_specifier -> EXTERN .)


state 14

    (91) storage_class_specifier -> STATIC .

    TYPEDEF         reduce using rule 91 (storage_class_specifier -> STATIC .)
    EXTERN          reduce using rule 91 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 91 (storage_class_specifier -> STATIC .)
    AUTO            reduce using rule 91 (storage_class_specifier -> STATIC .)
    REGISTER        reduce using rule 91 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 91 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 91 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 91 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 91 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 91 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 91 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 91 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 91 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 91 (storage_class_specifier -> STATIC .)
    CONST           reduce using rule 91 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 91 (storage_class_specifier -> STATIC .)
    SEMICOLON       reduce using rule 91 (storage_class_specifier -> STATIC .)
    MULTIPLY        reduce using rule 91 (storage_class_specifier -> STATIC .)
    ID              reduce using rule 91 (storage_class_specifier -> STATIC .)
    LPAREN          reduce using rule 91 (storage_class_specifier -> STATIC .)
    LSQUAREBRACKET  reduce using rule 91 (storage_class_specifier -> STATIC .)
    COMMA           reduce using rule 91 (storage_class_specifier -> STATIC .)
    RPAREN          reduce using rule 91 (storage_class_specifier -> STATIC .)


state 15

    (92) storage_class_specifier -> AUTO .

    TYPEDEF         reduce using rule 92 (storage_class_specifier -> AUTO .)
    EXTERN          reduce using rule 92 (storage_class_specifier -> AUTO .)
    STATIC          reduce using rule 92 (storage_class_specifier -> AUTO .)
    AUTO            reduce using rule 92 (storage_class_specifier -> AUTO .)
    REGISTER        reduce using rule 92 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 92 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 92 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 92 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 92 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 92 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 92 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 92 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 92 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 92 (storage_class_specifier -> AUTO .)
    CONST           reduce using rule 92 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 92 (storage_class_specifier -> AUTO .)
    SEMICOLON       reduce using rule 92 (storage_class_specifier -> AUTO .)
    MULTIPLY        reduce using rule 92 (storage_class_specifier -> AUTO .)
    ID              reduce using rule 92 (storage_class_specifier -> AUTO .)
    LPAREN          reduce using rule 92 (storage_class_specifier -> AUTO .)
    LSQUAREBRACKET  reduce using rule 92 (storage_class_specifier -> AUTO .)
    COMMA           reduce using rule 92 (storage_class_specifier -> AUTO .)
    RPAREN          reduce using rule 92 (storage_class_specifier -> AUTO .)


state 16

    (93) storage_class_specifier -> REGISTER .

    TYPEDEF         reduce using rule 93 (storage_class_specifier -> REGISTER .)
    EXTERN          reduce using rule 93 (storage_class_specifier -> REGISTER .)
    STATIC          reduce using rule 93 (storage_class_specifier -> REGISTER .)
    AUTO            reduce using rule 93 (storage_class_specifier -> REGISTER .)
    REGISTER        reduce using rule 93 (storage_class_specifier -> REGISTER .)
    VOID            reduce using rule 93 (storage_class_specifier -> REGISTER .)
    CHAR            reduce using rule 93 (storage_class_specifier -> REGISTER .)
    SHORT           reduce using rule 93 (storage_class_specifier -> REGISTER .)
    INT             reduce using rule 93 (storage_class_specifier -> REGISTER .)
    LONG            reduce using rule 93 (storage_class_specifier -> REGISTER .)
    FLOAT           reduce using rule 93 (storage_class_specifier -> REGISTER .)
    DOUBLE          reduce using rule 93 (storage_class_specifier -> REGISTER .)
    SIGNED          reduce using rule 93 (storage_class_specifier -> REGISTER .)
    UNSIGNED        reduce using rule 93 (storage_class_specifier -> REGISTER .)
    CONST           reduce using rule 93 (storage_class_specifier -> REGISTER .)
    VOLATILE        reduce using rule 93 (storage_class_specifier -> REGISTER .)
    SEMICOLON       reduce using rule 93 (storage_class_specifier -> REGISTER .)
    MULTIPLY        reduce using rule 93 (storage_class_specifier -> REGISTER .)
    ID              reduce using rule 93 (storage_class_specifier -> REGISTER .)
    LPAREN          reduce using rule 93 (storage_class_specifier -> REGISTER .)
    LSQUAREBRACKET  reduce using rule 93 (storage_class_specifier -> REGISTER .)
    COMMA           reduce using rule 93 (storage_class_specifier -> REGISTER .)
    RPAREN          reduce using rule 93 (storage_class_specifier -> REGISTER .)


state 17

    (94) type_specifier -> VOID .

    TYPEDEF         reduce using rule 94 (type_specifier -> VOID .)
    EXTERN          reduce using rule 94 (type_specifier -> VOID .)
    STATIC          reduce using rule 94 (type_specifier -> VOID .)
    AUTO            reduce using rule 94 (type_specifier -> VOID .)
    REGISTER        reduce using rule 94 (type_specifier -> VOID .)
    VOID            reduce using rule 94 (type_specifier -> VOID .)
    CHAR            reduce using rule 94 (type_specifier -> VOID .)
    SHORT           reduce using rule 94 (type_specifier -> VOID .)
    INT             reduce using rule 94 (type_specifier -> VOID .)
    LONG            reduce using rule 94 (type_specifier -> VOID .)
    FLOAT           reduce using rule 94 (type_specifier -> VOID .)
    DOUBLE          reduce using rule 94 (type_specifier -> VOID .)
    SIGNED          reduce using rule 94 (type_specifier -> VOID .)
    UNSIGNED        reduce using rule 94 (type_specifier -> VOID .)
    CONST           reduce using rule 94 (type_specifier -> VOID .)
    VOLATILE        reduce using rule 94 (type_specifier -> VOID .)
    SEMICOLON       reduce using rule 94 (type_specifier -> VOID .)
    MULTIPLY        reduce using rule 94 (type_specifier -> VOID .)
    ID              reduce using rule 94 (type_specifier -> VOID .)
    LPAREN          reduce using rule 94 (type_specifier -> VOID .)
    LSQUAREBRACKET  reduce using rule 94 (type_specifier -> VOID .)
    COMMA           reduce using rule 94 (type_specifier -> VOID .)
    RPAREN          reduce using rule 94 (type_specifier -> VOID .)


state 18

    (95) type_specifier -> CHAR .

    TYPEDEF         reduce using rule 95 (type_specifier -> CHAR .)
    EXTERN          reduce using rule 95 (type_specifier -> CHAR .)
    STATIC          reduce using rule 95 (type_specifier -> CHAR .)
    AUTO            reduce using rule 95 (type_specifier -> CHAR .)
    REGISTER        reduce using rule 95 (type_specifier -> CHAR .)
    VOID            reduce using rule 95 (type_specifier -> CHAR .)
    CHAR            reduce using rule 95 (type_specifier -> CHAR .)
    SHORT           reduce using rule 95 (type_specifier -> CHAR .)
    INT             reduce using rule 95 (type_specifier -> CHAR .)
    LONG            reduce using rule 95 (type_specifier -> CHAR .)
    FLOAT           reduce using rule 95 (type_specifier -> CHAR .)
    DOUBLE          reduce using rule 95 (type_specifier -> CHAR .)
    SIGNED          reduce using rule 95 (type_specifier -> CHAR .)
    UNSIGNED        reduce using rule 95 (type_specifier -> CHAR .)
    CONST           reduce using rule 95 (type_specifier -> CHAR .)
    VOLATILE        reduce using rule 95 (type_specifier -> CHAR .)
    SEMICOLON       reduce using rule 95 (type_specifier -> CHAR .)
    MULTIPLY        reduce using rule 95 (type_specifier -> CHAR .)
    ID              reduce using rule 95 (type_specifier -> CHAR .)
    LPAREN          reduce using rule 95 (type_specifier -> CHAR .)
    LSQUAREBRACKET  reduce using rule 95 (type_specifier -> CHAR .)
    COMMA           reduce using rule 95 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 95 (type_specifier -> CHAR .)


state 19

    (96) type_specifier -> SHORT .

    TYPEDEF         reduce using rule 96 (type_specifier -> SHORT .)
    EXTERN          reduce using rule 96 (type_specifier -> SHORT .)
    STATIC          reduce using rule 96 (type_specifier -> SHORT .)
    AUTO            reduce using rule 96 (type_specifier -> SHORT .)
    REGISTER        reduce using rule 96 (type_specifier -> SHORT .)
    VOID            reduce using rule 96 (type_specifier -> SHORT .)
    CHAR            reduce using rule 96 (type_specifier -> SHORT .)
    SHORT           reduce using rule 96 (type_specifier -> SHORT .)
    INT             reduce using rule 96 (type_specifier -> SHORT .)
    LONG            reduce using rule 96 (type_specifier -> SHORT .)
    FLOAT           reduce using rule 96 (type_specifier -> SHORT .)
    DOUBLE          reduce using rule 96 (type_specifier -> SHORT .)
    SIGNED          reduce using rule 96 (type_specifier -> SHORT .)
    UNSIGNED        reduce using rule 96 (type_specifier -> SHORT .)
    CONST           reduce using rule 96 (type_specifier -> SHORT .)
    VOLATILE        reduce using rule 96 (type_specifier -> SHORT .)
    SEMICOLON       reduce using rule 96 (type_specifier -> SHORT .)
    MULTIPLY        reduce using rule 96 (type_specifier -> SHORT .)
    ID              reduce using rule 96 (type_specifier -> SHORT .)
    LPAREN          reduce using rule 96 (type_specifier -> SHORT .)
    LSQUAREBRACKET  reduce using rule 96 (type_specifier -> SHORT .)
    COMMA           reduce using rule 96 (type_specifier -> SHORT .)
    RPAREN          reduce using rule 96 (type_specifier -> SHORT .)


state 20

    (97) type_specifier -> INT .

    TYPEDEF         reduce using rule 97 (type_specifier -> INT .)
    EXTERN          reduce using rule 97 (type_specifier -> INT .)
    STATIC          reduce using rule 97 (type_specifier -> INT .)
    AUTO            reduce using rule 97 (type_specifier -> INT .)
    REGISTER        reduce using rule 97 (type_specifier -> INT .)
    VOID            reduce using rule 97 (type_specifier -> INT .)
    CHAR            reduce using rule 97 (type_specifier -> INT .)
    SHORT           reduce using rule 97 (type_specifier -> INT .)
    INT             reduce using rule 97 (type_specifier -> INT .)
    LONG            reduce using rule 97 (type_specifier -> INT .)
    FLOAT           reduce using rule 97 (type_specifier -> INT .)
    DOUBLE          reduce using rule 97 (type_specifier -> INT .)
    SIGNED          reduce using rule 97 (type_specifier -> INT .)
    UNSIGNED        reduce using rule 97 (type_specifier -> INT .)
    CONST           reduce using rule 97 (type_specifier -> INT .)
    VOLATILE        reduce using rule 97 (type_specifier -> INT .)
    SEMICOLON       reduce using rule 97 (type_specifier -> INT .)
    MULTIPLY        reduce using rule 97 (type_specifier -> INT .)
    ID              reduce using rule 97 (type_specifier -> INT .)
    LPAREN          reduce using rule 97 (type_specifier -> INT .)
    LSQUAREBRACKET  reduce using rule 97 (type_specifier -> INT .)
    COMMA           reduce using rule 97 (type_specifier -> INT .)
    RPAREN          reduce using rule 97 (type_specifier -> INT .)


state 21

    (98) type_specifier -> LONG .

    TYPEDEF         reduce using rule 98 (type_specifier -> LONG .)
    EXTERN          reduce using rule 98 (type_specifier -> LONG .)
    STATIC          reduce using rule 98 (type_specifier -> LONG .)
    AUTO            reduce using rule 98 (type_specifier -> LONG .)
    REGISTER        reduce using rule 98 (type_specifier -> LONG .)
    VOID            reduce using rule 98 (type_specifier -> LONG .)
    CHAR            reduce using rule 98 (type_specifier -> LONG .)
    SHORT           reduce using rule 98 (type_specifier -> LONG .)
    INT             reduce using rule 98 (type_specifier -> LONG .)
    LONG            reduce using rule 98 (type_specifier -> LONG .)
    FLOAT           reduce using rule 98 (type_specifier -> LONG .)
    DOUBLE          reduce using rule 98 (type_specifier -> LONG .)
    SIGNED          reduce using rule 98 (type_specifier -> LONG .)
    UNSIGNED        reduce using rule 98 (type_specifier -> LONG .)
    CONST           reduce using rule 98 (type_specifier -> LONG .)
    VOLATILE        reduce using rule 98 (type_specifier -> LONG .)
    SEMICOLON       reduce using rule 98 (type_specifier -> LONG .)
    MULTIPLY        reduce using rule 98 (type_specifier -> LONG .)
    ID              reduce using rule 98 (type_specifier -> LONG .)
    LPAREN          reduce using rule 98 (type_specifier -> LONG .)
    LSQUAREBRACKET  reduce using rule 98 (type_specifier -> LONG .)
    COMMA           reduce using rule 98 (type_specifier -> LONG .)
    RPAREN          reduce using rule 98 (type_specifier -> LONG .)


state 22

    (99) type_specifier -> FLOAT .

    TYPEDEF         reduce using rule 99 (type_specifier -> FLOAT .)
    EXTERN          reduce using rule 99 (type_specifier -> FLOAT .)
    STATIC          reduce using rule 99 (type_specifier -> FLOAT .)
    AUTO            reduce using rule 99 (type_specifier -> FLOAT .)
    REGISTER        reduce using rule 99 (type_specifier -> FLOAT .)
    VOID            reduce using rule 99 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 99 (type_specifier -> FLOAT .)
    SHORT           reduce using rule 99 (type_specifier -> FLOAT .)
    INT             reduce using rule 99 (type_specifier -> FLOAT .)
    LONG            reduce using rule 99 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 99 (type_specifier -> FLOAT .)
    DOUBLE          reduce using rule 99 (type_specifier -> FLOAT .)
    SIGNED          reduce using rule 99 (type_specifier -> FLOAT .)
    UNSIGNED        reduce using rule 99 (type_specifier -> FLOAT .)
    CONST           reduce using rule 99 (type_specifier -> FLOAT .)
    VOLATILE        reduce using rule 99 (type_specifier -> FLOAT .)
    SEMICOLON       reduce using rule 99 (type_specifier -> FLOAT .)
    MULTIPLY        reduce using rule 99 (type_specifier -> FLOAT .)
    ID              reduce using rule 99 (type_specifier -> FLOAT .)
    LPAREN          reduce using rule 99 (type_specifier -> FLOAT .)
    LSQUAREBRACKET  reduce using rule 99 (type_specifier -> FLOAT .)
    COMMA           reduce using rule 99 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 99 (type_specifier -> FLOAT .)


state 23

    (100) type_specifier -> DOUBLE .

    TYPEDEF         reduce using rule 100 (type_specifier -> DOUBLE .)
    EXTERN          reduce using rule 100 (type_specifier -> DOUBLE .)
    STATIC          reduce using rule 100 (type_specifier -> DOUBLE .)
    AUTO            reduce using rule 100 (type_specifier -> DOUBLE .)
    REGISTER        reduce using rule 100 (type_specifier -> DOUBLE .)
    VOID            reduce using rule 100 (type_specifier -> DOUBLE .)
    CHAR            reduce using rule 100 (type_specifier -> DOUBLE .)
    SHORT           reduce using rule 100 (type_specifier -> DOUBLE .)
    INT             reduce using rule 100 (type_specifier -> DOUBLE .)
    LONG            reduce using rule 100 (type_specifier -> DOUBLE .)
    FLOAT           reduce using rule 100 (type_specifier -> DOUBLE .)
    DOUBLE          reduce using rule 100 (type_specifier -> DOUBLE .)
    SIGNED          reduce using rule 100 (type_specifier -> DOUBLE .)
    UNSIGNED        reduce using rule 100 (type_specifier -> DOUBLE .)
    CONST           reduce using rule 100 (type_specifier -> DOUBLE .)
    VOLATILE        reduce using rule 100 (type_specifier -> DOUBLE .)
    SEMICOLON       reduce using rule 100 (type_specifier -> DOUBLE .)
    MULTIPLY        reduce using rule 100 (type_specifier -> DOUBLE .)
    ID              reduce using rule 100 (type_specifier -> DOUBLE .)
    LPAREN          reduce using rule 100 (type_specifier -> DOUBLE .)
    LSQUAREBRACKET  reduce using rule 100 (type_specifier -> DOUBLE .)
    COMMA           reduce using rule 100 (type_specifier -> DOUBLE .)
    RPAREN          reduce using rule 100 (type_specifier -> DOUBLE .)


state 24

    (101) type_specifier -> SIGNED .

    TYPEDEF         reduce using rule 101 (type_specifier -> SIGNED .)
    EXTERN          reduce using rule 101 (type_specifier -> SIGNED .)
    STATIC          reduce using rule 101 (type_specifier -> SIGNED .)
    AUTO            reduce using rule 101 (type_specifier -> SIGNED .)
    REGISTER        reduce using rule 101 (type_specifier -> SIGNED .)
    VOID            reduce using rule 101 (type_specifier -> SIGNED .)
    CHAR            reduce using rule 101 (type_specifier -> SIGNED .)
    SHORT           reduce using rule 101 (type_specifier -> SIGNED .)
    INT             reduce using rule 101 (type_specifier -> SIGNED .)
    LONG            reduce using rule 101 (type_specifier -> SIGNED .)
    FLOAT           reduce using rule 101 (type_specifier -> SIGNED .)
    DOUBLE          reduce using rule 101 (type_specifier -> SIGNED .)
    SIGNED          reduce using rule 101 (type_specifier -> SIGNED .)
    UNSIGNED        reduce using rule 101 (type_specifier -> SIGNED .)
    CONST           reduce using rule 101 (type_specifier -> SIGNED .)
    VOLATILE        reduce using rule 101 (type_specifier -> SIGNED .)
    SEMICOLON       reduce using rule 101 (type_specifier -> SIGNED .)
    MULTIPLY        reduce using rule 101 (type_specifier -> SIGNED .)
    ID              reduce using rule 101 (type_specifier -> SIGNED .)
    LPAREN          reduce using rule 101 (type_specifier -> SIGNED .)
    LSQUAREBRACKET  reduce using rule 101 (type_specifier -> SIGNED .)
    COMMA           reduce using rule 101 (type_specifier -> SIGNED .)
    RPAREN          reduce using rule 101 (type_specifier -> SIGNED .)


state 25

    (102) type_specifier -> UNSIGNED .

    TYPEDEF         reduce using rule 102 (type_specifier -> UNSIGNED .)
    EXTERN          reduce using rule 102 (type_specifier -> UNSIGNED .)
    STATIC          reduce using rule 102 (type_specifier -> UNSIGNED .)
    AUTO            reduce using rule 102 (type_specifier -> UNSIGNED .)
    REGISTER        reduce using rule 102 (type_specifier -> UNSIGNED .)
    VOID            reduce using rule 102 (type_specifier -> UNSIGNED .)
    CHAR            reduce using rule 102 (type_specifier -> UNSIGNED .)
    SHORT           reduce using rule 102 (type_specifier -> UNSIGNED .)
    INT             reduce using rule 102 (type_specifier -> UNSIGNED .)
    LONG            reduce using rule 102 (type_specifier -> UNSIGNED .)
    FLOAT           reduce using rule 102 (type_specifier -> UNSIGNED .)
    DOUBLE          reduce using rule 102 (type_specifier -> UNSIGNED .)
    SIGNED          reduce using rule 102 (type_specifier -> UNSIGNED .)
    UNSIGNED        reduce using rule 102 (type_specifier -> UNSIGNED .)
    CONST           reduce using rule 102 (type_specifier -> UNSIGNED .)
    VOLATILE        reduce using rule 102 (type_specifier -> UNSIGNED .)
    SEMICOLON       reduce using rule 102 (type_specifier -> UNSIGNED .)
    MULTIPLY        reduce using rule 102 (type_specifier -> UNSIGNED .)
    ID              reduce using rule 102 (type_specifier -> UNSIGNED .)
    LPAREN          reduce using rule 102 (type_specifier -> UNSIGNED .)
    LSQUAREBRACKET  reduce using rule 102 (type_specifier -> UNSIGNED .)
    COMMA           reduce using rule 102 (type_specifier -> UNSIGNED .)
    RPAREN          reduce using rule 102 (type_specifier -> UNSIGNED .)


state 26

    (103) type_specifier -> type_name .

    TYPEDEF         reduce using rule 103 (type_specifier -> type_name .)
    EXTERN          reduce using rule 103 (type_specifier -> type_name .)
    STATIC          reduce using rule 103 (type_specifier -> type_name .)
    AUTO            reduce using rule 103 (type_specifier -> type_name .)
    REGISTER        reduce using rule 103 (type_specifier -> type_name .)
    VOID            reduce using rule 103 (type_specifier -> type_name .)
    CHAR            reduce using rule 103 (type_specifier -> type_name .)
    SHORT           reduce using rule 103 (type_specifier -> type_name .)
    INT             reduce using rule 103 (type_specifier -> type_name .)
    LONG            reduce using rule 103 (type_specifier -> type_name .)
    FLOAT           reduce using rule 103 (type_specifier -> type_name .)
    DOUBLE          reduce using rule 103 (type_specifier -> type_name .)
    SIGNED          reduce using rule 103 (type_specifier -> type_name .)
    UNSIGNED        reduce using rule 103 (type_specifier -> type_name .)
    CONST           reduce using rule 103 (type_specifier -> type_name .)
    VOLATILE        reduce using rule 103 (type_specifier -> type_name .)
    SEMICOLON       reduce using rule 103 (type_specifier -> type_name .)
    MULTIPLY        reduce using rule 103 (type_specifier -> type_name .)
    ID              reduce using rule 103 (type_specifier -> type_name .)
    LPAREN          reduce using rule 103 (type_specifier -> type_name .)
    LSQUAREBRACKET  reduce using rule 103 (type_specifier -> type_name .)
    COMMA           reduce using rule 103 (type_specifier -> type_name .)
    RPAREN          reduce using rule 103 (type_specifier -> type_name .)


state 27

    (108) type_qualifier -> CONST .

    TYPEDEF         reduce using rule 108 (type_qualifier -> CONST .)
    EXTERN          reduce using rule 108 (type_qualifier -> CONST .)
    STATIC          reduce using rule 108 (type_qualifier -> CONST .)
    AUTO            reduce using rule 108 (type_qualifier -> CONST .)
    REGISTER        reduce using rule 108 (type_qualifier -> CONST .)
    VOID            reduce using rule 108 (type_qualifier -> CONST .)
    CHAR            reduce using rule 108 (type_qualifier -> CONST .)
    SHORT           reduce using rule 108 (type_qualifier -> CONST .)
    INT             reduce using rule 108 (type_qualifier -> CONST .)
    LONG            reduce using rule 108 (type_qualifier -> CONST .)
    FLOAT           reduce using rule 108 (type_qualifier -> CONST .)
    DOUBLE          reduce using rule 108 (type_qualifier -> CONST .)
    SIGNED          reduce using rule 108 (type_qualifier -> CONST .)
    UNSIGNED        reduce using rule 108 (type_qualifier -> CONST .)
    CONST           reduce using rule 108 (type_qualifier -> CONST .)
    VOLATILE        reduce using rule 108 (type_qualifier -> CONST .)
    SEMICOLON       reduce using rule 108 (type_qualifier -> CONST .)
    MULTIPLY        reduce using rule 108 (type_qualifier -> CONST .)
    ID              reduce using rule 108 (type_qualifier -> CONST .)
    LPAREN          reduce using rule 108 (type_qualifier -> CONST .)
    LSQUAREBRACKET  reduce using rule 108 (type_qualifier -> CONST .)
    COMMA           reduce using rule 108 (type_qualifier -> CONST .)
    RPAREN          reduce using rule 108 (type_qualifier -> CONST .)


state 28

    (109) type_qualifier -> VOLATILE .

    TYPEDEF         reduce using rule 109 (type_qualifier -> VOLATILE .)
    EXTERN          reduce using rule 109 (type_qualifier -> VOLATILE .)
    STATIC          reduce using rule 109 (type_qualifier -> VOLATILE .)
    AUTO            reduce using rule 109 (type_qualifier -> VOLATILE .)
    REGISTER        reduce using rule 109 (type_qualifier -> VOLATILE .)
    VOID            reduce using rule 109 (type_qualifier -> VOLATILE .)
    CHAR            reduce using rule 109 (type_qualifier -> VOLATILE .)
    SHORT           reduce using rule 109 (type_qualifier -> VOLATILE .)
    INT             reduce using rule 109 (type_qualifier -> VOLATILE .)
    LONG            reduce using rule 109 (type_qualifier -> VOLATILE .)
    FLOAT           reduce using rule 109 (type_qualifier -> VOLATILE .)
    DOUBLE          reduce using rule 109 (type_qualifier -> VOLATILE .)
    SIGNED          reduce using rule 109 (type_qualifier -> VOLATILE .)
    UNSIGNED        reduce using rule 109 (type_qualifier -> VOLATILE .)
    CONST           reduce using rule 109 (type_qualifier -> VOLATILE .)
    VOLATILE        reduce using rule 109 (type_qualifier -> VOLATILE .)
    SEMICOLON       reduce using rule 109 (type_qualifier -> VOLATILE .)
    MULTIPLY        reduce using rule 109 (type_qualifier -> VOLATILE .)
    ID              reduce using rule 109 (type_qualifier -> VOLATILE .)
    LPAREN          reduce using rule 109 (type_qualifier -> VOLATILE .)
    LSQUAREBRACKET  reduce using rule 109 (type_qualifier -> VOLATILE .)
    COMMA           reduce using rule 109 (type_qualifier -> VOLATILE .)
    RPAREN          reduce using rule 109 (type_qualifier -> VOLATILE .)


state 29

    (121) pointer -> MULTIPLY .
    (122) pointer -> MULTIPLY . type_qualifier_list
    (123) pointer -> MULTIPLY . type_qualifier_list pointer
    (124) pointer -> MULTIPLY . pointer
    (119) type_qualifier_list -> . type_qualifier
    (120) type_qualifier_list -> . type_qualifier_list type_qualifier
    (121) pointer -> . MULTIPLY
    (122) pointer -> . MULTIPLY type_qualifier_list
    (123) pointer -> . MULTIPLY type_qualifier_list pointer
    (124) pointer -> . MULTIPLY pointer
    (108) type_qualifier -> . CONST
    (109) type_qualifier -> . VOLATILE

    ID              reduce using rule 121 (pointer -> MULTIPLY .)
    LPAREN          reduce using rule 121 (pointer -> MULTIPLY .)
    LSQUAREBRACKET  reduce using rule 121 (pointer -> MULTIPLY .)
    TYPEDEF         reduce using rule 121 (pointer -> MULTIPLY .)
    EXTERN          reduce using rule 121 (pointer -> MULTIPLY .)
    STATIC          reduce using rule 121 (pointer -> MULTIPLY .)
    AUTO            reduce using rule 121 (pointer -> MULTIPLY .)
    REGISTER        reduce using rule 121 (pointer -> MULTIPLY .)
    VOID            reduce using rule 121 (pointer -> MULTIPLY .)
    CHAR            reduce using rule 121 (pointer -> MULTIPLY .)
    SHORT           reduce using rule 121 (pointer -> MULTIPLY .)
    INT             reduce using rule 121 (pointer -> MULTIPLY .)
    LONG            reduce using rule 121 (pointer -> MULTIPLY .)
    FLOAT           reduce using rule 121 (pointer -> MULTIPLY .)
    DOUBLE          reduce using rule 121 (pointer -> MULTIPLY .)
    SIGNED          reduce using rule 121 (pointer -> MULTIPLY .)
    UNSIGNED        reduce using rule 121 (pointer -> MULTIPLY .)
    CONST           reduce using rule 121 (pointer -> MULTIPLY .)
    VOLATILE        reduce using rule 121 (pointer -> MULTIPLY .)
    SEMICOLON       reduce using rule 121 (pointer -> MULTIPLY .)
    MULTIPLY        reduce using rule 121 (pointer -> MULTIPLY .)
    COMMA           reduce using rule 121 (pointer -> MULTIPLY .)
    RPAREN          reduce using rule 121 (pointer -> MULTIPLY .)

  ! MULTIPLY        [ shift and go to state 29 ]
  ! CONST           [ shift and go to state 27 ]
  ! VOLATILE        [ shift and go to state 28 ]

    type_qualifier_list            shift and go to state 51
    pointer                        shift and go to state 52
    type_qualifier                 shift and go to state 53

state 30

    (112) direct_declarator -> ID .

    LSQUAREBRACKET  reduce using rule 112 (direct_declarator -> ID .)
    LPAREN          reduce using rule 112 (direct_declarator -> ID .)
    LCURLYBRACKET   reduce using rule 112 (direct_declarator -> ID .)
    TYPEDEF         reduce using rule 112 (direct_declarator -> ID .)
    EXTERN          reduce using rule 112 (direct_declarator -> ID .)
    STATIC          reduce using rule 112 (direct_declarator -> ID .)
    AUTO            reduce using rule 112 (direct_declarator -> ID .)
    REGISTER        reduce using rule 112 (direct_declarator -> ID .)
    VOID            reduce using rule 112 (direct_declarator -> ID .)
    CHAR            reduce using rule 112 (direct_declarator -> ID .)
    SHORT           reduce using rule 112 (direct_declarator -> ID .)
    INT             reduce using rule 112 (direct_declarator -> ID .)
    LONG            reduce using rule 112 (direct_declarator -> ID .)
    FLOAT           reduce using rule 112 (direct_declarator -> ID .)
    DOUBLE          reduce using rule 112 (direct_declarator -> ID .)
    SIGNED          reduce using rule 112 (direct_declarator -> ID .)
    UNSIGNED        reduce using rule 112 (direct_declarator -> ID .)
    CONST           reduce using rule 112 (direct_declarator -> ID .)
    VOLATILE        reduce using rule 112 (direct_declarator -> ID .)
    EQUALS          reduce using rule 112 (direct_declarator -> ID .)
    SEMICOLON       reduce using rule 112 (direct_declarator -> ID .)
    COMMA           reduce using rule 112 (direct_declarator -> ID .)
    RPAREN          reduce using rule 112 (direct_declarator -> ID .)


state 31

    (113) direct_declarator -> LPAREN . declarator RPAREN
    (110) declarator -> . pointer direct_declarator
    (111) declarator -> . direct_declarator
    (121) pointer -> . MULTIPLY
    (122) pointer -> . MULTIPLY type_qualifier_list
    (123) pointer -> . MULTIPLY type_qualifier_list pointer
    (124) pointer -> . MULTIPLY pointer
    (112) direct_declarator -> . ID
    (113) direct_declarator -> . LPAREN declarator RPAREN
    (114) direct_declarator -> . direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (115) direct_declarator -> . direct_declarator LSQUAREBRACKET RSQUAREBRACKET
    (116) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (117) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (118) direct_declarator -> . direct_declarator LPAREN RPAREN

    MULTIPLY        shift and go to state 29
    ID              shift and go to state 30
    LPAREN          shift and go to state 31

    declarator                     shift and go to state 54
    pointer                        shift and go to state 10
    direct_declarator              shift and go to state 11

state 32

    (134) type_name -> specifier_qualifier_list .
    (135) type_name -> specifier_qualifier_list . abstract_declarator
    (136) abstract_declarator -> . pointer
    (137) abstract_declarator -> . direct_abstract_declarator
    (138) abstract_declarator -> . pointer direct_abstract_declarator
    (121) pointer -> . MULTIPLY
    (122) pointer -> . MULTIPLY type_qualifier_list
    (123) pointer -> . MULTIPLY type_qualifier_list pointer
    (124) pointer -> . MULTIPLY pointer
    (139) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (140) direct_abstract_declarator -> . LSQUAREBRACKET RSQUAREBRACKET
    (141) direct_abstract_declarator -> . LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (142) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (143) direct_abstract_declarator -> . direct_abstract_declarator LPAREN constant_expression RPAREN
    (144) direct_abstract_declarator -> . LPAREN RPAREN
    (145) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (146) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQUAREBRACKET resolved as shift
    TYPEDEF         reduce using rule 134 (type_name -> specifier_qualifier_list .)
    EXTERN          reduce using rule 134 (type_name -> specifier_qualifier_list .)
    STATIC          reduce using rule 134 (type_name -> specifier_qualifier_list .)
    AUTO            reduce using rule 134 (type_name -> specifier_qualifier_list .)
    REGISTER        reduce using rule 134 (type_name -> specifier_qualifier_list .)
    VOID            reduce using rule 134 (type_name -> specifier_qualifier_list .)
    CHAR            reduce using rule 134 (type_name -> specifier_qualifier_list .)
    SHORT           reduce using rule 134 (type_name -> specifier_qualifier_list .)
    INT             reduce using rule 134 (type_name -> specifier_qualifier_list .)
    LONG            reduce using rule 134 (type_name -> specifier_qualifier_list .)
    FLOAT           reduce using rule 134 (type_name -> specifier_qualifier_list .)
    DOUBLE          reduce using rule 134 (type_name -> specifier_qualifier_list .)
    SIGNED          reduce using rule 134 (type_name -> specifier_qualifier_list .)
    UNSIGNED        reduce using rule 134 (type_name -> specifier_qualifier_list .)
    CONST           reduce using rule 134 (type_name -> specifier_qualifier_list .)
    VOLATILE        reduce using rule 134 (type_name -> specifier_qualifier_list .)
    SEMICOLON       reduce using rule 134 (type_name -> specifier_qualifier_list .)
    ID              reduce using rule 134 (type_name -> specifier_qualifier_list .)
    COMMA           reduce using rule 134 (type_name -> specifier_qualifier_list .)
    RPAREN          reduce using rule 134 (type_name -> specifier_qualifier_list .)
    MULTIPLY        shift and go to state 29
    LPAREN          shift and go to state 58
    LSQUAREBRACKET  shift and go to state 59

  ! MULTIPLY        [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! LPAREN          [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! LSQUAREBRACKET  [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]

    abstract_declarator            shift and go to state 55
    pointer                        shift and go to state 56
    direct_abstract_declarator     shift and go to state 57

state 33

    (184) translation_unit -> translation_unit external_declaration .

    TYPEDEF         reduce using rule 184 (translation_unit -> translation_unit external_declaration .)
    EXTERN          reduce using rule 184 (translation_unit -> translation_unit external_declaration .)
    STATIC          reduce using rule 184 (translation_unit -> translation_unit external_declaration .)
    AUTO            reduce using rule 184 (translation_unit -> translation_unit external_declaration .)
    REGISTER        reduce using rule 184 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 184 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 184 (translation_unit -> translation_unit external_declaration .)
    SHORT           reduce using rule 184 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 184 (translation_unit -> translation_unit external_declaration .)
    LONG            reduce using rule 184 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 184 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 184 (translation_unit -> translation_unit external_declaration .)
    SIGNED          reduce using rule 184 (translation_unit -> translation_unit external_declaration .)
    UNSIGNED        reduce using rule 184 (translation_unit -> translation_unit external_declaration .)
    CONST           reduce using rule 184 (translation_unit -> translation_unit external_declaration .)
    VOLATILE        reduce using rule 184 (translation_unit -> translation_unit external_declaration .)
    MULTIPLY        reduce using rule 184 (translation_unit -> translation_unit external_declaration .)
    ID              reduce using rule 184 (translation_unit -> translation_unit external_declaration .)
    LPAREN          reduce using rule 184 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 184 (translation_unit -> translation_unit external_declaration .)


state 34

    (187) function_definition -> declaration_specifiers declarator . declaration_list compound_statement
    (188) function_definition -> declaration_specifiers declarator . compound_statement
    (87) init_declarator -> declarator .
    (88) init_declarator -> declarator . EQUALS initializer
    (167) declaration_list -> . declaration
    (168) declaration_list -> . declaration_list declaration
    (161) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (162) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (163) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (164) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (77) declaration -> . declaration_specifiers SEMICOLON
    (78) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (79) declaration_specifiers -> . storage_class_specifier
    (80) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_qualifier
    (84) declaration_specifiers -> . type_qualifier declaration_specifiers
    (89) storage_class_specifier -> . TYPEDEF
    (90) storage_class_specifier -> . EXTERN
    (91) storage_class_specifier -> . STATIC
    (92) storage_class_specifier -> . AUTO
    (93) storage_class_specifier -> . REGISTER
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . type_name
    (108) type_qualifier -> . CONST
    (109) type_qualifier -> . VOLATILE
    (134) type_name -> . specifier_qualifier_list
    (135) type_name -> . specifier_qualifier_list abstract_declarator
    (104) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (105) specifier_qualifier_list -> . type_specifier
    (106) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (107) specifier_qualifier_list -> . type_qualifier

    SEMICOLON       reduce using rule 87 (init_declarator -> declarator .)
    COMMA           reduce using rule 87 (init_declarator -> declarator .)
    EQUALS          shift and go to state 62
    LCURLYBRACKET   shift and go to state 41
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    CONST           shift and go to state 27
    VOLATILE        shift and go to state 28

    declaration_specifiers         shift and go to state 42
    declaration_list               shift and go to state 60
    compound_statement             shift and go to state 61
    declaration                    shift and go to state 40
    storage_class_specifier        shift and go to state 7
    type_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 9
    type_name                      shift and go to state 26
    specifier_qualifier_list       shift and go to state 32

state 35

    (77) declaration -> declaration_specifiers SEMICOLON .

    TYPEDEF         reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    EXTERN          reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    STATIC          reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    AUTO            reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    REGISTER        reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    VOID            reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    CHAR            reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    SHORT           reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    INT             reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    LONG            reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    FLOAT           reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    DOUBLE          reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    SIGNED          reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    UNSIGNED        reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    CONST           reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    VOLATILE        reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    MULTIPLY        reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    ID              reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    LPAREN          reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    $end            reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    LCURLYBRACKET   reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    RCURLYBRACKET   reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    CASE            reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    DEFAULT         reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    SEMICOLON       reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    IF              reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    SWITCH          reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    WHILE           reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    DO              reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    FOR             reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    GOTO            reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    CONTINUE        reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    BREAK           reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    RETURN          reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    INCREMENT       reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    DECREMENT       reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    SIZEOF          reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    AND             reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    PLUS            reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    MINUS           reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    NOT             reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    LNOT            reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    INT_CONST       reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    FLOAT_CONST     reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    CHAR_CONST      reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)
    STRING_LITERAL  reduce using rule 77 (declaration -> declaration_specifiers SEMICOLON .)


state 36

    (78) declaration -> declaration_specifiers init_declarator_list . SEMICOLON
    (86) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMICOLON       shift and go to state 63
    COMMA           shift and go to state 64


state 37

    (85) init_declarator_list -> init_declarator .

    SEMICOLON       reduce using rule 85 (init_declarator_list -> init_declarator .)
    COMMA           reduce using rule 85 (init_declarator_list -> init_declarator .)


state 38

    (189) function_definition -> declarator declaration_list . compound_statement
    (168) declaration_list -> declaration_list . declaration
    (161) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (162) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (163) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (164) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (77) declaration -> . declaration_specifiers SEMICOLON
    (78) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (79) declaration_specifiers -> . storage_class_specifier
    (80) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_qualifier
    (84) declaration_specifiers -> . type_qualifier declaration_specifiers
    (89) storage_class_specifier -> . TYPEDEF
    (90) storage_class_specifier -> . EXTERN
    (91) storage_class_specifier -> . STATIC
    (92) storage_class_specifier -> . AUTO
    (93) storage_class_specifier -> . REGISTER
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . type_name
    (108) type_qualifier -> . CONST
    (109) type_qualifier -> . VOLATILE
    (134) type_name -> . specifier_qualifier_list
    (135) type_name -> . specifier_qualifier_list abstract_declarator
    (104) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (105) specifier_qualifier_list -> . type_specifier
    (106) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (107) specifier_qualifier_list -> . type_qualifier

    LCURLYBRACKET   shift and go to state 41
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    CONST           shift and go to state 27
    VOLATILE        shift and go to state 28

    compound_statement             shift and go to state 65
    declaration                    shift and go to state 66
    declaration_specifiers         shift and go to state 42
    storage_class_specifier        shift and go to state 7
    type_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 9
    type_name                      shift and go to state 26
    specifier_qualifier_list       shift and go to state 32

state 39

    (190) function_definition -> declarator compound_statement .

    TYPEDEF         reduce using rule 190 (function_definition -> declarator compound_statement .)
    EXTERN          reduce using rule 190 (function_definition -> declarator compound_statement .)
    STATIC          reduce using rule 190 (function_definition -> declarator compound_statement .)
    AUTO            reduce using rule 190 (function_definition -> declarator compound_statement .)
    REGISTER        reduce using rule 190 (function_definition -> declarator compound_statement .)
    VOID            reduce using rule 190 (function_definition -> declarator compound_statement .)
    CHAR            reduce using rule 190 (function_definition -> declarator compound_statement .)
    SHORT           reduce using rule 190 (function_definition -> declarator compound_statement .)
    INT             reduce using rule 190 (function_definition -> declarator compound_statement .)
    LONG            reduce using rule 190 (function_definition -> declarator compound_statement .)
    FLOAT           reduce using rule 190 (function_definition -> declarator compound_statement .)
    DOUBLE          reduce using rule 190 (function_definition -> declarator compound_statement .)
    SIGNED          reduce using rule 190 (function_definition -> declarator compound_statement .)
    UNSIGNED        reduce using rule 190 (function_definition -> declarator compound_statement .)
    CONST           reduce using rule 190 (function_definition -> declarator compound_statement .)
    VOLATILE        reduce using rule 190 (function_definition -> declarator compound_statement .)
    MULTIPLY        reduce using rule 190 (function_definition -> declarator compound_statement .)
    ID              reduce using rule 190 (function_definition -> declarator compound_statement .)
    LPAREN          reduce using rule 190 (function_definition -> declarator compound_statement .)
    $end            reduce using rule 190 (function_definition -> declarator compound_statement .)


state 40

    (167) declaration_list -> declaration .

    LCURLYBRACKET   reduce using rule 167 (declaration_list -> declaration .)
    TYPEDEF         reduce using rule 167 (declaration_list -> declaration .)
    EXTERN          reduce using rule 167 (declaration_list -> declaration .)
    STATIC          reduce using rule 167 (declaration_list -> declaration .)
    AUTO            reduce using rule 167 (declaration_list -> declaration .)
    REGISTER        reduce using rule 167 (declaration_list -> declaration .)
    VOID            reduce using rule 167 (declaration_list -> declaration .)
    CHAR            reduce using rule 167 (declaration_list -> declaration .)
    SHORT           reduce using rule 167 (declaration_list -> declaration .)
    INT             reduce using rule 167 (declaration_list -> declaration .)
    LONG            reduce using rule 167 (declaration_list -> declaration .)
    FLOAT           reduce using rule 167 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 167 (declaration_list -> declaration .)
    SIGNED          reduce using rule 167 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 167 (declaration_list -> declaration .)
    CONST           reduce using rule 167 (declaration_list -> declaration .)
    VOLATILE        reduce using rule 167 (declaration_list -> declaration .)
    RCURLYBRACKET   reduce using rule 167 (declaration_list -> declaration .)
    ID              reduce using rule 167 (declaration_list -> declaration .)
    CASE            reduce using rule 167 (declaration_list -> declaration .)
    DEFAULT         reduce using rule 167 (declaration_list -> declaration .)
    SEMICOLON       reduce using rule 167 (declaration_list -> declaration .)
    IF              reduce using rule 167 (declaration_list -> declaration .)
    SWITCH          reduce using rule 167 (declaration_list -> declaration .)
    WHILE           reduce using rule 167 (declaration_list -> declaration .)
    DO              reduce using rule 167 (declaration_list -> declaration .)
    FOR             reduce using rule 167 (declaration_list -> declaration .)
    GOTO            reduce using rule 167 (declaration_list -> declaration .)
    CONTINUE        reduce using rule 167 (declaration_list -> declaration .)
    BREAK           reduce using rule 167 (declaration_list -> declaration .)
    RETURN          reduce using rule 167 (declaration_list -> declaration .)
    INCREMENT       reduce using rule 167 (declaration_list -> declaration .)
    DECREMENT       reduce using rule 167 (declaration_list -> declaration .)
    SIZEOF          reduce using rule 167 (declaration_list -> declaration .)
    AND             reduce using rule 167 (declaration_list -> declaration .)
    MULTIPLY        reduce using rule 167 (declaration_list -> declaration .)
    PLUS            reduce using rule 167 (declaration_list -> declaration .)
    MINUS           reduce using rule 167 (declaration_list -> declaration .)
    NOT             reduce using rule 167 (declaration_list -> declaration .)
    LNOT            reduce using rule 167 (declaration_list -> declaration .)
    INT_CONST       reduce using rule 167 (declaration_list -> declaration .)
    FLOAT_CONST     reduce using rule 167 (declaration_list -> declaration .)
    CHAR_CONST      reduce using rule 167 (declaration_list -> declaration .)
    STRING_LITERAL  reduce using rule 167 (declaration_list -> declaration .)
    LPAREN          reduce using rule 167 (declaration_list -> declaration .)


state 41

    (161) compound_statement -> LCURLYBRACKET . RCURLYBRACKET
    (162) compound_statement -> LCURLYBRACKET . statement_list RCURLYBRACKET
    (163) compound_statement -> LCURLYBRACKET . declaration_list RCURLYBRACKET
    (164) compound_statement -> LCURLYBRACKET . declaration_list statement_list RCURLYBRACKET
    (169) statement_list -> . statement
    (170) statement_list -> . statement_list statement
    (167) declaration_list -> . declaration
    (168) declaration_list -> . declaration_list declaration
    (152) statement -> . labeled_statement
    (153) statement -> . compound_statement
    (154) statement -> . expression_statement
    (155) statement -> . selection_statement
    (156) statement -> . iteration_statement
    (157) statement -> . jump_statement
    (77) declaration -> . declaration_specifiers SEMICOLON
    (78) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (158) labeled_statement -> . ID COLON statement
    (159) labeled_statement -> . CASE constant_expression COLON statement
    (160) labeled_statement -> . DEFAULT COLON statement
    (161) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (162) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (163) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (164) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (165) expression_statement -> . SEMICOLON
    (166) expression_statement -> . expression SEMICOLON
    (171) selection_statement -> . IF LPAREN expression RPAREN statement
    (172) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (173) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (174) iteration_statement -> . WHILE LPAREN expression RPAREN
    (175) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (176) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (177) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (178) jump_statement -> . GOTO ID SEMICOLON
    (179) jump_statement -> . CONTINUE SEMICOLON
    (180) jump_statement -> . BREAK SEMICOLON
    (181) jump_statement -> . RETURN SEMICOLON
    (182) jump_statement -> . RETURN expression SEMICOLON
    (79) declaration_specifiers -> . storage_class_specifier
    (80) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_qualifier
    (84) declaration_specifiers -> . type_qualifier declaration_specifiers
    (74) expression -> . assignment_expression
    (75) expression -> . expression COMMA assignment_expression
    (89) storage_class_specifier -> . TYPEDEF
    (90) storage_class_specifier -> . EXTERN
    (91) storage_class_specifier -> . STATIC
    (92) storage_class_specifier -> . AUTO
    (93) storage_class_specifier -> . REGISTER
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . type_name
    (108) type_qualifier -> . CONST
    (109) type_qualifier -> . VOLATILE
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (134) type_name -> . specifier_qualifier_list
    (135) type_name -> . specifier_qualifier_list abstract_declarator
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (104) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (105) specifier_qualifier_list -> . type_specifier
    (106) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (107) specifier_qualifier_list -> . type_qualifier
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCURLYBRACKET   shift and go to state 67
    ID              shift and go to state 78
    CASE            shift and go to state 79
    DEFAULT         shift and go to state 80
    LCURLYBRACKET   shift and go to state 41
    SEMICOLON       shift and go to state 77
    IF              shift and go to state 82
    SWITCH          shift and go to state 84
    WHILE           shift and go to state 85
    DO              shift and go to state 86
    FOR             shift and go to state 87
    GOTO            shift and go to state 88
    CONTINUE        shift and go to state 89
    BREAK           shift and go to state 90
    RETURN          shift and go to state 91
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    CONST           shift and go to state 27
    VOLATILE        shift and go to state 28
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    statement_list                 shift and go to state 68
    declaration_list               shift and go to state 69
    statement                      shift and go to state 70
    declaration                    shift and go to state 40
    labeled_statement              shift and go to state 71
    compound_statement             shift and go to state 72
    expression_statement           shift and go to state 73
    selection_statement            shift and go to state 74
    iteration_statement            shift and go to state 75
    jump_statement                 shift and go to state 76
    declaration_specifiers         shift and go to state 42
    expression                     shift and go to state 81
    storage_class_specifier        shift and go to state 7
    type_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 9
    assignment_expression          shift and go to state 92
    type_name                      shift and go to state 26
    conditional_expression         shift and go to state 93
    unary_expression               shift and go to state 94
    specifier_qualifier_list       shift and go to state 32
    logical_or_expression          shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 42

    (77) declaration -> declaration_specifiers . SEMICOLON
    (78) declaration -> declaration_specifiers . init_declarator_list SEMICOLON
    (85) init_declarator_list -> . init_declarator
    (86) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (87) init_declarator -> . declarator
    (88) init_declarator -> . declarator EQUALS initializer
    (110) declarator -> . pointer direct_declarator
    (111) declarator -> . direct_declarator
    (121) pointer -> . MULTIPLY
    (122) pointer -> . MULTIPLY type_qualifier_list
    (123) pointer -> . MULTIPLY type_qualifier_list pointer
    (124) pointer -> . MULTIPLY pointer
    (112) direct_declarator -> . ID
    (113) direct_declarator -> . LPAREN declarator RPAREN
    (114) direct_declarator -> . direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (115) direct_declarator -> . direct_declarator LSQUAREBRACKET RSQUAREBRACKET
    (116) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (117) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (118) direct_declarator -> . direct_declarator LPAREN RPAREN

    SEMICOLON       shift and go to state 35
    MULTIPLY        shift and go to state 29
    ID              shift and go to state 30
    LPAREN          shift and go to state 31

    init_declarator_list           shift and go to state 36
    init_declarator                shift and go to state 37
    declarator                     shift and go to state 122
    pointer                        shift and go to state 10
    direct_declarator              shift and go to state 11

state 43

    (80) declaration_specifiers -> storage_class_specifier declaration_specifiers .

    SEMICOLON       reduce using rule 80 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    MULTIPLY        reduce using rule 80 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    ID              reduce using rule 80 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    LPAREN          reduce using rule 80 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    LSQUAREBRACKET  reduce using rule 80 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    COMMA           reduce using rule 80 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    RPAREN          reduce using rule 80 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)


state 44

    (82) declaration_specifiers -> type_specifier declaration_specifiers .

    SEMICOLON       reduce using rule 82 (declaration_specifiers -> type_specifier declaration_specifiers .)
    MULTIPLY        reduce using rule 82 (declaration_specifiers -> type_specifier declaration_specifiers .)
    ID              reduce using rule 82 (declaration_specifiers -> type_specifier declaration_specifiers .)
    LPAREN          reduce using rule 82 (declaration_specifiers -> type_specifier declaration_specifiers .)
    LSQUAREBRACKET  reduce using rule 82 (declaration_specifiers -> type_specifier declaration_specifiers .)
    COMMA           reduce using rule 82 (declaration_specifiers -> type_specifier declaration_specifiers .)
    RPAREN          reduce using rule 82 (declaration_specifiers -> type_specifier declaration_specifiers .)


state 45

    (104) specifier_qualifier_list -> type_specifier specifier_qualifier_list .
    (134) type_name -> specifier_qualifier_list .
    (135) type_name -> specifier_qualifier_list . abstract_declarator
    (136) abstract_declarator -> . pointer
    (137) abstract_declarator -> . direct_abstract_declarator
    (138) abstract_declarator -> . pointer direct_abstract_declarator
    (121) pointer -> . MULTIPLY
    (122) pointer -> . MULTIPLY type_qualifier_list
    (123) pointer -> . MULTIPLY type_qualifier_list pointer
    (124) pointer -> . MULTIPLY pointer
    (139) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (140) direct_abstract_declarator -> . LSQUAREBRACKET RSQUAREBRACKET
    (141) direct_abstract_declarator -> . LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (142) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (143) direct_abstract_declarator -> . direct_abstract_declarator LPAREN constant_expression RPAREN
    (144) direct_abstract_declarator -> . LPAREN RPAREN
    (145) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (146) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

  ! reduce/reduce conflict for MULTIPLY resolved using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
  ! reduce/reduce conflict for LPAREN resolved using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
  ! reduce/reduce conflict for LSQUAREBRACKET resolved using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
  ! reduce/reduce conflict for TYPEDEF resolved using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
  ! reduce/reduce conflict for EXTERN resolved using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
  ! reduce/reduce conflict for STATIC resolved using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
  ! reduce/reduce conflict for AUTO resolved using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
  ! reduce/reduce conflict for REGISTER resolved using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
  ! reduce/reduce conflict for VOID resolved using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
  ! reduce/reduce conflict for CHAR resolved using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
  ! reduce/reduce conflict for SHORT resolved using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
  ! reduce/reduce conflict for INT resolved using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
  ! reduce/reduce conflict for LONG resolved using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
  ! reduce/reduce conflict for FLOAT resolved using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
  ! reduce/reduce conflict for SIGNED resolved using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
  ! reduce/reduce conflict for UNSIGNED resolved using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
  ! reduce/reduce conflict for CONST resolved using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
  ! reduce/reduce conflict for VOLATILE resolved using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
  ! reduce/reduce conflict for ID resolved using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
  ! reduce/reduce conflict for COMMA resolved using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
  ! reduce/reduce conflict for RPAREN resolved using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQUAREBRACKET resolved as shift
    TYPEDEF         reduce using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    EXTERN          reduce using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    STATIC          reduce using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    AUTO            reduce using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    REGISTER        reduce using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    VOID            reduce using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    CHAR            reduce using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    SHORT           reduce using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    INT             reduce using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    LONG            reduce using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    FLOAT           reduce using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    DOUBLE          reduce using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    SIGNED          reduce using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    UNSIGNED        reduce using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    CONST           reduce using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    VOLATILE        reduce using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    SEMICOLON       reduce using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    ID              reduce using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    COMMA           reduce using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    RPAREN          reduce using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    MULTIPLY        shift and go to state 29
    LPAREN          shift and go to state 58
    LSQUAREBRACKET  shift and go to state 59

  ! MULTIPLY        [ reduce using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .) ]
  ! LPAREN          [ reduce using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .) ]
  ! LSQUAREBRACKET  [ reduce using rule 104 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .) ]
  ! MULTIPLY        [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! LPAREN          [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! LSQUAREBRACKET  [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! TYPEDEF         [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! EXTERN          [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! STATIC          [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! AUTO            [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! REGISTER        [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! VOID            [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! CHAR            [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! SHORT           [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! INT             [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! LONG            [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! FLOAT           [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! DOUBLE          [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! SIGNED          [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! UNSIGNED        [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! CONST           [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! VOLATILE        [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! SEMICOLON       [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! ID              [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! COMMA           [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! RPAREN          [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]

    abstract_declarator            shift and go to state 55
    pointer                        shift and go to state 56
    direct_abstract_declarator     shift and go to state 57

state 46

    (84) declaration_specifiers -> type_qualifier declaration_specifiers .

    SEMICOLON       reduce using rule 84 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    MULTIPLY        reduce using rule 84 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    ID              reduce using rule 84 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    LPAREN          reduce using rule 84 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    LSQUAREBRACKET  reduce using rule 84 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    COMMA           reduce using rule 84 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    RPAREN          reduce using rule 84 (declaration_specifiers -> type_qualifier declaration_specifiers .)


state 47

    (106) specifier_qualifier_list -> type_qualifier specifier_qualifier_list .
    (134) type_name -> specifier_qualifier_list .
    (135) type_name -> specifier_qualifier_list . abstract_declarator
    (136) abstract_declarator -> . pointer
    (137) abstract_declarator -> . direct_abstract_declarator
    (138) abstract_declarator -> . pointer direct_abstract_declarator
    (121) pointer -> . MULTIPLY
    (122) pointer -> . MULTIPLY type_qualifier_list
    (123) pointer -> . MULTIPLY type_qualifier_list pointer
    (124) pointer -> . MULTIPLY pointer
    (139) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (140) direct_abstract_declarator -> . LSQUAREBRACKET RSQUAREBRACKET
    (141) direct_abstract_declarator -> . LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (142) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (143) direct_abstract_declarator -> . direct_abstract_declarator LPAREN constant_expression RPAREN
    (144) direct_abstract_declarator -> . LPAREN RPAREN
    (145) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (146) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

  ! reduce/reduce conflict for MULTIPLY resolved using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
  ! reduce/reduce conflict for LPAREN resolved using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
  ! reduce/reduce conflict for LSQUAREBRACKET resolved using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
  ! reduce/reduce conflict for TYPEDEF resolved using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
  ! reduce/reduce conflict for EXTERN resolved using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
  ! reduce/reduce conflict for STATIC resolved using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
  ! reduce/reduce conflict for AUTO resolved using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
  ! reduce/reduce conflict for REGISTER resolved using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
  ! reduce/reduce conflict for VOID resolved using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
  ! reduce/reduce conflict for CHAR resolved using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
  ! reduce/reduce conflict for SHORT resolved using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
  ! reduce/reduce conflict for INT resolved using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
  ! reduce/reduce conflict for LONG resolved using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
  ! reduce/reduce conflict for FLOAT resolved using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
  ! reduce/reduce conflict for SIGNED resolved using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
  ! reduce/reduce conflict for UNSIGNED resolved using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
  ! reduce/reduce conflict for CONST resolved using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
  ! reduce/reduce conflict for VOLATILE resolved using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
  ! reduce/reduce conflict for ID resolved using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
  ! reduce/reduce conflict for COMMA resolved using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
  ! reduce/reduce conflict for RPAREN resolved using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQUAREBRACKET resolved as shift
    TYPEDEF         reduce using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    EXTERN          reduce using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    STATIC          reduce using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    AUTO            reduce using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    REGISTER        reduce using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    VOID            reduce using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    CHAR            reduce using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    SHORT           reduce using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    INT             reduce using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    LONG            reduce using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    FLOAT           reduce using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    DOUBLE          reduce using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    SIGNED          reduce using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    UNSIGNED        reduce using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    CONST           reduce using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    VOLATILE        reduce using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    SEMICOLON       reduce using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    ID              reduce using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    COMMA           reduce using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    RPAREN          reduce using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    MULTIPLY        shift and go to state 29
    LPAREN          shift and go to state 58
    LSQUAREBRACKET  shift and go to state 59

  ! MULTIPLY        [ reduce using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .) ]
  ! LPAREN          [ reduce using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .) ]
  ! LSQUAREBRACKET  [ reduce using rule 106 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .) ]
  ! MULTIPLY        [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! LPAREN          [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! LSQUAREBRACKET  [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! TYPEDEF         [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! EXTERN          [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! STATIC          [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! AUTO            [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! REGISTER        [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! VOID            [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! CHAR            [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! SHORT           [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! INT             [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! LONG            [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! FLOAT           [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! DOUBLE          [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! SIGNED          [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! UNSIGNED        [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! CONST           [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! VOLATILE        [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! SEMICOLON       [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! ID              [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! COMMA           [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]
  ! RPAREN          [ reduce using rule 134 (type_name -> specifier_qualifier_list .) ]

    abstract_declarator            shift and go to state 55
    pointer                        shift and go to state 56
    direct_abstract_declarator     shift and go to state 57

state 48

    (110) declarator -> pointer direct_declarator .
    (114) direct_declarator -> direct_declarator . LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (115) direct_declarator -> direct_declarator . LSQUAREBRACKET RSQUAREBRACKET
    (116) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (117) direct_declarator -> direct_declarator . LPAREN identifier_list RPAREN
    (118) direct_declarator -> direct_declarator . LPAREN RPAREN

    LCURLYBRACKET   reduce using rule 110 (declarator -> pointer direct_declarator .)
    TYPEDEF         reduce using rule 110 (declarator -> pointer direct_declarator .)
    EXTERN          reduce using rule 110 (declarator -> pointer direct_declarator .)
    STATIC          reduce using rule 110 (declarator -> pointer direct_declarator .)
    AUTO            reduce using rule 110 (declarator -> pointer direct_declarator .)
    REGISTER        reduce using rule 110 (declarator -> pointer direct_declarator .)
    VOID            reduce using rule 110 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 110 (declarator -> pointer direct_declarator .)
    SHORT           reduce using rule 110 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 110 (declarator -> pointer direct_declarator .)
    LONG            reduce using rule 110 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 110 (declarator -> pointer direct_declarator .)
    DOUBLE          reduce using rule 110 (declarator -> pointer direct_declarator .)
    SIGNED          reduce using rule 110 (declarator -> pointer direct_declarator .)
    UNSIGNED        reduce using rule 110 (declarator -> pointer direct_declarator .)
    CONST           reduce using rule 110 (declarator -> pointer direct_declarator .)
    VOLATILE        reduce using rule 110 (declarator -> pointer direct_declarator .)
    EQUALS          reduce using rule 110 (declarator -> pointer direct_declarator .)
    SEMICOLON       reduce using rule 110 (declarator -> pointer direct_declarator .)
    COMMA           reduce using rule 110 (declarator -> pointer direct_declarator .)
    RPAREN          reduce using rule 110 (declarator -> pointer direct_declarator .)
    LSQUAREBRACKET  shift and go to state 49
    LPAREN          shift and go to state 50


state 49

    (114) direct_declarator -> direct_declarator LSQUAREBRACKET . constant_expression RSQUAREBRACKET
    (115) direct_declarator -> direct_declarator LSQUAREBRACKET . RSQUAREBRACKET
    (76) constant_expression -> . conditional_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN

    RSQUAREBRACKET  shift and go to state 124
    LPAREN          shift and go to state 127
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114

    constant_expression            shift and go to state 123
    conditional_expression         shift and go to state 125
    logical_or_expression          shift and go to state 95
    logical_and_expression         shift and go to state 102
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 126
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    primary_expression             shift and go to state 103

state 50

    (116) direct_declarator -> direct_declarator LPAREN . parameter_type_list RPAREN
    (117) direct_declarator -> direct_declarator LPAREN . identifier_list RPAREN
    (118) direct_declarator -> direct_declarator LPAREN . RPAREN
    (125) parameter_type_list -> . parameter_list
    (126) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (132) identifier_list -> . ID
    (133) identifier_list -> . identifier_list COMMA ID
    (127) parameter_list -> . parameter_declaration
    (128) parameter_list -> . parameter_list COMMA parameter_declaration
    (129) parameter_declaration -> . declaration_specifiers declarator
    (130) parameter_declaration -> . declaration_specifiers abstract_declarator
    (131) parameter_declaration -> . declaration_specifiers
    (79) declaration_specifiers -> . storage_class_specifier
    (80) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_qualifier
    (84) declaration_specifiers -> . type_qualifier declaration_specifiers
    (89) storage_class_specifier -> . TYPEDEF
    (90) storage_class_specifier -> . EXTERN
    (91) storage_class_specifier -> . STATIC
    (92) storage_class_specifier -> . AUTO
    (93) storage_class_specifier -> . REGISTER
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . type_name
    (108) type_qualifier -> . CONST
    (109) type_qualifier -> . VOLATILE
    (134) type_name -> . specifier_qualifier_list
    (135) type_name -> . specifier_qualifier_list abstract_declarator
    (104) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (105) specifier_qualifier_list -> . type_specifier
    (106) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (107) specifier_qualifier_list -> . type_qualifier

    RPAREN          shift and go to state 130
    ID              shift and go to state 133
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    CONST           shift and go to state 27
    VOLATILE        shift and go to state 28

    parameter_type_list            shift and go to state 129
    identifier_list                shift and go to state 131
    parameter_list                 shift and go to state 132
    parameter_declaration          shift and go to state 134
    declaration_specifiers         shift and go to state 135
    storage_class_specifier        shift and go to state 7
    type_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 9
    type_name                      shift and go to state 26
    specifier_qualifier_list       shift and go to state 32

state 51

    (122) pointer -> MULTIPLY type_qualifier_list .
    (123) pointer -> MULTIPLY type_qualifier_list . pointer
    (120) type_qualifier_list -> type_qualifier_list . type_qualifier
    (121) pointer -> . MULTIPLY
    (122) pointer -> . MULTIPLY type_qualifier_list
    (123) pointer -> . MULTIPLY type_qualifier_list pointer
    (124) pointer -> . MULTIPLY pointer
    (108) type_qualifier -> . CONST
    (109) type_qualifier -> . VOLATILE

    ID              reduce using rule 122 (pointer -> MULTIPLY type_qualifier_list .)
    LPAREN          reduce using rule 122 (pointer -> MULTIPLY type_qualifier_list .)
    LSQUAREBRACKET  reduce using rule 122 (pointer -> MULTIPLY type_qualifier_list .)
    TYPEDEF         reduce using rule 122 (pointer -> MULTIPLY type_qualifier_list .)
    EXTERN          reduce using rule 122 (pointer -> MULTIPLY type_qualifier_list .)
    STATIC          reduce using rule 122 (pointer -> MULTIPLY type_qualifier_list .)
    AUTO            reduce using rule 122 (pointer -> MULTIPLY type_qualifier_list .)
    REGISTER        reduce using rule 122 (pointer -> MULTIPLY type_qualifier_list .)
    VOID            reduce using rule 122 (pointer -> MULTIPLY type_qualifier_list .)
    CHAR            reduce using rule 122 (pointer -> MULTIPLY type_qualifier_list .)
    SHORT           reduce using rule 122 (pointer -> MULTIPLY type_qualifier_list .)
    INT             reduce using rule 122 (pointer -> MULTIPLY type_qualifier_list .)
    LONG            reduce using rule 122 (pointer -> MULTIPLY type_qualifier_list .)
    FLOAT           reduce using rule 122 (pointer -> MULTIPLY type_qualifier_list .)
    DOUBLE          reduce using rule 122 (pointer -> MULTIPLY type_qualifier_list .)
    SIGNED          reduce using rule 122 (pointer -> MULTIPLY type_qualifier_list .)
    UNSIGNED        reduce using rule 122 (pointer -> MULTIPLY type_qualifier_list .)
    CONST           reduce using rule 122 (pointer -> MULTIPLY type_qualifier_list .)
    VOLATILE        reduce using rule 122 (pointer -> MULTIPLY type_qualifier_list .)
    SEMICOLON       reduce using rule 122 (pointer -> MULTIPLY type_qualifier_list .)
    MULTIPLY        reduce using rule 122 (pointer -> MULTIPLY type_qualifier_list .)
    COMMA           reduce using rule 122 (pointer -> MULTIPLY type_qualifier_list .)
    RPAREN          reduce using rule 122 (pointer -> MULTIPLY type_qualifier_list .)

  ! MULTIPLY        [ shift and go to state 29 ]
  ! CONST           [ shift and go to state 27 ]
  ! VOLATILE        [ shift and go to state 28 ]

    pointer                        shift and go to state 136
    type_qualifier                 shift and go to state 137

state 52

    (124) pointer -> MULTIPLY pointer .

    ID              reduce using rule 124 (pointer -> MULTIPLY pointer .)
    LPAREN          reduce using rule 124 (pointer -> MULTIPLY pointer .)
    LSQUAREBRACKET  reduce using rule 124 (pointer -> MULTIPLY pointer .)
    TYPEDEF         reduce using rule 124 (pointer -> MULTIPLY pointer .)
    EXTERN          reduce using rule 124 (pointer -> MULTIPLY pointer .)
    STATIC          reduce using rule 124 (pointer -> MULTIPLY pointer .)
    AUTO            reduce using rule 124 (pointer -> MULTIPLY pointer .)
    REGISTER        reduce using rule 124 (pointer -> MULTIPLY pointer .)
    VOID            reduce using rule 124 (pointer -> MULTIPLY pointer .)
    CHAR            reduce using rule 124 (pointer -> MULTIPLY pointer .)
    SHORT           reduce using rule 124 (pointer -> MULTIPLY pointer .)
    INT             reduce using rule 124 (pointer -> MULTIPLY pointer .)
    LONG            reduce using rule 124 (pointer -> MULTIPLY pointer .)
    FLOAT           reduce using rule 124 (pointer -> MULTIPLY pointer .)
    DOUBLE          reduce using rule 124 (pointer -> MULTIPLY pointer .)
    SIGNED          reduce using rule 124 (pointer -> MULTIPLY pointer .)
    UNSIGNED        reduce using rule 124 (pointer -> MULTIPLY pointer .)
    CONST           reduce using rule 124 (pointer -> MULTIPLY pointer .)
    VOLATILE        reduce using rule 124 (pointer -> MULTIPLY pointer .)
    SEMICOLON       reduce using rule 124 (pointer -> MULTIPLY pointer .)
    MULTIPLY        reduce using rule 124 (pointer -> MULTIPLY pointer .)
    COMMA           reduce using rule 124 (pointer -> MULTIPLY pointer .)
    RPAREN          reduce using rule 124 (pointer -> MULTIPLY pointer .)


state 53

    (119) type_qualifier_list -> type_qualifier .

    MULTIPLY        reduce using rule 119 (type_qualifier_list -> type_qualifier .)
    CONST           reduce using rule 119 (type_qualifier_list -> type_qualifier .)
    VOLATILE        reduce using rule 119 (type_qualifier_list -> type_qualifier .)
    ID              reduce using rule 119 (type_qualifier_list -> type_qualifier .)
    LPAREN          reduce using rule 119 (type_qualifier_list -> type_qualifier .)
    LSQUAREBRACKET  reduce using rule 119 (type_qualifier_list -> type_qualifier .)
    TYPEDEF         reduce using rule 119 (type_qualifier_list -> type_qualifier .)
    EXTERN          reduce using rule 119 (type_qualifier_list -> type_qualifier .)
    STATIC          reduce using rule 119 (type_qualifier_list -> type_qualifier .)
    AUTO            reduce using rule 119 (type_qualifier_list -> type_qualifier .)
    REGISTER        reduce using rule 119 (type_qualifier_list -> type_qualifier .)
    VOID            reduce using rule 119 (type_qualifier_list -> type_qualifier .)
    CHAR            reduce using rule 119 (type_qualifier_list -> type_qualifier .)
    SHORT           reduce using rule 119 (type_qualifier_list -> type_qualifier .)
    INT             reduce using rule 119 (type_qualifier_list -> type_qualifier .)
    LONG            reduce using rule 119 (type_qualifier_list -> type_qualifier .)
    FLOAT           reduce using rule 119 (type_qualifier_list -> type_qualifier .)
    DOUBLE          reduce using rule 119 (type_qualifier_list -> type_qualifier .)
    SIGNED          reduce using rule 119 (type_qualifier_list -> type_qualifier .)
    UNSIGNED        reduce using rule 119 (type_qualifier_list -> type_qualifier .)
    SEMICOLON       reduce using rule 119 (type_qualifier_list -> type_qualifier .)
    COMMA           reduce using rule 119 (type_qualifier_list -> type_qualifier .)
    RPAREN          reduce using rule 119 (type_qualifier_list -> type_qualifier .)


state 54

    (113) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 138


state 55

    (135) type_name -> specifier_qualifier_list abstract_declarator .

    TYPEDEF         reduce using rule 135 (type_name -> specifier_qualifier_list abstract_declarator .)
    EXTERN          reduce using rule 135 (type_name -> specifier_qualifier_list abstract_declarator .)
    STATIC          reduce using rule 135 (type_name -> specifier_qualifier_list abstract_declarator .)
    AUTO            reduce using rule 135 (type_name -> specifier_qualifier_list abstract_declarator .)
    REGISTER        reduce using rule 135 (type_name -> specifier_qualifier_list abstract_declarator .)
    VOID            reduce using rule 135 (type_name -> specifier_qualifier_list abstract_declarator .)
    CHAR            reduce using rule 135 (type_name -> specifier_qualifier_list abstract_declarator .)
    SHORT           reduce using rule 135 (type_name -> specifier_qualifier_list abstract_declarator .)
    INT             reduce using rule 135 (type_name -> specifier_qualifier_list abstract_declarator .)
    LONG            reduce using rule 135 (type_name -> specifier_qualifier_list abstract_declarator .)
    FLOAT           reduce using rule 135 (type_name -> specifier_qualifier_list abstract_declarator .)
    DOUBLE          reduce using rule 135 (type_name -> specifier_qualifier_list abstract_declarator .)
    SIGNED          reduce using rule 135 (type_name -> specifier_qualifier_list abstract_declarator .)
    UNSIGNED        reduce using rule 135 (type_name -> specifier_qualifier_list abstract_declarator .)
    CONST           reduce using rule 135 (type_name -> specifier_qualifier_list abstract_declarator .)
    VOLATILE        reduce using rule 135 (type_name -> specifier_qualifier_list abstract_declarator .)
    SEMICOLON       reduce using rule 135 (type_name -> specifier_qualifier_list abstract_declarator .)
    MULTIPLY        reduce using rule 135 (type_name -> specifier_qualifier_list abstract_declarator .)
    ID              reduce using rule 135 (type_name -> specifier_qualifier_list abstract_declarator .)
    LPAREN          reduce using rule 135 (type_name -> specifier_qualifier_list abstract_declarator .)
    LSQUAREBRACKET  reduce using rule 135 (type_name -> specifier_qualifier_list abstract_declarator .)
    COMMA           reduce using rule 135 (type_name -> specifier_qualifier_list abstract_declarator .)
    RPAREN          reduce using rule 135 (type_name -> specifier_qualifier_list abstract_declarator .)


state 56

    (136) abstract_declarator -> pointer .
    (138) abstract_declarator -> pointer . direct_abstract_declarator
    (139) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (140) direct_abstract_declarator -> . LSQUAREBRACKET RSQUAREBRACKET
    (141) direct_abstract_declarator -> . LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (142) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (143) direct_abstract_declarator -> . direct_abstract_declarator LPAREN constant_expression RPAREN
    (144) direct_abstract_declarator -> . LPAREN RPAREN
    (145) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (146) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQUAREBRACKET resolved as shift
    TYPEDEF         reduce using rule 136 (abstract_declarator -> pointer .)
    EXTERN          reduce using rule 136 (abstract_declarator -> pointer .)
    STATIC          reduce using rule 136 (abstract_declarator -> pointer .)
    AUTO            reduce using rule 136 (abstract_declarator -> pointer .)
    REGISTER        reduce using rule 136 (abstract_declarator -> pointer .)
    VOID            reduce using rule 136 (abstract_declarator -> pointer .)
    CHAR            reduce using rule 136 (abstract_declarator -> pointer .)
    SHORT           reduce using rule 136 (abstract_declarator -> pointer .)
    INT             reduce using rule 136 (abstract_declarator -> pointer .)
    LONG            reduce using rule 136 (abstract_declarator -> pointer .)
    FLOAT           reduce using rule 136 (abstract_declarator -> pointer .)
    DOUBLE          reduce using rule 136 (abstract_declarator -> pointer .)
    SIGNED          reduce using rule 136 (abstract_declarator -> pointer .)
    UNSIGNED        reduce using rule 136 (abstract_declarator -> pointer .)
    CONST           reduce using rule 136 (abstract_declarator -> pointer .)
    VOLATILE        reduce using rule 136 (abstract_declarator -> pointer .)
    SEMICOLON       reduce using rule 136 (abstract_declarator -> pointer .)
    MULTIPLY        reduce using rule 136 (abstract_declarator -> pointer .)
    ID              reduce using rule 136 (abstract_declarator -> pointer .)
    COMMA           reduce using rule 136 (abstract_declarator -> pointer .)
    RPAREN          reduce using rule 136 (abstract_declarator -> pointer .)
    LPAREN          shift and go to state 58
    LSQUAREBRACKET  shift and go to state 59

  ! LPAREN          [ reduce using rule 136 (abstract_declarator -> pointer .) ]
  ! LSQUAREBRACKET  [ reduce using rule 136 (abstract_declarator -> pointer .) ]

    direct_abstract_declarator     shift and go to state 139

state 57

    (137) abstract_declarator -> direct_abstract_declarator .
    (142) direct_abstract_declarator -> direct_abstract_declarator . LPAREN RPAREN
    (143) direct_abstract_declarator -> direct_abstract_declarator . LPAREN constant_expression RPAREN
    (146) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    TYPEDEF         reduce using rule 137 (abstract_declarator -> direct_abstract_declarator .)
    EXTERN          reduce using rule 137 (abstract_declarator -> direct_abstract_declarator .)
    STATIC          reduce using rule 137 (abstract_declarator -> direct_abstract_declarator .)
    AUTO            reduce using rule 137 (abstract_declarator -> direct_abstract_declarator .)
    REGISTER        reduce using rule 137 (abstract_declarator -> direct_abstract_declarator .)
    VOID            reduce using rule 137 (abstract_declarator -> direct_abstract_declarator .)
    CHAR            reduce using rule 137 (abstract_declarator -> direct_abstract_declarator .)
    SHORT           reduce using rule 137 (abstract_declarator -> direct_abstract_declarator .)
    INT             reduce using rule 137 (abstract_declarator -> direct_abstract_declarator .)
    LONG            reduce using rule 137 (abstract_declarator -> direct_abstract_declarator .)
    FLOAT           reduce using rule 137 (abstract_declarator -> direct_abstract_declarator .)
    DOUBLE          reduce using rule 137 (abstract_declarator -> direct_abstract_declarator .)
    SIGNED          reduce using rule 137 (abstract_declarator -> direct_abstract_declarator .)
    UNSIGNED        reduce using rule 137 (abstract_declarator -> direct_abstract_declarator .)
    CONST           reduce using rule 137 (abstract_declarator -> direct_abstract_declarator .)
    VOLATILE        reduce using rule 137 (abstract_declarator -> direct_abstract_declarator .)
    SEMICOLON       reduce using rule 137 (abstract_declarator -> direct_abstract_declarator .)
    MULTIPLY        reduce using rule 137 (abstract_declarator -> direct_abstract_declarator .)
    ID              reduce using rule 137 (abstract_declarator -> direct_abstract_declarator .)
    LSQUAREBRACKET  reduce using rule 137 (abstract_declarator -> direct_abstract_declarator .)
    COMMA           reduce using rule 137 (abstract_declarator -> direct_abstract_declarator .)
    RPAREN          reduce using rule 137 (abstract_declarator -> direct_abstract_declarator .)
    LPAREN          shift and go to state 140

  ! LPAREN          [ reduce using rule 137 (abstract_declarator -> direct_abstract_declarator .) ]


state 58

    (139) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (144) direct_abstract_declarator -> LPAREN . RPAREN
    (145) direct_abstract_declarator -> LPAREN . parameter_type_list RPAREN
    (136) abstract_declarator -> . pointer
    (137) abstract_declarator -> . direct_abstract_declarator
    (138) abstract_declarator -> . pointer direct_abstract_declarator
    (125) parameter_type_list -> . parameter_list
    (126) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (121) pointer -> . MULTIPLY
    (122) pointer -> . MULTIPLY type_qualifier_list
    (123) pointer -> . MULTIPLY type_qualifier_list pointer
    (124) pointer -> . MULTIPLY pointer
    (139) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (140) direct_abstract_declarator -> . LSQUAREBRACKET RSQUAREBRACKET
    (141) direct_abstract_declarator -> . LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (142) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (143) direct_abstract_declarator -> . direct_abstract_declarator LPAREN constant_expression RPAREN
    (144) direct_abstract_declarator -> . LPAREN RPAREN
    (145) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (146) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN
    (127) parameter_list -> . parameter_declaration
    (128) parameter_list -> . parameter_list COMMA parameter_declaration
    (129) parameter_declaration -> . declaration_specifiers declarator
    (130) parameter_declaration -> . declaration_specifiers abstract_declarator
    (131) parameter_declaration -> . declaration_specifiers
    (79) declaration_specifiers -> . storage_class_specifier
    (80) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_qualifier
    (84) declaration_specifiers -> . type_qualifier declaration_specifiers
    (89) storage_class_specifier -> . TYPEDEF
    (90) storage_class_specifier -> . EXTERN
    (91) storage_class_specifier -> . STATIC
    (92) storage_class_specifier -> . AUTO
    (93) storage_class_specifier -> . REGISTER
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . type_name
    (108) type_qualifier -> . CONST
    (109) type_qualifier -> . VOLATILE
    (134) type_name -> . specifier_qualifier_list
    (135) type_name -> . specifier_qualifier_list abstract_declarator
    (104) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (105) specifier_qualifier_list -> . type_specifier
    (106) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (107) specifier_qualifier_list -> . type_qualifier

    RPAREN          shift and go to state 142
    MULTIPLY        shift and go to state 29
    LPAREN          shift and go to state 58
    LSQUAREBRACKET  shift and go to state 59
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    CONST           shift and go to state 27
    VOLATILE        shift and go to state 28

    abstract_declarator            shift and go to state 141
    parameter_type_list            shift and go to state 143
    pointer                        shift and go to state 56
    direct_abstract_declarator     shift and go to state 57
    parameter_list                 shift and go to state 132
    parameter_declaration          shift and go to state 134
    declaration_specifiers         shift and go to state 135
    storage_class_specifier        shift and go to state 7
    type_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 9
    type_name                      shift and go to state 26
    specifier_qualifier_list       shift and go to state 32

state 59

    (140) direct_abstract_declarator -> LSQUAREBRACKET . RSQUAREBRACKET
    (141) direct_abstract_declarator -> LSQUAREBRACKET . constant_expression RSQUAREBRACKET
    (76) constant_expression -> . conditional_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN

    RSQUAREBRACKET  shift and go to state 144
    LPAREN          shift and go to state 127
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114

    constant_expression            shift and go to state 145
    conditional_expression         shift and go to state 125
    logical_or_expression          shift and go to state 95
    logical_and_expression         shift and go to state 102
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 126
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    primary_expression             shift and go to state 103

state 60

    (187) function_definition -> declaration_specifiers declarator declaration_list . compound_statement
    (168) declaration_list -> declaration_list . declaration
    (161) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (162) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (163) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (164) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (77) declaration -> . declaration_specifiers SEMICOLON
    (78) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (79) declaration_specifiers -> . storage_class_specifier
    (80) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_qualifier
    (84) declaration_specifiers -> . type_qualifier declaration_specifiers
    (89) storage_class_specifier -> . TYPEDEF
    (90) storage_class_specifier -> . EXTERN
    (91) storage_class_specifier -> . STATIC
    (92) storage_class_specifier -> . AUTO
    (93) storage_class_specifier -> . REGISTER
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . type_name
    (108) type_qualifier -> . CONST
    (109) type_qualifier -> . VOLATILE
    (134) type_name -> . specifier_qualifier_list
    (135) type_name -> . specifier_qualifier_list abstract_declarator
    (104) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (105) specifier_qualifier_list -> . type_specifier
    (106) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (107) specifier_qualifier_list -> . type_qualifier

    LCURLYBRACKET   shift and go to state 41
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    CONST           shift and go to state 27
    VOLATILE        shift and go to state 28

    declaration_specifiers         shift and go to state 42
    compound_statement             shift and go to state 146
    declaration                    shift and go to state 66
    storage_class_specifier        shift and go to state 7
    type_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 9
    type_name                      shift and go to state 26
    specifier_qualifier_list       shift and go to state 32

state 61

    (188) function_definition -> declaration_specifiers declarator compound_statement .

    TYPEDEF         reduce using rule 188 (function_definition -> declaration_specifiers declarator compound_statement .)
    EXTERN          reduce using rule 188 (function_definition -> declaration_specifiers declarator compound_statement .)
    STATIC          reduce using rule 188 (function_definition -> declaration_specifiers declarator compound_statement .)
    AUTO            reduce using rule 188 (function_definition -> declaration_specifiers declarator compound_statement .)
    REGISTER        reduce using rule 188 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOID            reduce using rule 188 (function_definition -> declaration_specifiers declarator compound_statement .)
    CHAR            reduce using rule 188 (function_definition -> declaration_specifiers declarator compound_statement .)
    SHORT           reduce using rule 188 (function_definition -> declaration_specifiers declarator compound_statement .)
    INT             reduce using rule 188 (function_definition -> declaration_specifiers declarator compound_statement .)
    LONG            reduce using rule 188 (function_definition -> declaration_specifiers declarator compound_statement .)
    FLOAT           reduce using rule 188 (function_definition -> declaration_specifiers declarator compound_statement .)
    DOUBLE          reduce using rule 188 (function_definition -> declaration_specifiers declarator compound_statement .)
    SIGNED          reduce using rule 188 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNSIGNED        reduce using rule 188 (function_definition -> declaration_specifiers declarator compound_statement .)
    CONST           reduce using rule 188 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOLATILE        reduce using rule 188 (function_definition -> declaration_specifiers declarator compound_statement .)
    MULTIPLY        reduce using rule 188 (function_definition -> declaration_specifiers declarator compound_statement .)
    ID              reduce using rule 188 (function_definition -> declaration_specifiers declarator compound_statement .)
    LPAREN          reduce using rule 188 (function_definition -> declaration_specifiers declarator compound_statement .)
    $end            reduce using rule 188 (function_definition -> declaration_specifiers declarator compound_statement .)


state 62

    (88) init_declarator -> declarator EQUALS . initializer
    (147) initializer -> . assignment_expression
    (148) initializer -> . LCURLYBRACKET initializer_list RCURLYBRACKET
    (149) initializer -> . LCURLYBRACKET initializer_list COMMA RCURLYBRACKET
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LCURLYBRACKET   shift and go to state 149
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    initializer                    shift and go to state 147
    assignment_expression          shift and go to state 148
    conditional_expression         shift and go to state 93
    unary_expression               shift and go to state 94
    logical_or_expression          shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 63

    (78) declaration -> declaration_specifiers init_declarator_list SEMICOLON .

    TYPEDEF         reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    EXTERN          reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    STATIC          reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    AUTO            reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    REGISTER        reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    VOID            reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CHAR            reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SHORT           reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    INT             reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    LONG            reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SIGNED          reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CONST           reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    VOLATILE        reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    MULTIPLY        reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    ID              reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    LPAREN          reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    $end            reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    LCURLYBRACKET   reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    RCURLYBRACKET   reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CASE            reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    DEFAULT         reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SEMICOLON       reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    IF              reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SWITCH          reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    WHILE           reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    DO              reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    FOR             reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    GOTO            reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CONTINUE        reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    BREAK           reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    RETURN          reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    INCREMENT       reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    DECREMENT       reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SIZEOF          reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    AND             reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    PLUS            reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    MINUS           reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    NOT             reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    LNOT            reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    INT_CONST       reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    FLOAT_CONST     reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CHAR_CONST      reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    STRING_LITERAL  reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)


state 64

    (86) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (87) init_declarator -> . declarator
    (88) init_declarator -> . declarator EQUALS initializer
    (110) declarator -> . pointer direct_declarator
    (111) declarator -> . direct_declarator
    (121) pointer -> . MULTIPLY
    (122) pointer -> . MULTIPLY type_qualifier_list
    (123) pointer -> . MULTIPLY type_qualifier_list pointer
    (124) pointer -> . MULTIPLY pointer
    (112) direct_declarator -> . ID
    (113) direct_declarator -> . LPAREN declarator RPAREN
    (114) direct_declarator -> . direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (115) direct_declarator -> . direct_declarator LSQUAREBRACKET RSQUAREBRACKET
    (116) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (117) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (118) direct_declarator -> . direct_declarator LPAREN RPAREN

    MULTIPLY        shift and go to state 29
    ID              shift and go to state 30
    LPAREN          shift and go to state 31

    init_declarator                shift and go to state 150
    declarator                     shift and go to state 122
    pointer                        shift and go to state 10
    direct_declarator              shift and go to state 11

state 65

    (189) function_definition -> declarator declaration_list compound_statement .

    TYPEDEF         reduce using rule 189 (function_definition -> declarator declaration_list compound_statement .)
    EXTERN          reduce using rule 189 (function_definition -> declarator declaration_list compound_statement .)
    STATIC          reduce using rule 189 (function_definition -> declarator declaration_list compound_statement .)
    AUTO            reduce using rule 189 (function_definition -> declarator declaration_list compound_statement .)
    REGISTER        reduce using rule 189 (function_definition -> declarator declaration_list compound_statement .)
    VOID            reduce using rule 189 (function_definition -> declarator declaration_list compound_statement .)
    CHAR            reduce using rule 189 (function_definition -> declarator declaration_list compound_statement .)
    SHORT           reduce using rule 189 (function_definition -> declarator declaration_list compound_statement .)
    INT             reduce using rule 189 (function_definition -> declarator declaration_list compound_statement .)
    LONG            reduce using rule 189 (function_definition -> declarator declaration_list compound_statement .)
    FLOAT           reduce using rule 189 (function_definition -> declarator declaration_list compound_statement .)
    DOUBLE          reduce using rule 189 (function_definition -> declarator declaration_list compound_statement .)
    SIGNED          reduce using rule 189 (function_definition -> declarator declaration_list compound_statement .)
    UNSIGNED        reduce using rule 189 (function_definition -> declarator declaration_list compound_statement .)
    CONST           reduce using rule 189 (function_definition -> declarator declaration_list compound_statement .)
    VOLATILE        reduce using rule 189 (function_definition -> declarator declaration_list compound_statement .)
    MULTIPLY        reduce using rule 189 (function_definition -> declarator declaration_list compound_statement .)
    ID              reduce using rule 189 (function_definition -> declarator declaration_list compound_statement .)
    LPAREN          reduce using rule 189 (function_definition -> declarator declaration_list compound_statement .)
    $end            reduce using rule 189 (function_definition -> declarator declaration_list compound_statement .)


state 66

    (168) declaration_list -> declaration_list declaration .

    LCURLYBRACKET   reduce using rule 168 (declaration_list -> declaration_list declaration .)
    TYPEDEF         reduce using rule 168 (declaration_list -> declaration_list declaration .)
    EXTERN          reduce using rule 168 (declaration_list -> declaration_list declaration .)
    STATIC          reduce using rule 168 (declaration_list -> declaration_list declaration .)
    AUTO            reduce using rule 168 (declaration_list -> declaration_list declaration .)
    REGISTER        reduce using rule 168 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 168 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 168 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 168 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 168 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 168 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 168 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 168 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 168 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 168 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 168 (declaration_list -> declaration_list declaration .)
    VOLATILE        reduce using rule 168 (declaration_list -> declaration_list declaration .)
    RCURLYBRACKET   reduce using rule 168 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 168 (declaration_list -> declaration_list declaration .)
    CASE            reduce using rule 168 (declaration_list -> declaration_list declaration .)
    DEFAULT         reduce using rule 168 (declaration_list -> declaration_list declaration .)
    SEMICOLON       reduce using rule 168 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 168 (declaration_list -> declaration_list declaration .)
    SWITCH          reduce using rule 168 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 168 (declaration_list -> declaration_list declaration .)
    DO              reduce using rule 168 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 168 (declaration_list -> declaration_list declaration .)
    GOTO            reduce using rule 168 (declaration_list -> declaration_list declaration .)
    CONTINUE        reduce using rule 168 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 168 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 168 (declaration_list -> declaration_list declaration .)
    INCREMENT       reduce using rule 168 (declaration_list -> declaration_list declaration .)
    DECREMENT       reduce using rule 168 (declaration_list -> declaration_list declaration .)
    SIZEOF          reduce using rule 168 (declaration_list -> declaration_list declaration .)
    AND             reduce using rule 168 (declaration_list -> declaration_list declaration .)
    MULTIPLY        reduce using rule 168 (declaration_list -> declaration_list declaration .)
    PLUS            reduce using rule 168 (declaration_list -> declaration_list declaration .)
    MINUS           reduce using rule 168 (declaration_list -> declaration_list declaration .)
    NOT             reduce using rule 168 (declaration_list -> declaration_list declaration .)
    LNOT            reduce using rule 168 (declaration_list -> declaration_list declaration .)
    INT_CONST       reduce using rule 168 (declaration_list -> declaration_list declaration .)
    FLOAT_CONST     reduce using rule 168 (declaration_list -> declaration_list declaration .)
    CHAR_CONST      reduce using rule 168 (declaration_list -> declaration_list declaration .)
    STRING_LITERAL  reduce using rule 168 (declaration_list -> declaration_list declaration .)
    LPAREN          reduce using rule 168 (declaration_list -> declaration_list declaration .)


state 67

    (161) compound_statement -> LCURLYBRACKET RCURLYBRACKET .

    TYPEDEF         reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    EXTERN          reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    STATIC          reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    AUTO            reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    REGISTER        reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    VOID            reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    CHAR            reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    SHORT           reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    INT             reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    LONG            reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    FLOAT           reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    DOUBLE          reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    SIGNED          reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    UNSIGNED        reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    CONST           reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    VOLATILE        reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    MULTIPLY        reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    ID              reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    LPAREN          reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    $end            reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    RCURLYBRACKET   reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    CASE            reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    DEFAULT         reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    LCURLYBRACKET   reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    SEMICOLON       reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    IF              reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    SWITCH          reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    WHILE           reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    DO              reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    FOR             reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    GOTO            reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    CONTINUE        reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    BREAK           reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    RETURN          reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    INCREMENT       reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    DECREMENT       reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    SIZEOF          reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    AND             reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    PLUS            reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    MINUS           reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    NOT             reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    LNOT            reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    INT_CONST       reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    FLOAT_CONST     reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    CHAR_CONST      reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    STRING_LITERAL  reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    ELSE            reduce using rule 161 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)


state 68

    (162) compound_statement -> LCURLYBRACKET statement_list . RCURLYBRACKET
    (170) statement_list -> statement_list . statement
    (152) statement -> . labeled_statement
    (153) statement -> . compound_statement
    (154) statement -> . expression_statement
    (155) statement -> . selection_statement
    (156) statement -> . iteration_statement
    (157) statement -> . jump_statement
    (158) labeled_statement -> . ID COLON statement
    (159) labeled_statement -> . CASE constant_expression COLON statement
    (160) labeled_statement -> . DEFAULT COLON statement
    (161) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (162) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (163) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (164) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (165) expression_statement -> . SEMICOLON
    (166) expression_statement -> . expression SEMICOLON
    (171) selection_statement -> . IF LPAREN expression RPAREN statement
    (172) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (173) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (174) iteration_statement -> . WHILE LPAREN expression RPAREN
    (175) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (176) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (177) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (178) jump_statement -> . GOTO ID SEMICOLON
    (179) jump_statement -> . CONTINUE SEMICOLON
    (180) jump_statement -> . BREAK SEMICOLON
    (181) jump_statement -> . RETURN SEMICOLON
    (182) jump_statement -> . RETURN expression SEMICOLON
    (74) expression -> . assignment_expression
    (75) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCURLYBRACKET   shift and go to state 151
    ID              shift and go to state 78
    CASE            shift and go to state 79
    DEFAULT         shift and go to state 80
    LCURLYBRACKET   shift and go to state 41
    SEMICOLON       shift and go to state 77
    IF              shift and go to state 82
    SWITCH          shift and go to state 84
    WHILE           shift and go to state 85
    DO              shift and go to state 86
    FOR             shift and go to state 87
    GOTO            shift and go to state 88
    CONTINUE        shift and go to state 89
    BREAK           shift and go to state 90
    RETURN          shift and go to state 91
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    statement                      shift and go to state 152
    labeled_statement              shift and go to state 71
    compound_statement             shift and go to state 72
    expression_statement           shift and go to state 73
    selection_statement            shift and go to state 74
    iteration_statement            shift and go to state 75
    jump_statement                 shift and go to state 76
    expression                     shift and go to state 81
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 93
    unary_expression               shift and go to state 94
    logical_or_expression          shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 69

    (163) compound_statement -> LCURLYBRACKET declaration_list . RCURLYBRACKET
    (164) compound_statement -> LCURLYBRACKET declaration_list . statement_list RCURLYBRACKET
    (168) declaration_list -> declaration_list . declaration
    (169) statement_list -> . statement
    (170) statement_list -> . statement_list statement
    (77) declaration -> . declaration_specifiers SEMICOLON
    (78) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (152) statement -> . labeled_statement
    (153) statement -> . compound_statement
    (154) statement -> . expression_statement
    (155) statement -> . selection_statement
    (156) statement -> . iteration_statement
    (157) statement -> . jump_statement
    (79) declaration_specifiers -> . storage_class_specifier
    (80) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_qualifier
    (84) declaration_specifiers -> . type_qualifier declaration_specifiers
    (158) labeled_statement -> . ID COLON statement
    (159) labeled_statement -> . CASE constant_expression COLON statement
    (160) labeled_statement -> . DEFAULT COLON statement
    (161) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (162) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (163) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (164) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (165) expression_statement -> . SEMICOLON
    (166) expression_statement -> . expression SEMICOLON
    (171) selection_statement -> . IF LPAREN expression RPAREN statement
    (172) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (173) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (174) iteration_statement -> . WHILE LPAREN expression RPAREN
    (175) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (176) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (177) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (178) jump_statement -> . GOTO ID SEMICOLON
    (179) jump_statement -> . CONTINUE SEMICOLON
    (180) jump_statement -> . BREAK SEMICOLON
    (181) jump_statement -> . RETURN SEMICOLON
    (182) jump_statement -> . RETURN expression SEMICOLON
    (89) storage_class_specifier -> . TYPEDEF
    (90) storage_class_specifier -> . EXTERN
    (91) storage_class_specifier -> . STATIC
    (92) storage_class_specifier -> . AUTO
    (93) storage_class_specifier -> . REGISTER
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . type_name
    (108) type_qualifier -> . CONST
    (109) type_qualifier -> . VOLATILE
    (74) expression -> . assignment_expression
    (75) expression -> . expression COMMA assignment_expression
    (134) type_name -> . specifier_qualifier_list
    (135) type_name -> . specifier_qualifier_list abstract_declarator
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (104) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (105) specifier_qualifier_list -> . type_specifier
    (106) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (107) specifier_qualifier_list -> . type_qualifier
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCURLYBRACKET   shift and go to state 153
    ID              shift and go to state 78
    CASE            shift and go to state 79
    DEFAULT         shift and go to state 80
    LCURLYBRACKET   shift and go to state 41
    SEMICOLON       shift and go to state 77
    IF              shift and go to state 82
    SWITCH          shift and go to state 84
    WHILE           shift and go to state 85
    DO              shift and go to state 86
    FOR             shift and go to state 87
    GOTO            shift and go to state 88
    CONTINUE        shift and go to state 89
    BREAK           shift and go to state 90
    RETURN          shift and go to state 91
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    CONST           shift and go to state 27
    VOLATILE        shift and go to state 28
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    statement_list                 shift and go to state 154
    declaration                    shift and go to state 66
    statement                      shift and go to state 70
    declaration_specifiers         shift and go to state 42
    labeled_statement              shift and go to state 71
    compound_statement             shift and go to state 72
    expression_statement           shift and go to state 73
    selection_statement            shift and go to state 74
    iteration_statement            shift and go to state 75
    jump_statement                 shift and go to state 76
    storage_class_specifier        shift and go to state 7
    type_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 9
    expression                     shift and go to state 81
    type_name                      shift and go to state 26
    assignment_expression          shift and go to state 92
    specifier_qualifier_list       shift and go to state 32
    conditional_expression         shift and go to state 93
    unary_expression               shift and go to state 94
    logical_or_expression          shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 70

    (169) statement_list -> statement .

    RCURLYBRACKET   reduce using rule 169 (statement_list -> statement .)
    ID              reduce using rule 169 (statement_list -> statement .)
    CASE            reduce using rule 169 (statement_list -> statement .)
    DEFAULT         reduce using rule 169 (statement_list -> statement .)
    LCURLYBRACKET   reduce using rule 169 (statement_list -> statement .)
    SEMICOLON       reduce using rule 169 (statement_list -> statement .)
    IF              reduce using rule 169 (statement_list -> statement .)
    SWITCH          reduce using rule 169 (statement_list -> statement .)
    WHILE           reduce using rule 169 (statement_list -> statement .)
    DO              reduce using rule 169 (statement_list -> statement .)
    FOR             reduce using rule 169 (statement_list -> statement .)
    GOTO            reduce using rule 169 (statement_list -> statement .)
    CONTINUE        reduce using rule 169 (statement_list -> statement .)
    BREAK           reduce using rule 169 (statement_list -> statement .)
    RETURN          reduce using rule 169 (statement_list -> statement .)
    INCREMENT       reduce using rule 169 (statement_list -> statement .)
    DECREMENT       reduce using rule 169 (statement_list -> statement .)
    SIZEOF          reduce using rule 169 (statement_list -> statement .)
    AND             reduce using rule 169 (statement_list -> statement .)
    MULTIPLY        reduce using rule 169 (statement_list -> statement .)
    PLUS            reduce using rule 169 (statement_list -> statement .)
    MINUS           reduce using rule 169 (statement_list -> statement .)
    NOT             reduce using rule 169 (statement_list -> statement .)
    LNOT            reduce using rule 169 (statement_list -> statement .)
    INT_CONST       reduce using rule 169 (statement_list -> statement .)
    FLOAT_CONST     reduce using rule 169 (statement_list -> statement .)
    CHAR_CONST      reduce using rule 169 (statement_list -> statement .)
    STRING_LITERAL  reduce using rule 169 (statement_list -> statement .)
    LPAREN          reduce using rule 169 (statement_list -> statement .)


state 71

    (152) statement -> labeled_statement .

    RCURLYBRACKET   reduce using rule 152 (statement -> labeled_statement .)
    ID              reduce using rule 152 (statement -> labeled_statement .)
    CASE            reduce using rule 152 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 152 (statement -> labeled_statement .)
    LCURLYBRACKET   reduce using rule 152 (statement -> labeled_statement .)
    SEMICOLON       reduce using rule 152 (statement -> labeled_statement .)
    IF              reduce using rule 152 (statement -> labeled_statement .)
    SWITCH          reduce using rule 152 (statement -> labeled_statement .)
    WHILE           reduce using rule 152 (statement -> labeled_statement .)
    DO              reduce using rule 152 (statement -> labeled_statement .)
    FOR             reduce using rule 152 (statement -> labeled_statement .)
    GOTO            reduce using rule 152 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 152 (statement -> labeled_statement .)
    BREAK           reduce using rule 152 (statement -> labeled_statement .)
    RETURN          reduce using rule 152 (statement -> labeled_statement .)
    INCREMENT       reduce using rule 152 (statement -> labeled_statement .)
    DECREMENT       reduce using rule 152 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 152 (statement -> labeled_statement .)
    AND             reduce using rule 152 (statement -> labeled_statement .)
    MULTIPLY        reduce using rule 152 (statement -> labeled_statement .)
    PLUS            reduce using rule 152 (statement -> labeled_statement .)
    MINUS           reduce using rule 152 (statement -> labeled_statement .)
    NOT             reduce using rule 152 (statement -> labeled_statement .)
    LNOT            reduce using rule 152 (statement -> labeled_statement .)
    INT_CONST       reduce using rule 152 (statement -> labeled_statement .)
    FLOAT_CONST     reduce using rule 152 (statement -> labeled_statement .)
    CHAR_CONST      reduce using rule 152 (statement -> labeled_statement .)
    STRING_LITERAL  reduce using rule 152 (statement -> labeled_statement .)
    LPAREN          reduce using rule 152 (statement -> labeled_statement .)
    ELSE            reduce using rule 152 (statement -> labeled_statement .)


state 72

    (153) statement -> compound_statement .

    RCURLYBRACKET   reduce using rule 153 (statement -> compound_statement .)
    ID              reduce using rule 153 (statement -> compound_statement .)
    CASE            reduce using rule 153 (statement -> compound_statement .)
    DEFAULT         reduce using rule 153 (statement -> compound_statement .)
    LCURLYBRACKET   reduce using rule 153 (statement -> compound_statement .)
    SEMICOLON       reduce using rule 153 (statement -> compound_statement .)
    IF              reduce using rule 153 (statement -> compound_statement .)
    SWITCH          reduce using rule 153 (statement -> compound_statement .)
    WHILE           reduce using rule 153 (statement -> compound_statement .)
    DO              reduce using rule 153 (statement -> compound_statement .)
    FOR             reduce using rule 153 (statement -> compound_statement .)
    GOTO            reduce using rule 153 (statement -> compound_statement .)
    CONTINUE        reduce using rule 153 (statement -> compound_statement .)
    BREAK           reduce using rule 153 (statement -> compound_statement .)
    RETURN          reduce using rule 153 (statement -> compound_statement .)
    INCREMENT       reduce using rule 153 (statement -> compound_statement .)
    DECREMENT       reduce using rule 153 (statement -> compound_statement .)
    SIZEOF          reduce using rule 153 (statement -> compound_statement .)
    AND             reduce using rule 153 (statement -> compound_statement .)
    MULTIPLY        reduce using rule 153 (statement -> compound_statement .)
    PLUS            reduce using rule 153 (statement -> compound_statement .)
    MINUS           reduce using rule 153 (statement -> compound_statement .)
    NOT             reduce using rule 153 (statement -> compound_statement .)
    LNOT            reduce using rule 153 (statement -> compound_statement .)
    INT_CONST       reduce using rule 153 (statement -> compound_statement .)
    FLOAT_CONST     reduce using rule 153 (statement -> compound_statement .)
    CHAR_CONST      reduce using rule 153 (statement -> compound_statement .)
    STRING_LITERAL  reduce using rule 153 (statement -> compound_statement .)
    LPAREN          reduce using rule 153 (statement -> compound_statement .)
    ELSE            reduce using rule 153 (statement -> compound_statement .)


state 73

    (154) statement -> expression_statement .

    RCURLYBRACKET   reduce using rule 154 (statement -> expression_statement .)
    ID              reduce using rule 154 (statement -> expression_statement .)
    CASE            reduce using rule 154 (statement -> expression_statement .)
    DEFAULT         reduce using rule 154 (statement -> expression_statement .)
    LCURLYBRACKET   reduce using rule 154 (statement -> expression_statement .)
    SEMICOLON       reduce using rule 154 (statement -> expression_statement .)
    IF              reduce using rule 154 (statement -> expression_statement .)
    SWITCH          reduce using rule 154 (statement -> expression_statement .)
    WHILE           reduce using rule 154 (statement -> expression_statement .)
    DO              reduce using rule 154 (statement -> expression_statement .)
    FOR             reduce using rule 154 (statement -> expression_statement .)
    GOTO            reduce using rule 154 (statement -> expression_statement .)
    CONTINUE        reduce using rule 154 (statement -> expression_statement .)
    BREAK           reduce using rule 154 (statement -> expression_statement .)
    RETURN          reduce using rule 154 (statement -> expression_statement .)
    INCREMENT       reduce using rule 154 (statement -> expression_statement .)
    DECREMENT       reduce using rule 154 (statement -> expression_statement .)
    SIZEOF          reduce using rule 154 (statement -> expression_statement .)
    AND             reduce using rule 154 (statement -> expression_statement .)
    MULTIPLY        reduce using rule 154 (statement -> expression_statement .)
    PLUS            reduce using rule 154 (statement -> expression_statement .)
    MINUS           reduce using rule 154 (statement -> expression_statement .)
    NOT             reduce using rule 154 (statement -> expression_statement .)
    LNOT            reduce using rule 154 (statement -> expression_statement .)
    INT_CONST       reduce using rule 154 (statement -> expression_statement .)
    FLOAT_CONST     reduce using rule 154 (statement -> expression_statement .)
    CHAR_CONST      reduce using rule 154 (statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 154 (statement -> expression_statement .)
    LPAREN          reduce using rule 154 (statement -> expression_statement .)
    ELSE            reduce using rule 154 (statement -> expression_statement .)


state 74

    (155) statement -> selection_statement .

    RCURLYBRACKET   reduce using rule 155 (statement -> selection_statement .)
    ID              reduce using rule 155 (statement -> selection_statement .)
    CASE            reduce using rule 155 (statement -> selection_statement .)
    DEFAULT         reduce using rule 155 (statement -> selection_statement .)
    LCURLYBRACKET   reduce using rule 155 (statement -> selection_statement .)
    SEMICOLON       reduce using rule 155 (statement -> selection_statement .)
    IF              reduce using rule 155 (statement -> selection_statement .)
    SWITCH          reduce using rule 155 (statement -> selection_statement .)
    WHILE           reduce using rule 155 (statement -> selection_statement .)
    DO              reduce using rule 155 (statement -> selection_statement .)
    FOR             reduce using rule 155 (statement -> selection_statement .)
    GOTO            reduce using rule 155 (statement -> selection_statement .)
    CONTINUE        reduce using rule 155 (statement -> selection_statement .)
    BREAK           reduce using rule 155 (statement -> selection_statement .)
    RETURN          reduce using rule 155 (statement -> selection_statement .)
    INCREMENT       reduce using rule 155 (statement -> selection_statement .)
    DECREMENT       reduce using rule 155 (statement -> selection_statement .)
    SIZEOF          reduce using rule 155 (statement -> selection_statement .)
    AND             reduce using rule 155 (statement -> selection_statement .)
    MULTIPLY        reduce using rule 155 (statement -> selection_statement .)
    PLUS            reduce using rule 155 (statement -> selection_statement .)
    MINUS           reduce using rule 155 (statement -> selection_statement .)
    NOT             reduce using rule 155 (statement -> selection_statement .)
    LNOT            reduce using rule 155 (statement -> selection_statement .)
    INT_CONST       reduce using rule 155 (statement -> selection_statement .)
    FLOAT_CONST     reduce using rule 155 (statement -> selection_statement .)
    CHAR_CONST      reduce using rule 155 (statement -> selection_statement .)
    STRING_LITERAL  reduce using rule 155 (statement -> selection_statement .)
    LPAREN          reduce using rule 155 (statement -> selection_statement .)
    ELSE            reduce using rule 155 (statement -> selection_statement .)


state 75

    (156) statement -> iteration_statement .

    RCURLYBRACKET   reduce using rule 156 (statement -> iteration_statement .)
    ID              reduce using rule 156 (statement -> iteration_statement .)
    CASE            reduce using rule 156 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 156 (statement -> iteration_statement .)
    LCURLYBRACKET   reduce using rule 156 (statement -> iteration_statement .)
    SEMICOLON       reduce using rule 156 (statement -> iteration_statement .)
    IF              reduce using rule 156 (statement -> iteration_statement .)
    SWITCH          reduce using rule 156 (statement -> iteration_statement .)
    WHILE           reduce using rule 156 (statement -> iteration_statement .)
    DO              reduce using rule 156 (statement -> iteration_statement .)
    FOR             reduce using rule 156 (statement -> iteration_statement .)
    GOTO            reduce using rule 156 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 156 (statement -> iteration_statement .)
    BREAK           reduce using rule 156 (statement -> iteration_statement .)
    RETURN          reduce using rule 156 (statement -> iteration_statement .)
    INCREMENT       reduce using rule 156 (statement -> iteration_statement .)
    DECREMENT       reduce using rule 156 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 156 (statement -> iteration_statement .)
    AND             reduce using rule 156 (statement -> iteration_statement .)
    MULTIPLY        reduce using rule 156 (statement -> iteration_statement .)
    PLUS            reduce using rule 156 (statement -> iteration_statement .)
    MINUS           reduce using rule 156 (statement -> iteration_statement .)
    NOT             reduce using rule 156 (statement -> iteration_statement .)
    LNOT            reduce using rule 156 (statement -> iteration_statement .)
    INT_CONST       reduce using rule 156 (statement -> iteration_statement .)
    FLOAT_CONST     reduce using rule 156 (statement -> iteration_statement .)
    CHAR_CONST      reduce using rule 156 (statement -> iteration_statement .)
    STRING_LITERAL  reduce using rule 156 (statement -> iteration_statement .)
    LPAREN          reduce using rule 156 (statement -> iteration_statement .)
    ELSE            reduce using rule 156 (statement -> iteration_statement .)


state 76

    (157) statement -> jump_statement .

    RCURLYBRACKET   reduce using rule 157 (statement -> jump_statement .)
    ID              reduce using rule 157 (statement -> jump_statement .)
    CASE            reduce using rule 157 (statement -> jump_statement .)
    DEFAULT         reduce using rule 157 (statement -> jump_statement .)
    LCURLYBRACKET   reduce using rule 157 (statement -> jump_statement .)
    SEMICOLON       reduce using rule 157 (statement -> jump_statement .)
    IF              reduce using rule 157 (statement -> jump_statement .)
    SWITCH          reduce using rule 157 (statement -> jump_statement .)
    WHILE           reduce using rule 157 (statement -> jump_statement .)
    DO              reduce using rule 157 (statement -> jump_statement .)
    FOR             reduce using rule 157 (statement -> jump_statement .)
    GOTO            reduce using rule 157 (statement -> jump_statement .)
    CONTINUE        reduce using rule 157 (statement -> jump_statement .)
    BREAK           reduce using rule 157 (statement -> jump_statement .)
    RETURN          reduce using rule 157 (statement -> jump_statement .)
    INCREMENT       reduce using rule 157 (statement -> jump_statement .)
    DECREMENT       reduce using rule 157 (statement -> jump_statement .)
    SIZEOF          reduce using rule 157 (statement -> jump_statement .)
    AND             reduce using rule 157 (statement -> jump_statement .)
    MULTIPLY        reduce using rule 157 (statement -> jump_statement .)
    PLUS            reduce using rule 157 (statement -> jump_statement .)
    MINUS           reduce using rule 157 (statement -> jump_statement .)
    NOT             reduce using rule 157 (statement -> jump_statement .)
    LNOT            reduce using rule 157 (statement -> jump_statement .)
    INT_CONST       reduce using rule 157 (statement -> jump_statement .)
    FLOAT_CONST     reduce using rule 157 (statement -> jump_statement .)
    CHAR_CONST      reduce using rule 157 (statement -> jump_statement .)
    STRING_LITERAL  reduce using rule 157 (statement -> jump_statement .)
    LPAREN          reduce using rule 157 (statement -> jump_statement .)
    ELSE            reduce using rule 157 (statement -> jump_statement .)


state 77

    (165) expression_statement -> SEMICOLON .

    RCURLYBRACKET   reduce using rule 165 (expression_statement -> SEMICOLON .)
    ID              reduce using rule 165 (expression_statement -> SEMICOLON .)
    CASE            reduce using rule 165 (expression_statement -> SEMICOLON .)
    DEFAULT         reduce using rule 165 (expression_statement -> SEMICOLON .)
    LCURLYBRACKET   reduce using rule 165 (expression_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 165 (expression_statement -> SEMICOLON .)
    IF              reduce using rule 165 (expression_statement -> SEMICOLON .)
    SWITCH          reduce using rule 165 (expression_statement -> SEMICOLON .)
    WHILE           reduce using rule 165 (expression_statement -> SEMICOLON .)
    DO              reduce using rule 165 (expression_statement -> SEMICOLON .)
    FOR             reduce using rule 165 (expression_statement -> SEMICOLON .)
    GOTO            reduce using rule 165 (expression_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 165 (expression_statement -> SEMICOLON .)
    BREAK           reduce using rule 165 (expression_statement -> SEMICOLON .)
    RETURN          reduce using rule 165 (expression_statement -> SEMICOLON .)
    INCREMENT       reduce using rule 165 (expression_statement -> SEMICOLON .)
    DECREMENT       reduce using rule 165 (expression_statement -> SEMICOLON .)
    SIZEOF          reduce using rule 165 (expression_statement -> SEMICOLON .)
    AND             reduce using rule 165 (expression_statement -> SEMICOLON .)
    MULTIPLY        reduce using rule 165 (expression_statement -> SEMICOLON .)
    PLUS            reduce using rule 165 (expression_statement -> SEMICOLON .)
    MINUS           reduce using rule 165 (expression_statement -> SEMICOLON .)
    NOT             reduce using rule 165 (expression_statement -> SEMICOLON .)
    LNOT            reduce using rule 165 (expression_statement -> SEMICOLON .)
    INT_CONST       reduce using rule 165 (expression_statement -> SEMICOLON .)
    FLOAT_CONST     reduce using rule 165 (expression_statement -> SEMICOLON .)
    CHAR_CONST      reduce using rule 165 (expression_statement -> SEMICOLON .)
    STRING_LITERAL  reduce using rule 165 (expression_statement -> SEMICOLON .)
    LPAREN          reduce using rule 165 (expression_statement -> SEMICOLON .)
    ELSE            reduce using rule 165 (expression_statement -> SEMICOLON .)
    RPAREN          reduce using rule 165 (expression_statement -> SEMICOLON .)


state 78

    (158) labeled_statement -> ID . COLON statement
    (1) primary_expression -> ID .

    COLON           shift and go to state 155
    LSQUAREBRACKET  reduce using rule 1 (primary_expression -> ID .)
    LPAREN          reduce using rule 1 (primary_expression -> ID .)
    PERIOD          reduce using rule 1 (primary_expression -> ID .)
    ARROW           reduce using rule 1 (primary_expression -> ID .)
    INCREMENT       reduce using rule 1 (primary_expression -> ID .)
    DECREMENT       reduce using rule 1 (primary_expression -> ID .)
    EQUALS          reduce using rule 1 (primary_expression -> ID .)
    MULTIPLYEQUAL   reduce using rule 1 (primary_expression -> ID .)
    DIVIDEEQUAL     reduce using rule 1 (primary_expression -> ID .)
    MODEQUAL        reduce using rule 1 (primary_expression -> ID .)
    PLUSEQUAL       reduce using rule 1 (primary_expression -> ID .)
    MINUSEQUAL      reduce using rule 1 (primary_expression -> ID .)
    LSHIFTEQUAL     reduce using rule 1 (primary_expression -> ID .)
    RSHIFTEQUAL     reduce using rule 1 (primary_expression -> ID .)
    ANDEQUAL        reduce using rule 1 (primary_expression -> ID .)
    XOREQUAL        reduce using rule 1 (primary_expression -> ID .)
    OREQUAL         reduce using rule 1 (primary_expression -> ID .)
    MULTIPLY        reduce using rule 1 (primary_expression -> ID .)
    DIVIDE          reduce using rule 1 (primary_expression -> ID .)
    MOD             reduce using rule 1 (primary_expression -> ID .)
    PLUS            reduce using rule 1 (primary_expression -> ID .)
    MINUS           reduce using rule 1 (primary_expression -> ID .)
    LSHIFT          reduce using rule 1 (primary_expression -> ID .)
    RSHIFT          reduce using rule 1 (primary_expression -> ID .)
    LESS            reduce using rule 1 (primary_expression -> ID .)
    GREATER         reduce using rule 1 (primary_expression -> ID .)
    LESSEQUAL       reduce using rule 1 (primary_expression -> ID .)
    GREATEREQUAL    reduce using rule 1 (primary_expression -> ID .)
    EQUAL           reduce using rule 1 (primary_expression -> ID .)
    NOTEQUAL        reduce using rule 1 (primary_expression -> ID .)
    AND             reduce using rule 1 (primary_expression -> ID .)
    XOR             reduce using rule 1 (primary_expression -> ID .)
    OR              reduce using rule 1 (primary_expression -> ID .)
    LAND            reduce using rule 1 (primary_expression -> ID .)
    CONDOP          reduce using rule 1 (primary_expression -> ID .)
    LOR             reduce using rule 1 (primary_expression -> ID .)
    SEMICOLON       reduce using rule 1 (primary_expression -> ID .)
    COMMA           reduce using rule 1 (primary_expression -> ID .)


state 79

    (159) labeled_statement -> CASE . constant_expression COLON statement
    (76) constant_expression -> . conditional_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 127
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114

    constant_expression            shift and go to state 156
    conditional_expression         shift and go to state 125
    logical_or_expression          shift and go to state 95
    logical_and_expression         shift and go to state 102
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 126
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    primary_expression             shift and go to state 103

state 80

    (160) labeled_statement -> DEFAULT . COLON statement

    COLON           shift and go to state 157


state 81

    (166) expression_statement -> expression . SEMICOLON
    (75) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 158
    COMMA           shift and go to state 159


state 82

    (171) selection_statement -> IF . LPAREN expression RPAREN statement
    (172) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 160


state 83

    (6) primary_expression -> LPAREN . expression RPAREN
    (30) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (74) expression -> . assignment_expression
    (75) expression -> . expression COMMA assignment_expression
    (134) type_name -> . specifier_qualifier_list
    (135) type_name -> . specifier_qualifier_list abstract_declarator
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (104) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (105) specifier_qualifier_list -> . type_specifier
    (106) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (107) specifier_qualifier_list -> . type_qualifier
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . type_name
    (108) type_qualifier -> . CONST
    (109) type_qualifier -> . VOLATILE
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    CONST           shift and go to state 27
    VOLATILE        shift and go to state 28
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    expression                     shift and go to state 161
    type_name                      shift and go to state 162
    cast_expression                shift and go to state 100
    assignment_expression          shift and go to state 92
    specifier_qualifier_list       shift and go to state 32
    conditional_expression         shift and go to state 93
    unary_expression               shift and go to state 94
    type_specifier                 shift and go to state 163
    type_qualifier                 shift and go to state 164
    logical_or_expression          shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 84

    (173) selection_statement -> SWITCH . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 165


state 85

    (174) iteration_statement -> WHILE . LPAREN expression RPAREN

    LPAREN          shift and go to state 166


state 86

    (175) iteration_statement -> DO . statement WHILE LPAREN expression RPAREN SEMICOLON
    (152) statement -> . labeled_statement
    (153) statement -> . compound_statement
    (154) statement -> . expression_statement
    (155) statement -> . selection_statement
    (156) statement -> . iteration_statement
    (157) statement -> . jump_statement
    (158) labeled_statement -> . ID COLON statement
    (159) labeled_statement -> . CASE constant_expression COLON statement
    (160) labeled_statement -> . DEFAULT COLON statement
    (161) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (162) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (163) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (164) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (165) expression_statement -> . SEMICOLON
    (166) expression_statement -> . expression SEMICOLON
    (171) selection_statement -> . IF LPAREN expression RPAREN statement
    (172) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (173) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (174) iteration_statement -> . WHILE LPAREN expression RPAREN
    (175) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (176) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (177) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (178) jump_statement -> . GOTO ID SEMICOLON
    (179) jump_statement -> . CONTINUE SEMICOLON
    (180) jump_statement -> . BREAK SEMICOLON
    (181) jump_statement -> . RETURN SEMICOLON
    (182) jump_statement -> . RETURN expression SEMICOLON
    (74) expression -> . assignment_expression
    (75) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    ID              shift and go to state 78
    CASE            shift and go to state 79
    DEFAULT         shift and go to state 80
    LCURLYBRACKET   shift and go to state 41
    SEMICOLON       shift and go to state 77
    IF              shift and go to state 82
    SWITCH          shift and go to state 84
    WHILE           shift and go to state 85
    DO              shift and go to state 86
    FOR             shift and go to state 87
    GOTO            shift and go to state 88
    CONTINUE        shift and go to state 89
    BREAK           shift and go to state 90
    RETURN          shift and go to state 91
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    statement                      shift and go to state 167
    expression                     shift and go to state 81
    labeled_statement              shift and go to state 71
    compound_statement             shift and go to state 72
    expression_statement           shift and go to state 73
    selection_statement            shift and go to state 74
    iteration_statement            shift and go to state 75
    jump_statement                 shift and go to state 76
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 93
    unary_expression               shift and go to state 94
    logical_or_expression          shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 87

    (176) iteration_statement -> FOR . LPAREN expression_statement expression_statement RPAREN statement
    (177) iteration_statement -> FOR . LPAREN expression_statement expression_statement expression RPAREN statement

    LPAREN          shift and go to state 168


state 88

    (178) jump_statement -> GOTO . ID SEMICOLON

    ID              shift and go to state 169


state 89

    (179) jump_statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 170


state 90

    (180) jump_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 171


state 91

    (181) jump_statement -> RETURN . SEMICOLON
    (182) jump_statement -> RETURN . expression SEMICOLON
    (74) expression -> . assignment_expression
    (75) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 172
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    expression                     shift and go to state 173
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 93
    unary_expression               shift and go to state 94
    logical_or_expression          shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 92

    (74) expression -> assignment_expression .

    SEMICOLON       reduce using rule 74 (expression -> assignment_expression .)
    COMMA           reduce using rule 74 (expression -> assignment_expression .)
    RPAREN          reduce using rule 74 (expression -> assignment_expression .)
    COLON           reduce using rule 74 (expression -> assignment_expression .)
    RSQUAREBRACKET  reduce using rule 74 (expression -> assignment_expression .)


state 93

    (61) assignment_expression -> conditional_expression .

    SEMICOLON       reduce using rule 61 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 61 (assignment_expression -> conditional_expression .)
    RPAREN          reduce using rule 61 (assignment_expression -> conditional_expression .)
    RCURLYBRACKET   reduce using rule 61 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 61 (assignment_expression -> conditional_expression .)
    RSQUAREBRACKET  reduce using rule 61 (assignment_expression -> conditional_expression .)


state 94

    (62) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (29) cast_expression -> unary_expression .
    (63) assignment_operator -> . EQUALS
    (64) assignment_operator -> . MULTIPLYEQUAL
    (65) assignment_operator -> . DIVIDEEQUAL
    (66) assignment_operator -> . MODEQUAL
    (67) assignment_operator -> . PLUSEQUAL
    (68) assignment_operator -> . MINUSEQUAL
    (69) assignment_operator -> . LSHIFTEQUAL
    (70) assignment_operator -> . RSHIFTEQUAL
    (71) assignment_operator -> . ANDEQUAL
    (72) assignment_operator -> . XOREQUAL
    (73) assignment_operator -> . OREQUAL

    MULTIPLY        reduce using rule 29 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 29 (cast_expression -> unary_expression .)
    MOD             reduce using rule 29 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 29 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 29 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 29 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 29 (cast_expression -> unary_expression .)
    LESS            reduce using rule 29 (cast_expression -> unary_expression .)
    GREATER         reduce using rule 29 (cast_expression -> unary_expression .)
    LESSEQUAL       reduce using rule 29 (cast_expression -> unary_expression .)
    GREATEREQUAL    reduce using rule 29 (cast_expression -> unary_expression .)
    EQUAL           reduce using rule 29 (cast_expression -> unary_expression .)
    NOTEQUAL        reduce using rule 29 (cast_expression -> unary_expression .)
    AND             reduce using rule 29 (cast_expression -> unary_expression .)
    XOR             reduce using rule 29 (cast_expression -> unary_expression .)
    OR              reduce using rule 29 (cast_expression -> unary_expression .)
    LAND            reduce using rule 29 (cast_expression -> unary_expression .)
    CONDOP          reduce using rule 29 (cast_expression -> unary_expression .)
    LOR             reduce using rule 29 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 29 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 29 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 29 (cast_expression -> unary_expression .)
    RCURLYBRACKET   reduce using rule 29 (cast_expression -> unary_expression .)
    COLON           reduce using rule 29 (cast_expression -> unary_expression .)
    RSQUAREBRACKET  reduce using rule 29 (cast_expression -> unary_expression .)
    EQUALS          shift and go to state 175
    MULTIPLYEQUAL   shift and go to state 176
    DIVIDEEQUAL     shift and go to state 177
    MODEQUAL        shift and go to state 178
    PLUSEQUAL       shift and go to state 179
    MINUSEQUAL      shift and go to state 180
    LSHIFTEQUAL     shift and go to state 181
    RSHIFTEQUAL     shift and go to state 182
    ANDEQUAL        shift and go to state 183
    XOREQUAL        shift and go to state 184
    OREQUAL         shift and go to state 185

    assignment_operator            shift and go to state 174

state 95

    (59) conditional_expression -> logical_or_expression .
    (60) conditional_expression -> logical_or_expression . CONDOP expression COLON conditional_expression
    (58) logical_or_expression -> logical_or_expression . LOR logical_and_expression

    SEMICOLON       reduce using rule 59 (conditional_expression -> logical_or_expression .)
    COMMA           reduce using rule 59 (conditional_expression -> logical_or_expression .)
    RSQUAREBRACKET  reduce using rule 59 (conditional_expression -> logical_or_expression .)
    COLON           reduce using rule 59 (conditional_expression -> logical_or_expression .)
    RPAREN          reduce using rule 59 (conditional_expression -> logical_or_expression .)
    RCURLYBRACKET   reduce using rule 59 (conditional_expression -> logical_or_expression .)
    CONDOP          shift and go to state 186
    LOR             shift and go to state 187


state 96

    (17) unary_expression -> postfix_expression .
    (10) postfix_expression -> postfix_expression . LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> postfix_expression . LPAREN RPAREN
    (12) postfix_expression -> postfix_expression . PERIOD ID
    (13) postfix_expression -> postfix_expression . LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> postfix_expression . ARROW ID
    (15) postfix_expression -> postfix_expression . INCREMENT
    (16) postfix_expression -> postfix_expression . DECREMENT

    EQUALS          reduce using rule 17 (unary_expression -> postfix_expression .)
    MULTIPLYEQUAL   reduce using rule 17 (unary_expression -> postfix_expression .)
    DIVIDEEQUAL     reduce using rule 17 (unary_expression -> postfix_expression .)
    MODEQUAL        reduce using rule 17 (unary_expression -> postfix_expression .)
    PLUSEQUAL       reduce using rule 17 (unary_expression -> postfix_expression .)
    MINUSEQUAL      reduce using rule 17 (unary_expression -> postfix_expression .)
    LSHIFTEQUAL     reduce using rule 17 (unary_expression -> postfix_expression .)
    RSHIFTEQUAL     reduce using rule 17 (unary_expression -> postfix_expression .)
    ANDEQUAL        reduce using rule 17 (unary_expression -> postfix_expression .)
    XOREQUAL        reduce using rule 17 (unary_expression -> postfix_expression .)
    OREQUAL         reduce using rule 17 (unary_expression -> postfix_expression .)
    MULTIPLY        reduce using rule 17 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 17 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 17 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 17 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 17 (unary_expression -> postfix_expression .)
    LSHIFT          reduce using rule 17 (unary_expression -> postfix_expression .)
    RSHIFT          reduce using rule 17 (unary_expression -> postfix_expression .)
    LESS            reduce using rule 17 (unary_expression -> postfix_expression .)
    GREATER         reduce using rule 17 (unary_expression -> postfix_expression .)
    LESSEQUAL       reduce using rule 17 (unary_expression -> postfix_expression .)
    GREATEREQUAL    reduce using rule 17 (unary_expression -> postfix_expression .)
    EQUAL           reduce using rule 17 (unary_expression -> postfix_expression .)
    NOTEQUAL        reduce using rule 17 (unary_expression -> postfix_expression .)
    AND             reduce using rule 17 (unary_expression -> postfix_expression .)
    XOR             reduce using rule 17 (unary_expression -> postfix_expression .)
    OR              reduce using rule 17 (unary_expression -> postfix_expression .)
    LAND            reduce using rule 17 (unary_expression -> postfix_expression .)
    CONDOP          reduce using rule 17 (unary_expression -> postfix_expression .)
    LOR             reduce using rule 17 (unary_expression -> postfix_expression .)
    SEMICOLON       reduce using rule 17 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 17 (unary_expression -> postfix_expression .)
    RSQUAREBRACKET  reduce using rule 17 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 17 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 17 (unary_expression -> postfix_expression .)
    RCURLYBRACKET   reduce using rule 17 (unary_expression -> postfix_expression .)
    LSQUAREBRACKET  shift and go to state 188
    LPAREN          shift and go to state 189
    PERIOD          shift and go to state 190
    ARROW           shift and go to state 191
    INCREMENT       shift and go to state 192
    DECREMENT       shift and go to state 193


state 97

    (18) unary_expression -> INCREMENT . unary_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 195

    unary_expression               shift and go to state 194
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    primary_expression             shift and go to state 103

state 98

    (19) unary_expression -> DECREMENT . unary_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 195

    unary_expression               shift and go to state 196
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    primary_expression             shift and go to state 103

state 99

    (20) unary_expression -> unary_operator . cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 127
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114

    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 197
    unary_expression               shift and go to state 126
    postfix_expression             shift and go to state 96
    primary_expression             shift and go to state 103

state 100

    (31) multiplicative_expression -> cast_expression .

    MULTIPLY        reduce using rule 31 (multiplicative_expression -> cast_expression .)
    DIVIDE          reduce using rule 31 (multiplicative_expression -> cast_expression .)
    MOD             reduce using rule 31 (multiplicative_expression -> cast_expression .)
    PLUS            reduce using rule 31 (multiplicative_expression -> cast_expression .)
    MINUS           reduce using rule 31 (multiplicative_expression -> cast_expression .)
    LSHIFT          reduce using rule 31 (multiplicative_expression -> cast_expression .)
    RSHIFT          reduce using rule 31 (multiplicative_expression -> cast_expression .)
    LESS            reduce using rule 31 (multiplicative_expression -> cast_expression .)
    GREATER         reduce using rule 31 (multiplicative_expression -> cast_expression .)
    LESSEQUAL       reduce using rule 31 (multiplicative_expression -> cast_expression .)
    GREATEREQUAL    reduce using rule 31 (multiplicative_expression -> cast_expression .)
    EQUAL           reduce using rule 31 (multiplicative_expression -> cast_expression .)
    NOTEQUAL        reduce using rule 31 (multiplicative_expression -> cast_expression .)
    AND             reduce using rule 31 (multiplicative_expression -> cast_expression .)
    XOR             reduce using rule 31 (multiplicative_expression -> cast_expression .)
    OR              reduce using rule 31 (multiplicative_expression -> cast_expression .)
    LAND            reduce using rule 31 (multiplicative_expression -> cast_expression .)
    CONDOP          reduce using rule 31 (multiplicative_expression -> cast_expression .)
    LOR             reduce using rule 31 (multiplicative_expression -> cast_expression .)
    SEMICOLON       reduce using rule 31 (multiplicative_expression -> cast_expression .)
    COMMA           reduce using rule 31 (multiplicative_expression -> cast_expression .)
    RSQUAREBRACKET  reduce using rule 31 (multiplicative_expression -> cast_expression .)
    COLON           reduce using rule 31 (multiplicative_expression -> cast_expression .)
    RPAREN          reduce using rule 31 (multiplicative_expression -> cast_expression .)
    RCURLYBRACKET   reduce using rule 31 (multiplicative_expression -> cast_expression .)


state 101

    (21) unary_expression -> SIZEOF . unary_expression
    (22) unary_expression -> SIZEOF . LPAREN type_name RPAREN
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 199
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114

    unary_expression               shift and go to state 198
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    primary_expression             shift and go to state 103

state 102

    (57) logical_or_expression -> logical_and_expression .
    (56) logical_and_expression -> logical_and_expression . LAND inclusive_or_expression

    CONDOP          reduce using rule 57 (logical_or_expression -> logical_and_expression .)
    LOR             reduce using rule 57 (logical_or_expression -> logical_and_expression .)
    SEMICOLON       reduce using rule 57 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 57 (logical_or_expression -> logical_and_expression .)
    RSQUAREBRACKET  reduce using rule 57 (logical_or_expression -> logical_and_expression .)
    COLON           reduce using rule 57 (logical_or_expression -> logical_and_expression .)
    RPAREN          reduce using rule 57 (logical_or_expression -> logical_and_expression .)
    RCURLYBRACKET   reduce using rule 57 (logical_or_expression -> logical_and_expression .)
    LAND            shift and go to state 200


state 103

    (9) postfix_expression -> primary_expression .

    LSQUAREBRACKET  reduce using rule 9 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 9 (postfix_expression -> primary_expression .)
    PERIOD          reduce using rule 9 (postfix_expression -> primary_expression .)
    ARROW           reduce using rule 9 (postfix_expression -> primary_expression .)
    INCREMENT       reduce using rule 9 (postfix_expression -> primary_expression .)
    DECREMENT       reduce using rule 9 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 9 (postfix_expression -> primary_expression .)
    MULTIPLYEQUAL   reduce using rule 9 (postfix_expression -> primary_expression .)
    DIVIDEEQUAL     reduce using rule 9 (postfix_expression -> primary_expression .)
    MODEQUAL        reduce using rule 9 (postfix_expression -> primary_expression .)
    PLUSEQUAL       reduce using rule 9 (postfix_expression -> primary_expression .)
    MINUSEQUAL      reduce using rule 9 (postfix_expression -> primary_expression .)
    LSHIFTEQUAL     reduce using rule 9 (postfix_expression -> primary_expression .)
    RSHIFTEQUAL     reduce using rule 9 (postfix_expression -> primary_expression .)
    ANDEQUAL        reduce using rule 9 (postfix_expression -> primary_expression .)
    XOREQUAL        reduce using rule 9 (postfix_expression -> primary_expression .)
    OREQUAL         reduce using rule 9 (postfix_expression -> primary_expression .)
    MULTIPLY        reduce using rule 9 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 9 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 9 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 9 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 9 (postfix_expression -> primary_expression .)
    LSHIFT          reduce using rule 9 (postfix_expression -> primary_expression .)
    RSHIFT          reduce using rule 9 (postfix_expression -> primary_expression .)
    LESS            reduce using rule 9 (postfix_expression -> primary_expression .)
    GREATER         reduce using rule 9 (postfix_expression -> primary_expression .)
    LESSEQUAL       reduce using rule 9 (postfix_expression -> primary_expression .)
    GREATEREQUAL    reduce using rule 9 (postfix_expression -> primary_expression .)
    EQUAL           reduce using rule 9 (postfix_expression -> primary_expression .)
    NOTEQUAL        reduce using rule 9 (postfix_expression -> primary_expression .)
    AND             reduce using rule 9 (postfix_expression -> primary_expression .)
    XOR             reduce using rule 9 (postfix_expression -> primary_expression .)
    OR              reduce using rule 9 (postfix_expression -> primary_expression .)
    LAND            reduce using rule 9 (postfix_expression -> primary_expression .)
    CONDOP          reduce using rule 9 (postfix_expression -> primary_expression .)
    LOR             reduce using rule 9 (postfix_expression -> primary_expression .)
    SEMICOLON       reduce using rule 9 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 9 (postfix_expression -> primary_expression .)
    RSQUAREBRACKET  reduce using rule 9 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 9 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 9 (postfix_expression -> primary_expression .)
    RCURLYBRACKET   reduce using rule 9 (postfix_expression -> primary_expression .)


state 104

    (23) unary_operator -> AND .

    LPAREN          reduce using rule 23 (unary_operator -> AND .)
    INCREMENT       reduce using rule 23 (unary_operator -> AND .)
    DECREMENT       reduce using rule 23 (unary_operator -> AND .)
    SIZEOF          reduce using rule 23 (unary_operator -> AND .)
    AND             reduce using rule 23 (unary_operator -> AND .)
    MULTIPLY        reduce using rule 23 (unary_operator -> AND .)
    PLUS            reduce using rule 23 (unary_operator -> AND .)
    MINUS           reduce using rule 23 (unary_operator -> AND .)
    NOT             reduce using rule 23 (unary_operator -> AND .)
    LNOT            reduce using rule 23 (unary_operator -> AND .)
    ID              reduce using rule 23 (unary_operator -> AND .)
    INT_CONST       reduce using rule 23 (unary_operator -> AND .)
    FLOAT_CONST     reduce using rule 23 (unary_operator -> AND .)
    CHAR_CONST      reduce using rule 23 (unary_operator -> AND .)
    STRING_LITERAL  reduce using rule 23 (unary_operator -> AND .)


state 105

    (24) unary_operator -> MULTIPLY .

    LPAREN          reduce using rule 24 (unary_operator -> MULTIPLY .)
    INCREMENT       reduce using rule 24 (unary_operator -> MULTIPLY .)
    DECREMENT       reduce using rule 24 (unary_operator -> MULTIPLY .)
    SIZEOF          reduce using rule 24 (unary_operator -> MULTIPLY .)
    AND             reduce using rule 24 (unary_operator -> MULTIPLY .)
    MULTIPLY        reduce using rule 24 (unary_operator -> MULTIPLY .)
    PLUS            reduce using rule 24 (unary_operator -> MULTIPLY .)
    MINUS           reduce using rule 24 (unary_operator -> MULTIPLY .)
    NOT             reduce using rule 24 (unary_operator -> MULTIPLY .)
    LNOT            reduce using rule 24 (unary_operator -> MULTIPLY .)
    ID              reduce using rule 24 (unary_operator -> MULTIPLY .)
    INT_CONST       reduce using rule 24 (unary_operator -> MULTIPLY .)
    FLOAT_CONST     reduce using rule 24 (unary_operator -> MULTIPLY .)
    CHAR_CONST      reduce using rule 24 (unary_operator -> MULTIPLY .)
    STRING_LITERAL  reduce using rule 24 (unary_operator -> MULTIPLY .)


state 106

    (25) unary_operator -> PLUS .

    LPAREN          reduce using rule 25 (unary_operator -> PLUS .)
    INCREMENT       reduce using rule 25 (unary_operator -> PLUS .)
    DECREMENT       reduce using rule 25 (unary_operator -> PLUS .)
    SIZEOF          reduce using rule 25 (unary_operator -> PLUS .)
    AND             reduce using rule 25 (unary_operator -> PLUS .)
    MULTIPLY        reduce using rule 25 (unary_operator -> PLUS .)
    PLUS            reduce using rule 25 (unary_operator -> PLUS .)
    MINUS           reduce using rule 25 (unary_operator -> PLUS .)
    NOT             reduce using rule 25 (unary_operator -> PLUS .)
    LNOT            reduce using rule 25 (unary_operator -> PLUS .)
    ID              reduce using rule 25 (unary_operator -> PLUS .)
    INT_CONST       reduce using rule 25 (unary_operator -> PLUS .)
    FLOAT_CONST     reduce using rule 25 (unary_operator -> PLUS .)
    CHAR_CONST      reduce using rule 25 (unary_operator -> PLUS .)
    STRING_LITERAL  reduce using rule 25 (unary_operator -> PLUS .)


state 107

    (26) unary_operator -> MINUS .

    LPAREN          reduce using rule 26 (unary_operator -> MINUS .)
    INCREMENT       reduce using rule 26 (unary_operator -> MINUS .)
    DECREMENT       reduce using rule 26 (unary_operator -> MINUS .)
    SIZEOF          reduce using rule 26 (unary_operator -> MINUS .)
    AND             reduce using rule 26 (unary_operator -> MINUS .)
    MULTIPLY        reduce using rule 26 (unary_operator -> MINUS .)
    PLUS            reduce using rule 26 (unary_operator -> MINUS .)
    MINUS           reduce using rule 26 (unary_operator -> MINUS .)
    NOT             reduce using rule 26 (unary_operator -> MINUS .)
    LNOT            reduce using rule 26 (unary_operator -> MINUS .)
    ID              reduce using rule 26 (unary_operator -> MINUS .)
    INT_CONST       reduce using rule 26 (unary_operator -> MINUS .)
    FLOAT_CONST     reduce using rule 26 (unary_operator -> MINUS .)
    CHAR_CONST      reduce using rule 26 (unary_operator -> MINUS .)
    STRING_LITERAL  reduce using rule 26 (unary_operator -> MINUS .)


state 108

    (27) unary_operator -> NOT .

    LPAREN          reduce using rule 27 (unary_operator -> NOT .)
    INCREMENT       reduce using rule 27 (unary_operator -> NOT .)
    DECREMENT       reduce using rule 27 (unary_operator -> NOT .)
    SIZEOF          reduce using rule 27 (unary_operator -> NOT .)
    AND             reduce using rule 27 (unary_operator -> NOT .)
    MULTIPLY        reduce using rule 27 (unary_operator -> NOT .)
    PLUS            reduce using rule 27 (unary_operator -> NOT .)
    MINUS           reduce using rule 27 (unary_operator -> NOT .)
    NOT             reduce using rule 27 (unary_operator -> NOT .)
    LNOT            reduce using rule 27 (unary_operator -> NOT .)
    ID              reduce using rule 27 (unary_operator -> NOT .)
    INT_CONST       reduce using rule 27 (unary_operator -> NOT .)
    FLOAT_CONST     reduce using rule 27 (unary_operator -> NOT .)
    CHAR_CONST      reduce using rule 27 (unary_operator -> NOT .)
    STRING_LITERAL  reduce using rule 27 (unary_operator -> NOT .)


state 109

    (28) unary_operator -> LNOT .

    LPAREN          reduce using rule 28 (unary_operator -> LNOT .)
    INCREMENT       reduce using rule 28 (unary_operator -> LNOT .)
    DECREMENT       reduce using rule 28 (unary_operator -> LNOT .)
    SIZEOF          reduce using rule 28 (unary_operator -> LNOT .)
    AND             reduce using rule 28 (unary_operator -> LNOT .)
    MULTIPLY        reduce using rule 28 (unary_operator -> LNOT .)
    PLUS            reduce using rule 28 (unary_operator -> LNOT .)
    MINUS           reduce using rule 28 (unary_operator -> LNOT .)
    NOT             reduce using rule 28 (unary_operator -> LNOT .)
    LNOT            reduce using rule 28 (unary_operator -> LNOT .)
    ID              reduce using rule 28 (unary_operator -> LNOT .)
    INT_CONST       reduce using rule 28 (unary_operator -> LNOT .)
    FLOAT_CONST     reduce using rule 28 (unary_operator -> LNOT .)
    CHAR_CONST      reduce using rule 28 (unary_operator -> LNOT .)
    STRING_LITERAL  reduce using rule 28 (unary_operator -> LNOT .)


state 110

    (55) logical_and_expression -> inclusive_or_expression .
    (54) inclusive_or_expression -> inclusive_or_expression . OR exclusive_or_expression

    LAND            reduce using rule 55 (logical_and_expression -> inclusive_or_expression .)
    CONDOP          reduce using rule 55 (logical_and_expression -> inclusive_or_expression .)
    LOR             reduce using rule 55 (logical_and_expression -> inclusive_or_expression .)
    SEMICOLON       reduce using rule 55 (logical_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 55 (logical_and_expression -> inclusive_or_expression .)
    RSQUAREBRACKET  reduce using rule 55 (logical_and_expression -> inclusive_or_expression .)
    COLON           reduce using rule 55 (logical_and_expression -> inclusive_or_expression .)
    RPAREN          reduce using rule 55 (logical_and_expression -> inclusive_or_expression .)
    RCURLYBRACKET   reduce using rule 55 (logical_and_expression -> inclusive_or_expression .)
    OR              shift and go to state 201


state 111

    (2) primary_expression -> INT_CONST .

    LSQUAREBRACKET  reduce using rule 2 (primary_expression -> INT_CONST .)
    LPAREN          reduce using rule 2 (primary_expression -> INT_CONST .)
    PERIOD          reduce using rule 2 (primary_expression -> INT_CONST .)
    ARROW           reduce using rule 2 (primary_expression -> INT_CONST .)
    INCREMENT       reduce using rule 2 (primary_expression -> INT_CONST .)
    DECREMENT       reduce using rule 2 (primary_expression -> INT_CONST .)
    EQUALS          reduce using rule 2 (primary_expression -> INT_CONST .)
    MULTIPLYEQUAL   reduce using rule 2 (primary_expression -> INT_CONST .)
    DIVIDEEQUAL     reduce using rule 2 (primary_expression -> INT_CONST .)
    MODEQUAL        reduce using rule 2 (primary_expression -> INT_CONST .)
    PLUSEQUAL       reduce using rule 2 (primary_expression -> INT_CONST .)
    MINUSEQUAL      reduce using rule 2 (primary_expression -> INT_CONST .)
    LSHIFTEQUAL     reduce using rule 2 (primary_expression -> INT_CONST .)
    RSHIFTEQUAL     reduce using rule 2 (primary_expression -> INT_CONST .)
    ANDEQUAL        reduce using rule 2 (primary_expression -> INT_CONST .)
    XOREQUAL        reduce using rule 2 (primary_expression -> INT_CONST .)
    OREQUAL         reduce using rule 2 (primary_expression -> INT_CONST .)
    MULTIPLY        reduce using rule 2 (primary_expression -> INT_CONST .)
    DIVIDE          reduce using rule 2 (primary_expression -> INT_CONST .)
    MOD             reduce using rule 2 (primary_expression -> INT_CONST .)
    PLUS            reduce using rule 2 (primary_expression -> INT_CONST .)
    MINUS           reduce using rule 2 (primary_expression -> INT_CONST .)
    LSHIFT          reduce using rule 2 (primary_expression -> INT_CONST .)
    RSHIFT          reduce using rule 2 (primary_expression -> INT_CONST .)
    LESS            reduce using rule 2 (primary_expression -> INT_CONST .)
    GREATER         reduce using rule 2 (primary_expression -> INT_CONST .)
    LESSEQUAL       reduce using rule 2 (primary_expression -> INT_CONST .)
    GREATEREQUAL    reduce using rule 2 (primary_expression -> INT_CONST .)
    EQUAL           reduce using rule 2 (primary_expression -> INT_CONST .)
    NOTEQUAL        reduce using rule 2 (primary_expression -> INT_CONST .)
    AND             reduce using rule 2 (primary_expression -> INT_CONST .)
    XOR             reduce using rule 2 (primary_expression -> INT_CONST .)
    OR              reduce using rule 2 (primary_expression -> INT_CONST .)
    LAND            reduce using rule 2 (primary_expression -> INT_CONST .)
    CONDOP          reduce using rule 2 (primary_expression -> INT_CONST .)
    LOR             reduce using rule 2 (primary_expression -> INT_CONST .)
    SEMICOLON       reduce using rule 2 (primary_expression -> INT_CONST .)
    COMMA           reduce using rule 2 (primary_expression -> INT_CONST .)
    RSQUAREBRACKET  reduce using rule 2 (primary_expression -> INT_CONST .)
    COLON           reduce using rule 2 (primary_expression -> INT_CONST .)
    RPAREN          reduce using rule 2 (primary_expression -> INT_CONST .)
    RCURLYBRACKET   reduce using rule 2 (primary_expression -> INT_CONST .)


state 112

    (3) primary_expression -> FLOAT_CONST .

    LSQUAREBRACKET  reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    LPAREN          reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    PERIOD          reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    ARROW           reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    INCREMENT       reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    DECREMENT       reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    EQUALS          reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    MULTIPLYEQUAL   reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    DIVIDEEQUAL     reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    MODEQUAL        reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    PLUSEQUAL       reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    MINUSEQUAL      reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    LSHIFTEQUAL     reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    RSHIFTEQUAL     reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    ANDEQUAL        reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    XOREQUAL        reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    OREQUAL         reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    MULTIPLY        reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    DIVIDE          reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    MOD             reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    PLUS            reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    MINUS           reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    LSHIFT          reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    RSHIFT          reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    LESS            reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    GREATER         reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    LESSEQUAL       reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    GREATEREQUAL    reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    EQUAL           reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    NOTEQUAL        reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    AND             reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    XOR             reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    OR              reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    LAND            reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    CONDOP          reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    LOR             reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    SEMICOLON       reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    COMMA           reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    RSQUAREBRACKET  reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    COLON           reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    RPAREN          reduce using rule 3 (primary_expression -> FLOAT_CONST .)
    RCURLYBRACKET   reduce using rule 3 (primary_expression -> FLOAT_CONST .)


state 113

    (4) primary_expression -> CHAR_CONST .

    LSQUAREBRACKET  reduce using rule 4 (primary_expression -> CHAR_CONST .)
    LPAREN          reduce using rule 4 (primary_expression -> CHAR_CONST .)
    PERIOD          reduce using rule 4 (primary_expression -> CHAR_CONST .)
    ARROW           reduce using rule 4 (primary_expression -> CHAR_CONST .)
    INCREMENT       reduce using rule 4 (primary_expression -> CHAR_CONST .)
    DECREMENT       reduce using rule 4 (primary_expression -> CHAR_CONST .)
    EQUALS          reduce using rule 4 (primary_expression -> CHAR_CONST .)
    MULTIPLYEQUAL   reduce using rule 4 (primary_expression -> CHAR_CONST .)
    DIVIDEEQUAL     reduce using rule 4 (primary_expression -> CHAR_CONST .)
    MODEQUAL        reduce using rule 4 (primary_expression -> CHAR_CONST .)
    PLUSEQUAL       reduce using rule 4 (primary_expression -> CHAR_CONST .)
    MINUSEQUAL      reduce using rule 4 (primary_expression -> CHAR_CONST .)
    LSHIFTEQUAL     reduce using rule 4 (primary_expression -> CHAR_CONST .)
    RSHIFTEQUAL     reduce using rule 4 (primary_expression -> CHAR_CONST .)
    ANDEQUAL        reduce using rule 4 (primary_expression -> CHAR_CONST .)
    XOREQUAL        reduce using rule 4 (primary_expression -> CHAR_CONST .)
    OREQUAL         reduce using rule 4 (primary_expression -> CHAR_CONST .)
    MULTIPLY        reduce using rule 4 (primary_expression -> CHAR_CONST .)
    DIVIDE          reduce using rule 4 (primary_expression -> CHAR_CONST .)
    MOD             reduce using rule 4 (primary_expression -> CHAR_CONST .)
    PLUS            reduce using rule 4 (primary_expression -> CHAR_CONST .)
    MINUS           reduce using rule 4 (primary_expression -> CHAR_CONST .)
    LSHIFT          reduce using rule 4 (primary_expression -> CHAR_CONST .)
    RSHIFT          reduce using rule 4 (primary_expression -> CHAR_CONST .)
    LESS            reduce using rule 4 (primary_expression -> CHAR_CONST .)
    GREATER         reduce using rule 4 (primary_expression -> CHAR_CONST .)
    LESSEQUAL       reduce using rule 4 (primary_expression -> CHAR_CONST .)
    GREATEREQUAL    reduce using rule 4 (primary_expression -> CHAR_CONST .)
    EQUAL           reduce using rule 4 (primary_expression -> CHAR_CONST .)
    NOTEQUAL        reduce using rule 4 (primary_expression -> CHAR_CONST .)
    AND             reduce using rule 4 (primary_expression -> CHAR_CONST .)
    XOR             reduce using rule 4 (primary_expression -> CHAR_CONST .)
    OR              reduce using rule 4 (primary_expression -> CHAR_CONST .)
    LAND            reduce using rule 4 (primary_expression -> CHAR_CONST .)
    CONDOP          reduce using rule 4 (primary_expression -> CHAR_CONST .)
    LOR             reduce using rule 4 (primary_expression -> CHAR_CONST .)
    SEMICOLON       reduce using rule 4 (primary_expression -> CHAR_CONST .)
    COMMA           reduce using rule 4 (primary_expression -> CHAR_CONST .)
    RSQUAREBRACKET  reduce using rule 4 (primary_expression -> CHAR_CONST .)
    COLON           reduce using rule 4 (primary_expression -> CHAR_CONST .)
    RPAREN          reduce using rule 4 (primary_expression -> CHAR_CONST .)
    RCURLYBRACKET   reduce using rule 4 (primary_expression -> CHAR_CONST .)


state 114

    (5) primary_expression -> STRING_LITERAL .

    LSQUAREBRACKET  reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    LPAREN          reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    PERIOD          reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    ARROW           reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    INCREMENT       reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    DECREMENT       reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    EQUALS          reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    MULTIPLYEQUAL   reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    DIVIDEEQUAL     reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    MODEQUAL        reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    PLUSEQUAL       reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    MINUSEQUAL      reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    ANDEQUAL        reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    XOREQUAL        reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    OREQUAL         reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    MULTIPLY        reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    DIVIDE          reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    MOD             reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    PLUS            reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    MINUS           reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    LSHIFT          reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    RSHIFT          reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    LESS            reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    GREATER         reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    LESSEQUAL       reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    GREATEREQUAL    reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    EQUAL           reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    NOTEQUAL        reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    AND             reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    XOR             reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    OR              reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    LAND            reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    CONDOP          reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    LOR             reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    COMMA           reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    RSQUAREBRACKET  reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    COLON           reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    RPAREN          reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    RCURLYBRACKET   reduce using rule 5 (primary_expression -> STRING_LITERAL .)


state 115

    (53) inclusive_or_expression -> exclusive_or_expression .
    (52) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR              reduce using rule 53 (inclusive_or_expression -> exclusive_or_expression .)
    LAND            reduce using rule 53 (inclusive_or_expression -> exclusive_or_expression .)
    CONDOP          reduce using rule 53 (inclusive_or_expression -> exclusive_or_expression .)
    LOR             reduce using rule 53 (inclusive_or_expression -> exclusive_or_expression .)
    SEMICOLON       reduce using rule 53 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 53 (inclusive_or_expression -> exclusive_or_expression .)
    RSQUAREBRACKET  reduce using rule 53 (inclusive_or_expression -> exclusive_or_expression .)
    COLON           reduce using rule 53 (inclusive_or_expression -> exclusive_or_expression .)
    RPAREN          reduce using rule 53 (inclusive_or_expression -> exclusive_or_expression .)
    RCURLYBRACKET   reduce using rule 53 (inclusive_or_expression -> exclusive_or_expression .)
    XOR             shift and go to state 202


state 116

    (51) exclusive_or_expression -> and_expression .
    (50) and_expression -> and_expression . AND equality_expression

    XOR             reduce using rule 51 (exclusive_or_expression -> and_expression .)
    OR              reduce using rule 51 (exclusive_or_expression -> and_expression .)
    LAND            reduce using rule 51 (exclusive_or_expression -> and_expression .)
    CONDOP          reduce using rule 51 (exclusive_or_expression -> and_expression .)
    LOR             reduce using rule 51 (exclusive_or_expression -> and_expression .)
    SEMICOLON       reduce using rule 51 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 51 (exclusive_or_expression -> and_expression .)
    RSQUAREBRACKET  reduce using rule 51 (exclusive_or_expression -> and_expression .)
    COLON           reduce using rule 51 (exclusive_or_expression -> and_expression .)
    RPAREN          reduce using rule 51 (exclusive_or_expression -> and_expression .)
    RCURLYBRACKET   reduce using rule 51 (exclusive_or_expression -> and_expression .)
    AND             shift and go to state 203


state 117

    (49) and_expression -> equality_expression .
    (47) equality_expression -> equality_expression . EQUAL relational_expression
    (48) equality_expression -> equality_expression . NOTEQUAL relational_expression

    AND             reduce using rule 49 (and_expression -> equality_expression .)
    XOR             reduce using rule 49 (and_expression -> equality_expression .)
    OR              reduce using rule 49 (and_expression -> equality_expression .)
    LAND            reduce using rule 49 (and_expression -> equality_expression .)
    CONDOP          reduce using rule 49 (and_expression -> equality_expression .)
    LOR             reduce using rule 49 (and_expression -> equality_expression .)
    SEMICOLON       reduce using rule 49 (and_expression -> equality_expression .)
    COMMA           reduce using rule 49 (and_expression -> equality_expression .)
    RSQUAREBRACKET  reduce using rule 49 (and_expression -> equality_expression .)
    COLON           reduce using rule 49 (and_expression -> equality_expression .)
    RPAREN          reduce using rule 49 (and_expression -> equality_expression .)
    RCURLYBRACKET   reduce using rule 49 (and_expression -> equality_expression .)
    EQUAL           shift and go to state 204
    NOTEQUAL        shift and go to state 205


state 118

    (46) equality_expression -> relational_expression .
    (42) relational_expression -> relational_expression . LESS shift_expression
    (43) relational_expression -> relational_expression . GREATER shift_expression
    (44) relational_expression -> relational_expression . LESSEQUAL shift_expression
    (45) relational_expression -> relational_expression . GREATEREQUAL shift_expression

    EQUAL           reduce using rule 46 (equality_expression -> relational_expression .)
    NOTEQUAL        reduce using rule 46 (equality_expression -> relational_expression .)
    AND             reduce using rule 46 (equality_expression -> relational_expression .)
    XOR             reduce using rule 46 (equality_expression -> relational_expression .)
    OR              reduce using rule 46 (equality_expression -> relational_expression .)
    LAND            reduce using rule 46 (equality_expression -> relational_expression .)
    CONDOP          reduce using rule 46 (equality_expression -> relational_expression .)
    LOR             reduce using rule 46 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 46 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 46 (equality_expression -> relational_expression .)
    RSQUAREBRACKET  reduce using rule 46 (equality_expression -> relational_expression .)
    COLON           reduce using rule 46 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 46 (equality_expression -> relational_expression .)
    RCURLYBRACKET   reduce using rule 46 (equality_expression -> relational_expression .)
    LESS            shift and go to state 206
    GREATER         shift and go to state 207
    LESSEQUAL       shift and go to state 208
    GREATEREQUAL    shift and go to state 209


state 119

    (41) relational_expression -> shift_expression .
    (39) shift_expression -> shift_expression . LSHIFT additive_expression
    (40) shift_expression -> shift_expression . RSHIFT additive_expression

    LESS            reduce using rule 41 (relational_expression -> shift_expression .)
    GREATER         reduce using rule 41 (relational_expression -> shift_expression .)
    LESSEQUAL       reduce using rule 41 (relational_expression -> shift_expression .)
    GREATEREQUAL    reduce using rule 41 (relational_expression -> shift_expression .)
    EQUAL           reduce using rule 41 (relational_expression -> shift_expression .)
    NOTEQUAL        reduce using rule 41 (relational_expression -> shift_expression .)
    AND             reduce using rule 41 (relational_expression -> shift_expression .)
    XOR             reduce using rule 41 (relational_expression -> shift_expression .)
    OR              reduce using rule 41 (relational_expression -> shift_expression .)
    LAND            reduce using rule 41 (relational_expression -> shift_expression .)
    CONDOP          reduce using rule 41 (relational_expression -> shift_expression .)
    LOR             reduce using rule 41 (relational_expression -> shift_expression .)
    SEMICOLON       reduce using rule 41 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 41 (relational_expression -> shift_expression .)
    RSQUAREBRACKET  reduce using rule 41 (relational_expression -> shift_expression .)
    COLON           reduce using rule 41 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 41 (relational_expression -> shift_expression .)
    RCURLYBRACKET   reduce using rule 41 (relational_expression -> shift_expression .)
    LSHIFT          shift and go to state 210
    RSHIFT          shift and go to state 211


state 120

    (38) shift_expression -> additive_expression .
    (36) additive_expression -> additive_expression . PLUS multiplicative_expression
    (37) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 38 (shift_expression -> additive_expression .)
    RSHIFT          reduce using rule 38 (shift_expression -> additive_expression .)
    LESS            reduce using rule 38 (shift_expression -> additive_expression .)
    GREATER         reduce using rule 38 (shift_expression -> additive_expression .)
    LESSEQUAL       reduce using rule 38 (shift_expression -> additive_expression .)
    GREATEREQUAL    reduce using rule 38 (shift_expression -> additive_expression .)
    EQUAL           reduce using rule 38 (shift_expression -> additive_expression .)
    NOTEQUAL        reduce using rule 38 (shift_expression -> additive_expression .)
    AND             reduce using rule 38 (shift_expression -> additive_expression .)
    XOR             reduce using rule 38 (shift_expression -> additive_expression .)
    OR              reduce using rule 38 (shift_expression -> additive_expression .)
    LAND            reduce using rule 38 (shift_expression -> additive_expression .)
    CONDOP          reduce using rule 38 (shift_expression -> additive_expression .)
    LOR             reduce using rule 38 (shift_expression -> additive_expression .)
    SEMICOLON       reduce using rule 38 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 38 (shift_expression -> additive_expression .)
    RSQUAREBRACKET  reduce using rule 38 (shift_expression -> additive_expression .)
    COLON           reduce using rule 38 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 38 (shift_expression -> additive_expression .)
    RCURLYBRACKET   reduce using rule 38 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213


state 121

    (35) additive_expression -> multiplicative_expression .
    (32) multiplicative_expression -> multiplicative_expression . MULTIPLY cast_expression
    (33) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (34) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 35 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 35 (additive_expression -> multiplicative_expression .)
    LSHIFT          reduce using rule 35 (additive_expression -> multiplicative_expression .)
    RSHIFT          reduce using rule 35 (additive_expression -> multiplicative_expression .)
    LESS            reduce using rule 35 (additive_expression -> multiplicative_expression .)
    GREATER         reduce using rule 35 (additive_expression -> multiplicative_expression .)
    LESSEQUAL       reduce using rule 35 (additive_expression -> multiplicative_expression .)
    GREATEREQUAL    reduce using rule 35 (additive_expression -> multiplicative_expression .)
    EQUAL           reduce using rule 35 (additive_expression -> multiplicative_expression .)
    NOTEQUAL        reduce using rule 35 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 35 (additive_expression -> multiplicative_expression .)
    XOR             reduce using rule 35 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 35 (additive_expression -> multiplicative_expression .)
    LAND            reduce using rule 35 (additive_expression -> multiplicative_expression .)
    CONDOP          reduce using rule 35 (additive_expression -> multiplicative_expression .)
    LOR             reduce using rule 35 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 35 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 35 (additive_expression -> multiplicative_expression .)
    RSQUAREBRACKET  reduce using rule 35 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 35 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 35 (additive_expression -> multiplicative_expression .)
    RCURLYBRACKET   reduce using rule 35 (additive_expression -> multiplicative_expression .)
    MULTIPLY        shift and go to state 214
    DIVIDE          shift and go to state 215
    MOD             shift and go to state 216


state 122

    (87) init_declarator -> declarator .
    (88) init_declarator -> declarator . EQUALS initializer

    SEMICOLON       reduce using rule 87 (init_declarator -> declarator .)
    COMMA           reduce using rule 87 (init_declarator -> declarator .)
    EQUALS          shift and go to state 62


state 123

    (114) direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression . RSQUAREBRACKET

    RSQUAREBRACKET  shift and go to state 217


state 124

    (115) direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .

    LSQUAREBRACKET  reduce using rule 115 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    LPAREN          reduce using rule 115 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    LCURLYBRACKET   reduce using rule 115 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    TYPEDEF         reduce using rule 115 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    EXTERN          reduce using rule 115 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    STATIC          reduce using rule 115 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    AUTO            reduce using rule 115 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    REGISTER        reduce using rule 115 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    VOID            reduce using rule 115 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    CHAR            reduce using rule 115 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    SHORT           reduce using rule 115 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    INT             reduce using rule 115 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    LONG            reduce using rule 115 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    FLOAT           reduce using rule 115 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    DOUBLE          reduce using rule 115 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    SIGNED          reduce using rule 115 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    UNSIGNED        reduce using rule 115 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    CONST           reduce using rule 115 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    VOLATILE        reduce using rule 115 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    EQUALS          reduce using rule 115 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    SEMICOLON       reduce using rule 115 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    COMMA           reduce using rule 115 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    RPAREN          reduce using rule 115 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)


state 125

    (76) constant_expression -> conditional_expression .

    RSQUAREBRACKET  reduce using rule 76 (constant_expression -> conditional_expression .)
    COLON           reduce using rule 76 (constant_expression -> conditional_expression .)
    RPAREN          reduce using rule 76 (constant_expression -> conditional_expression .)


state 126

    (29) cast_expression -> unary_expression .

    MULTIPLY        reduce using rule 29 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 29 (cast_expression -> unary_expression .)
    MOD             reduce using rule 29 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 29 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 29 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 29 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 29 (cast_expression -> unary_expression .)
    LESS            reduce using rule 29 (cast_expression -> unary_expression .)
    GREATER         reduce using rule 29 (cast_expression -> unary_expression .)
    LESSEQUAL       reduce using rule 29 (cast_expression -> unary_expression .)
    GREATEREQUAL    reduce using rule 29 (cast_expression -> unary_expression .)
    EQUAL           reduce using rule 29 (cast_expression -> unary_expression .)
    NOTEQUAL        reduce using rule 29 (cast_expression -> unary_expression .)
    AND             reduce using rule 29 (cast_expression -> unary_expression .)
    XOR             reduce using rule 29 (cast_expression -> unary_expression .)
    OR              reduce using rule 29 (cast_expression -> unary_expression .)
    LAND            reduce using rule 29 (cast_expression -> unary_expression .)
    CONDOP          reduce using rule 29 (cast_expression -> unary_expression .)
    LOR             reduce using rule 29 (cast_expression -> unary_expression .)
    RSQUAREBRACKET  reduce using rule 29 (cast_expression -> unary_expression .)
    COLON           reduce using rule 29 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 29 (cast_expression -> unary_expression .)
    MULTIPLYEQUAL   reduce using rule 29 (cast_expression -> unary_expression .)
    DIVIDEEQUAL     reduce using rule 29 (cast_expression -> unary_expression .)
    MODEQUAL        reduce using rule 29 (cast_expression -> unary_expression .)
    PLUSEQUAL       reduce using rule 29 (cast_expression -> unary_expression .)
    MINUSEQUAL      reduce using rule 29 (cast_expression -> unary_expression .)
    LSHIFTEQUAL     reduce using rule 29 (cast_expression -> unary_expression .)
    RSHIFTEQUAL     reduce using rule 29 (cast_expression -> unary_expression .)
    ANDEQUAL        reduce using rule 29 (cast_expression -> unary_expression .)
    XOREQUAL        reduce using rule 29 (cast_expression -> unary_expression .)
    OREQUAL         reduce using rule 29 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 29 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 29 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 29 (cast_expression -> unary_expression .)
    RCURLYBRACKET   reduce using rule 29 (cast_expression -> unary_expression .)


state 127

    (30) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (6) primary_expression -> LPAREN . expression RPAREN
    (134) type_name -> . specifier_qualifier_list
    (135) type_name -> . specifier_qualifier_list abstract_declarator
    (74) expression -> . assignment_expression
    (75) expression -> . expression COMMA assignment_expression
    (104) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (105) specifier_qualifier_list -> . type_specifier
    (106) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (107) specifier_qualifier_list -> . type_qualifier
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . type_name
    (108) type_qualifier -> . CONST
    (109) type_qualifier -> . VOLATILE
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    CONST           shift and go to state 27
    VOLATILE        shift and go to state 28
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    type_name                      shift and go to state 162
    cast_expression                shift and go to state 100
    expression                     shift and go to state 161
    specifier_qualifier_list       shift and go to state 32
    assignment_expression          shift and go to state 92
    type_specifier                 shift and go to state 163
    type_qualifier                 shift and go to state 164
    conditional_expression         shift and go to state 93
    unary_expression               shift and go to state 94
    logical_or_expression          shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 128

    (1) primary_expression -> ID .

    LSQUAREBRACKET  reduce using rule 1 (primary_expression -> ID .)
    LPAREN          reduce using rule 1 (primary_expression -> ID .)
    PERIOD          reduce using rule 1 (primary_expression -> ID .)
    ARROW           reduce using rule 1 (primary_expression -> ID .)
    INCREMENT       reduce using rule 1 (primary_expression -> ID .)
    DECREMENT       reduce using rule 1 (primary_expression -> ID .)
    MULTIPLY        reduce using rule 1 (primary_expression -> ID .)
    DIVIDE          reduce using rule 1 (primary_expression -> ID .)
    MOD             reduce using rule 1 (primary_expression -> ID .)
    PLUS            reduce using rule 1 (primary_expression -> ID .)
    MINUS           reduce using rule 1 (primary_expression -> ID .)
    LSHIFT          reduce using rule 1 (primary_expression -> ID .)
    RSHIFT          reduce using rule 1 (primary_expression -> ID .)
    LESS            reduce using rule 1 (primary_expression -> ID .)
    GREATER         reduce using rule 1 (primary_expression -> ID .)
    LESSEQUAL       reduce using rule 1 (primary_expression -> ID .)
    GREATEREQUAL    reduce using rule 1 (primary_expression -> ID .)
    EQUAL           reduce using rule 1 (primary_expression -> ID .)
    NOTEQUAL        reduce using rule 1 (primary_expression -> ID .)
    AND             reduce using rule 1 (primary_expression -> ID .)
    XOR             reduce using rule 1 (primary_expression -> ID .)
    OR              reduce using rule 1 (primary_expression -> ID .)
    LAND            reduce using rule 1 (primary_expression -> ID .)
    CONDOP          reduce using rule 1 (primary_expression -> ID .)
    LOR             reduce using rule 1 (primary_expression -> ID .)
    RSQUAREBRACKET  reduce using rule 1 (primary_expression -> ID .)
    EQUALS          reduce using rule 1 (primary_expression -> ID .)
    MULTIPLYEQUAL   reduce using rule 1 (primary_expression -> ID .)
    DIVIDEEQUAL     reduce using rule 1 (primary_expression -> ID .)
    MODEQUAL        reduce using rule 1 (primary_expression -> ID .)
    PLUSEQUAL       reduce using rule 1 (primary_expression -> ID .)
    MINUSEQUAL      reduce using rule 1 (primary_expression -> ID .)
    LSHIFTEQUAL     reduce using rule 1 (primary_expression -> ID .)
    RSHIFTEQUAL     reduce using rule 1 (primary_expression -> ID .)
    ANDEQUAL        reduce using rule 1 (primary_expression -> ID .)
    XOREQUAL        reduce using rule 1 (primary_expression -> ID .)
    OREQUAL         reduce using rule 1 (primary_expression -> ID .)
    SEMICOLON       reduce using rule 1 (primary_expression -> ID .)
    COMMA           reduce using rule 1 (primary_expression -> ID .)
    COLON           reduce using rule 1 (primary_expression -> ID .)
    RPAREN          reduce using rule 1 (primary_expression -> ID .)
    RCURLYBRACKET   reduce using rule 1 (primary_expression -> ID .)


state 129

    (116) direct_declarator -> direct_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 218


state 130

    (118) direct_declarator -> direct_declarator LPAREN RPAREN .

    LSQUAREBRACKET  reduce using rule 118 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LPAREN          reduce using rule 118 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LCURLYBRACKET   reduce using rule 118 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    TYPEDEF         reduce using rule 118 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    EXTERN          reduce using rule 118 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    STATIC          reduce using rule 118 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    AUTO            reduce using rule 118 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    REGISTER        reduce using rule 118 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    VOID            reduce using rule 118 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    CHAR            reduce using rule 118 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SHORT           reduce using rule 118 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    INT             reduce using rule 118 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LONG            reduce using rule 118 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    FLOAT           reduce using rule 118 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    DOUBLE          reduce using rule 118 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SIGNED          reduce using rule 118 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    UNSIGNED        reduce using rule 118 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    CONST           reduce using rule 118 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    VOLATILE        reduce using rule 118 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    EQUALS          reduce using rule 118 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SEMICOLON       reduce using rule 118 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    COMMA           reduce using rule 118 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    RPAREN          reduce using rule 118 (direct_declarator -> direct_declarator LPAREN RPAREN .)


state 131

    (117) direct_declarator -> direct_declarator LPAREN identifier_list . RPAREN
    (133) identifier_list -> identifier_list . COMMA ID

    RPAREN          shift and go to state 219
    COMMA           shift and go to state 220


state 132

    (125) parameter_type_list -> parameter_list .
    (126) parameter_type_list -> parameter_list . COMMA ELLIPSIS
    (128) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          reduce using rule 125 (parameter_type_list -> parameter_list .)
    COMMA           shift and go to state 221


state 133

    (132) identifier_list -> ID .

    RPAREN          reduce using rule 132 (identifier_list -> ID .)
    COMMA           reduce using rule 132 (identifier_list -> ID .)


state 134

    (127) parameter_list -> parameter_declaration .

    COMMA           reduce using rule 127 (parameter_list -> parameter_declaration .)
    RPAREN          reduce using rule 127 (parameter_list -> parameter_declaration .)


state 135

    (129) parameter_declaration -> declaration_specifiers . declarator
    (130) parameter_declaration -> declaration_specifiers . abstract_declarator
    (131) parameter_declaration -> declaration_specifiers .
    (110) declarator -> . pointer direct_declarator
    (111) declarator -> . direct_declarator
    (136) abstract_declarator -> . pointer
    (137) abstract_declarator -> . direct_abstract_declarator
    (138) abstract_declarator -> . pointer direct_abstract_declarator
    (121) pointer -> . MULTIPLY
    (122) pointer -> . MULTIPLY type_qualifier_list
    (123) pointer -> . MULTIPLY type_qualifier_list pointer
    (124) pointer -> . MULTIPLY pointer
    (112) direct_declarator -> . ID
    (113) direct_declarator -> . LPAREN declarator RPAREN
    (114) direct_declarator -> . direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (115) direct_declarator -> . direct_declarator LSQUAREBRACKET RSQUAREBRACKET
    (116) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (117) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (118) direct_declarator -> . direct_declarator LPAREN RPAREN
    (139) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (140) direct_abstract_declarator -> . LSQUAREBRACKET RSQUAREBRACKET
    (141) direct_abstract_declarator -> . LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (142) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (143) direct_abstract_declarator -> . direct_abstract_declarator LPAREN constant_expression RPAREN
    (144) direct_abstract_declarator -> . LPAREN RPAREN
    (145) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (146) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

    COMMA           reduce using rule 131 (parameter_declaration -> declaration_specifiers .)
    RPAREN          reduce using rule 131 (parameter_declaration -> declaration_specifiers .)
    MULTIPLY        shift and go to state 29
    ID              shift and go to state 30
    LPAREN          shift and go to state 225
    LSQUAREBRACKET  shift and go to state 59

    declarator                     shift and go to state 222
    abstract_declarator            shift and go to state 223
    pointer                        shift and go to state 224
    direct_declarator              shift and go to state 11
    direct_abstract_declarator     shift and go to state 57

state 136

    (123) pointer -> MULTIPLY type_qualifier_list pointer .

    ID              reduce using rule 123 (pointer -> MULTIPLY type_qualifier_list pointer .)
    LPAREN          reduce using rule 123 (pointer -> MULTIPLY type_qualifier_list pointer .)
    LSQUAREBRACKET  reduce using rule 123 (pointer -> MULTIPLY type_qualifier_list pointer .)
    TYPEDEF         reduce using rule 123 (pointer -> MULTIPLY type_qualifier_list pointer .)
    EXTERN          reduce using rule 123 (pointer -> MULTIPLY type_qualifier_list pointer .)
    STATIC          reduce using rule 123 (pointer -> MULTIPLY type_qualifier_list pointer .)
    AUTO            reduce using rule 123 (pointer -> MULTIPLY type_qualifier_list pointer .)
    REGISTER        reduce using rule 123 (pointer -> MULTIPLY type_qualifier_list pointer .)
    VOID            reduce using rule 123 (pointer -> MULTIPLY type_qualifier_list pointer .)
    CHAR            reduce using rule 123 (pointer -> MULTIPLY type_qualifier_list pointer .)
    SHORT           reduce using rule 123 (pointer -> MULTIPLY type_qualifier_list pointer .)
    INT             reduce using rule 123 (pointer -> MULTIPLY type_qualifier_list pointer .)
    LONG            reduce using rule 123 (pointer -> MULTIPLY type_qualifier_list pointer .)
    FLOAT           reduce using rule 123 (pointer -> MULTIPLY type_qualifier_list pointer .)
    DOUBLE          reduce using rule 123 (pointer -> MULTIPLY type_qualifier_list pointer .)
    SIGNED          reduce using rule 123 (pointer -> MULTIPLY type_qualifier_list pointer .)
    UNSIGNED        reduce using rule 123 (pointer -> MULTIPLY type_qualifier_list pointer .)
    CONST           reduce using rule 123 (pointer -> MULTIPLY type_qualifier_list pointer .)
    VOLATILE        reduce using rule 123 (pointer -> MULTIPLY type_qualifier_list pointer .)
    SEMICOLON       reduce using rule 123 (pointer -> MULTIPLY type_qualifier_list pointer .)
    MULTIPLY        reduce using rule 123 (pointer -> MULTIPLY type_qualifier_list pointer .)
    COMMA           reduce using rule 123 (pointer -> MULTIPLY type_qualifier_list pointer .)
    RPAREN          reduce using rule 123 (pointer -> MULTIPLY type_qualifier_list pointer .)


state 137

    (120) type_qualifier_list -> type_qualifier_list type_qualifier .

    MULTIPLY        reduce using rule 120 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CONST           reduce using rule 120 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 120 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ID              reduce using rule 120 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LPAREN          reduce using rule 120 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LSQUAREBRACKET  reduce using rule 120 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    TYPEDEF         reduce using rule 120 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    EXTERN          reduce using rule 120 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    STATIC          reduce using rule 120 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    AUTO            reduce using rule 120 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    REGISTER        reduce using rule 120 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOID            reduce using rule 120 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CHAR            reduce using rule 120 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    SHORT           reduce using rule 120 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    INT             reduce using rule 120 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LONG            reduce using rule 120 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    FLOAT           reduce using rule 120 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    DOUBLE          reduce using rule 120 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    SIGNED          reduce using rule 120 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    UNSIGNED        reduce using rule 120 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    SEMICOLON       reduce using rule 120 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    COMMA           reduce using rule 120 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RPAREN          reduce using rule 120 (type_qualifier_list -> type_qualifier_list type_qualifier .)


state 138

    (113) direct_declarator -> LPAREN declarator RPAREN .

    LSQUAREBRACKET  reduce using rule 113 (direct_declarator -> LPAREN declarator RPAREN .)
    LPAREN          reduce using rule 113 (direct_declarator -> LPAREN declarator RPAREN .)
    LCURLYBRACKET   reduce using rule 113 (direct_declarator -> LPAREN declarator RPAREN .)
    TYPEDEF         reduce using rule 113 (direct_declarator -> LPAREN declarator RPAREN .)
    EXTERN          reduce using rule 113 (direct_declarator -> LPAREN declarator RPAREN .)
    STATIC          reduce using rule 113 (direct_declarator -> LPAREN declarator RPAREN .)
    AUTO            reduce using rule 113 (direct_declarator -> LPAREN declarator RPAREN .)
    REGISTER        reduce using rule 113 (direct_declarator -> LPAREN declarator RPAREN .)
    VOID            reduce using rule 113 (direct_declarator -> LPAREN declarator RPAREN .)
    CHAR            reduce using rule 113 (direct_declarator -> LPAREN declarator RPAREN .)
    SHORT           reduce using rule 113 (direct_declarator -> LPAREN declarator RPAREN .)
    INT             reduce using rule 113 (direct_declarator -> LPAREN declarator RPAREN .)
    LONG            reduce using rule 113 (direct_declarator -> LPAREN declarator RPAREN .)
    FLOAT           reduce using rule 113 (direct_declarator -> LPAREN declarator RPAREN .)
    DOUBLE          reduce using rule 113 (direct_declarator -> LPAREN declarator RPAREN .)
    SIGNED          reduce using rule 113 (direct_declarator -> LPAREN declarator RPAREN .)
    UNSIGNED        reduce using rule 113 (direct_declarator -> LPAREN declarator RPAREN .)
    CONST           reduce using rule 113 (direct_declarator -> LPAREN declarator RPAREN .)
    VOLATILE        reduce using rule 113 (direct_declarator -> LPAREN declarator RPAREN .)
    EQUALS          reduce using rule 113 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMICOLON       reduce using rule 113 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 113 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 113 (direct_declarator -> LPAREN declarator RPAREN .)


state 139

    (138) abstract_declarator -> pointer direct_abstract_declarator .
    (142) direct_abstract_declarator -> direct_abstract_declarator . LPAREN RPAREN
    (143) direct_abstract_declarator -> direct_abstract_declarator . LPAREN constant_expression RPAREN
    (146) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    TYPEDEF         reduce using rule 138 (abstract_declarator -> pointer direct_abstract_declarator .)
    EXTERN          reduce using rule 138 (abstract_declarator -> pointer direct_abstract_declarator .)
    STATIC          reduce using rule 138 (abstract_declarator -> pointer direct_abstract_declarator .)
    AUTO            reduce using rule 138 (abstract_declarator -> pointer direct_abstract_declarator .)
    REGISTER        reduce using rule 138 (abstract_declarator -> pointer direct_abstract_declarator .)
    VOID            reduce using rule 138 (abstract_declarator -> pointer direct_abstract_declarator .)
    CHAR            reduce using rule 138 (abstract_declarator -> pointer direct_abstract_declarator .)
    SHORT           reduce using rule 138 (abstract_declarator -> pointer direct_abstract_declarator .)
    INT             reduce using rule 138 (abstract_declarator -> pointer direct_abstract_declarator .)
    LONG            reduce using rule 138 (abstract_declarator -> pointer direct_abstract_declarator .)
    FLOAT           reduce using rule 138 (abstract_declarator -> pointer direct_abstract_declarator .)
    DOUBLE          reduce using rule 138 (abstract_declarator -> pointer direct_abstract_declarator .)
    SIGNED          reduce using rule 138 (abstract_declarator -> pointer direct_abstract_declarator .)
    UNSIGNED        reduce using rule 138 (abstract_declarator -> pointer direct_abstract_declarator .)
    CONST           reduce using rule 138 (abstract_declarator -> pointer direct_abstract_declarator .)
    VOLATILE        reduce using rule 138 (abstract_declarator -> pointer direct_abstract_declarator .)
    SEMICOLON       reduce using rule 138 (abstract_declarator -> pointer direct_abstract_declarator .)
    MULTIPLY        reduce using rule 138 (abstract_declarator -> pointer direct_abstract_declarator .)
    ID              reduce using rule 138 (abstract_declarator -> pointer direct_abstract_declarator .)
    LSQUAREBRACKET  reduce using rule 138 (abstract_declarator -> pointer direct_abstract_declarator .)
    COMMA           reduce using rule 138 (abstract_declarator -> pointer direct_abstract_declarator .)
    RPAREN          reduce using rule 138 (abstract_declarator -> pointer direct_abstract_declarator .)
    LPAREN          shift and go to state 140

  ! LPAREN          [ reduce using rule 138 (abstract_declarator -> pointer direct_abstract_declarator .) ]


state 140

    (142) direct_abstract_declarator -> direct_abstract_declarator LPAREN . RPAREN
    (143) direct_abstract_declarator -> direct_abstract_declarator LPAREN . constant_expression RPAREN
    (146) direct_abstract_declarator -> direct_abstract_declarator LPAREN . parameter_type_list RPAREN
    (76) constant_expression -> . conditional_expression
    (125) parameter_type_list -> . parameter_list
    (126) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (127) parameter_list -> . parameter_declaration
    (128) parameter_list -> . parameter_list COMMA parameter_declaration
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (129) parameter_declaration -> . declaration_specifiers declarator
    (130) parameter_declaration -> . declaration_specifiers abstract_declarator
    (131) parameter_declaration -> . declaration_specifiers
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (79) declaration_specifiers -> . storage_class_specifier
    (80) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_qualifier
    (84) declaration_specifiers -> . type_qualifier declaration_specifiers
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (89) storage_class_specifier -> . TYPEDEF
    (90) storage_class_specifier -> . EXTERN
    (91) storage_class_specifier -> . STATIC
    (92) storage_class_specifier -> . AUTO
    (93) storage_class_specifier -> . REGISTER
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . type_name
    (108) type_qualifier -> . CONST
    (109) type_qualifier -> . VOLATILE
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (134) type_name -> . specifier_qualifier_list
    (135) type_name -> . specifier_qualifier_list abstract_declarator
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (104) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (105) specifier_qualifier_list -> . type_specifier
    (106) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (107) specifier_qualifier_list -> . type_qualifier
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN

    RPAREN          shift and go to state 226
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    CONST           shift and go to state 27
    VOLATILE        shift and go to state 28
    LPAREN          shift and go to state 127
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114

    constant_expression            shift and go to state 227
    parameter_type_list            shift and go to state 228
    conditional_expression         shift and go to state 125
    parameter_list                 shift and go to state 132
    logical_or_expression          shift and go to state 95
    parameter_declaration          shift and go to state 134
    logical_and_expression         shift and go to state 102
    declaration_specifiers         shift and go to state 135
    inclusive_or_expression        shift and go to state 110
    storage_class_specifier        shift and go to state 7
    type_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 9
    exclusive_or_expression        shift and go to state 115
    type_name                      shift and go to state 26
    and_expression                 shift and go to state 116
    specifier_qualifier_list       shift and go to state 32
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 126
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    primary_expression             shift and go to state 103

state 141

    (139) direct_abstract_declarator -> LPAREN abstract_declarator . RPAREN

    RPAREN          shift and go to state 229


state 142

    (144) direct_abstract_declarator -> LPAREN RPAREN .

    LPAREN          reduce using rule 144 (direct_abstract_declarator -> LPAREN RPAREN .)
    TYPEDEF         reduce using rule 144 (direct_abstract_declarator -> LPAREN RPAREN .)
    EXTERN          reduce using rule 144 (direct_abstract_declarator -> LPAREN RPAREN .)
    STATIC          reduce using rule 144 (direct_abstract_declarator -> LPAREN RPAREN .)
    AUTO            reduce using rule 144 (direct_abstract_declarator -> LPAREN RPAREN .)
    REGISTER        reduce using rule 144 (direct_abstract_declarator -> LPAREN RPAREN .)
    VOID            reduce using rule 144 (direct_abstract_declarator -> LPAREN RPAREN .)
    CHAR            reduce using rule 144 (direct_abstract_declarator -> LPAREN RPAREN .)
    SHORT           reduce using rule 144 (direct_abstract_declarator -> LPAREN RPAREN .)
    INT             reduce using rule 144 (direct_abstract_declarator -> LPAREN RPAREN .)
    LONG            reduce using rule 144 (direct_abstract_declarator -> LPAREN RPAREN .)
    FLOAT           reduce using rule 144 (direct_abstract_declarator -> LPAREN RPAREN .)
    DOUBLE          reduce using rule 144 (direct_abstract_declarator -> LPAREN RPAREN .)
    SIGNED          reduce using rule 144 (direct_abstract_declarator -> LPAREN RPAREN .)
    UNSIGNED        reduce using rule 144 (direct_abstract_declarator -> LPAREN RPAREN .)
    CONST           reduce using rule 144 (direct_abstract_declarator -> LPAREN RPAREN .)
    VOLATILE        reduce using rule 144 (direct_abstract_declarator -> LPAREN RPAREN .)
    SEMICOLON       reduce using rule 144 (direct_abstract_declarator -> LPAREN RPAREN .)
    MULTIPLY        reduce using rule 144 (direct_abstract_declarator -> LPAREN RPAREN .)
    ID              reduce using rule 144 (direct_abstract_declarator -> LPAREN RPAREN .)
    LSQUAREBRACKET  reduce using rule 144 (direct_abstract_declarator -> LPAREN RPAREN .)
    COMMA           reduce using rule 144 (direct_abstract_declarator -> LPAREN RPAREN .)
    RPAREN          reduce using rule 144 (direct_abstract_declarator -> LPAREN RPAREN .)


state 143

    (145) direct_abstract_declarator -> LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 230


state 144

    (140) direct_abstract_declarator -> LSQUAREBRACKET RSQUAREBRACKET .

    LPAREN          reduce using rule 140 (direct_abstract_declarator -> LSQUAREBRACKET RSQUAREBRACKET .)
    TYPEDEF         reduce using rule 140 (direct_abstract_declarator -> LSQUAREBRACKET RSQUAREBRACKET .)
    EXTERN          reduce using rule 140 (direct_abstract_declarator -> LSQUAREBRACKET RSQUAREBRACKET .)
    STATIC          reduce using rule 140 (direct_abstract_declarator -> LSQUAREBRACKET RSQUAREBRACKET .)
    AUTO            reduce using rule 140 (direct_abstract_declarator -> LSQUAREBRACKET RSQUAREBRACKET .)
    REGISTER        reduce using rule 140 (direct_abstract_declarator -> LSQUAREBRACKET RSQUAREBRACKET .)
    VOID            reduce using rule 140 (direct_abstract_declarator -> LSQUAREBRACKET RSQUAREBRACKET .)
    CHAR            reduce using rule 140 (direct_abstract_declarator -> LSQUAREBRACKET RSQUAREBRACKET .)
    SHORT           reduce using rule 140 (direct_abstract_declarator -> LSQUAREBRACKET RSQUAREBRACKET .)
    INT             reduce using rule 140 (direct_abstract_declarator -> LSQUAREBRACKET RSQUAREBRACKET .)
    LONG            reduce using rule 140 (direct_abstract_declarator -> LSQUAREBRACKET RSQUAREBRACKET .)
    FLOAT           reduce using rule 140 (direct_abstract_declarator -> LSQUAREBRACKET RSQUAREBRACKET .)
    DOUBLE          reduce using rule 140 (direct_abstract_declarator -> LSQUAREBRACKET RSQUAREBRACKET .)
    SIGNED          reduce using rule 140 (direct_abstract_declarator -> LSQUAREBRACKET RSQUAREBRACKET .)
    UNSIGNED        reduce using rule 140 (direct_abstract_declarator -> LSQUAREBRACKET RSQUAREBRACKET .)
    CONST           reduce using rule 140 (direct_abstract_declarator -> LSQUAREBRACKET RSQUAREBRACKET .)
    VOLATILE        reduce using rule 140 (direct_abstract_declarator -> LSQUAREBRACKET RSQUAREBRACKET .)
    SEMICOLON       reduce using rule 140 (direct_abstract_declarator -> LSQUAREBRACKET RSQUAREBRACKET .)
    MULTIPLY        reduce using rule 140 (direct_abstract_declarator -> LSQUAREBRACKET RSQUAREBRACKET .)
    ID              reduce using rule 140 (direct_abstract_declarator -> LSQUAREBRACKET RSQUAREBRACKET .)
    LSQUAREBRACKET  reduce using rule 140 (direct_abstract_declarator -> LSQUAREBRACKET RSQUAREBRACKET .)
    COMMA           reduce using rule 140 (direct_abstract_declarator -> LSQUAREBRACKET RSQUAREBRACKET .)
    RPAREN          reduce using rule 140 (direct_abstract_declarator -> LSQUAREBRACKET RSQUAREBRACKET .)


state 145

    (141) direct_abstract_declarator -> LSQUAREBRACKET constant_expression . RSQUAREBRACKET

    RSQUAREBRACKET  shift and go to state 231


state 146

    (187) function_definition -> declaration_specifiers declarator declaration_list compound_statement .

    TYPEDEF         reduce using rule 187 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    EXTERN          reduce using rule 187 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STATIC          reduce using rule 187 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    AUTO            reduce using rule 187 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    REGISTER        reduce using rule 187 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOID            reduce using rule 187 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CHAR            reduce using rule 187 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SHORT           reduce using rule 187 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    INT             reduce using rule 187 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    LONG            reduce using rule 187 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    FLOAT           reduce using rule 187 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    DOUBLE          reduce using rule 187 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SIGNED          reduce using rule 187 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNSIGNED        reduce using rule 187 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CONST           reduce using rule 187 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOLATILE        reduce using rule 187 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    MULTIPLY        reduce using rule 187 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    ID              reduce using rule 187 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    LPAREN          reduce using rule 187 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    $end            reduce using rule 187 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)


state 147

    (88) init_declarator -> declarator EQUALS initializer .

    SEMICOLON       reduce using rule 88 (init_declarator -> declarator EQUALS initializer .)
    COMMA           reduce using rule 88 (init_declarator -> declarator EQUALS initializer .)


state 148

    (147) initializer -> assignment_expression .

    SEMICOLON       reduce using rule 147 (initializer -> assignment_expression .)
    COMMA           reduce using rule 147 (initializer -> assignment_expression .)
    RCURLYBRACKET   reduce using rule 147 (initializer -> assignment_expression .)


state 149

    (148) initializer -> LCURLYBRACKET . initializer_list RCURLYBRACKET
    (149) initializer -> LCURLYBRACKET . initializer_list COMMA RCURLYBRACKET
    (150) initializer_list -> . initializer
    (151) initializer_list -> . initializer_list COMMA initializer
    (147) initializer -> . assignment_expression
    (148) initializer -> . LCURLYBRACKET initializer_list RCURLYBRACKET
    (149) initializer -> . LCURLYBRACKET initializer_list COMMA RCURLYBRACKET
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LCURLYBRACKET   shift and go to state 149
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    initializer_list               shift and go to state 232
    initializer                    shift and go to state 233
    assignment_expression          shift and go to state 148
    conditional_expression         shift and go to state 93
    unary_expression               shift and go to state 94
    logical_or_expression          shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 150

    (86) init_declarator_list -> init_declarator_list COMMA init_declarator .

    SEMICOLON       reduce using rule 86 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 86 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 151

    (162) compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .

    TYPEDEF         reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    EXTERN          reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    STATIC          reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    AUTO            reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    REGISTER        reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    VOID            reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    CHAR            reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    SHORT           reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    INT             reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    LONG            reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    FLOAT           reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    DOUBLE          reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    SIGNED          reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    UNSIGNED        reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    CONST           reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    VOLATILE        reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    MULTIPLY        reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    ID              reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    LPAREN          reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    $end            reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    RCURLYBRACKET   reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    CASE            reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    DEFAULT         reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    LCURLYBRACKET   reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    SEMICOLON       reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    IF              reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    SWITCH          reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    WHILE           reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    DO              reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    FOR             reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    GOTO            reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    CONTINUE        reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    BREAK           reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    RETURN          reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    INCREMENT       reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    DECREMENT       reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    SIZEOF          reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    AND             reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    PLUS            reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    MINUS           reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    NOT             reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    LNOT            reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    INT_CONST       reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    FLOAT_CONST     reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    CHAR_CONST      reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    STRING_LITERAL  reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    ELSE            reduce using rule 162 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)


state 152

    (170) statement_list -> statement_list statement .

    RCURLYBRACKET   reduce using rule 170 (statement_list -> statement_list statement .)
    ID              reduce using rule 170 (statement_list -> statement_list statement .)
    CASE            reduce using rule 170 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 170 (statement_list -> statement_list statement .)
    LCURLYBRACKET   reduce using rule 170 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 170 (statement_list -> statement_list statement .)
    IF              reduce using rule 170 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 170 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 170 (statement_list -> statement_list statement .)
    DO              reduce using rule 170 (statement_list -> statement_list statement .)
    FOR             reduce using rule 170 (statement_list -> statement_list statement .)
    GOTO            reduce using rule 170 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 170 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 170 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 170 (statement_list -> statement_list statement .)
    INCREMENT       reduce using rule 170 (statement_list -> statement_list statement .)
    DECREMENT       reduce using rule 170 (statement_list -> statement_list statement .)
    SIZEOF          reduce using rule 170 (statement_list -> statement_list statement .)
    AND             reduce using rule 170 (statement_list -> statement_list statement .)
    MULTIPLY        reduce using rule 170 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 170 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 170 (statement_list -> statement_list statement .)
    NOT             reduce using rule 170 (statement_list -> statement_list statement .)
    LNOT            reduce using rule 170 (statement_list -> statement_list statement .)
    INT_CONST       reduce using rule 170 (statement_list -> statement_list statement .)
    FLOAT_CONST     reduce using rule 170 (statement_list -> statement_list statement .)
    CHAR_CONST      reduce using rule 170 (statement_list -> statement_list statement .)
    STRING_LITERAL  reduce using rule 170 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 170 (statement_list -> statement_list statement .)


state 153

    (163) compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .

    TYPEDEF         reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    EXTERN          reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    STATIC          reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    AUTO            reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    REGISTER        reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    VOID            reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    CHAR            reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    SHORT           reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    INT             reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    LONG            reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    FLOAT           reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    DOUBLE          reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    SIGNED          reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    UNSIGNED        reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    CONST           reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    VOLATILE        reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    MULTIPLY        reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    ID              reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    LPAREN          reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    $end            reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    RCURLYBRACKET   reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    CASE            reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    DEFAULT         reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    LCURLYBRACKET   reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    SEMICOLON       reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    IF              reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    SWITCH          reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    WHILE           reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    DO              reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    FOR             reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    GOTO            reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    CONTINUE        reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    BREAK           reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    RETURN          reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    INCREMENT       reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    DECREMENT       reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    SIZEOF          reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    AND             reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    PLUS            reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    MINUS           reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    NOT             reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    LNOT            reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    INT_CONST       reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    FLOAT_CONST     reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    CHAR_CONST      reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    STRING_LITERAL  reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    ELSE            reduce using rule 163 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)


state 154

    (164) compound_statement -> LCURLYBRACKET declaration_list statement_list . RCURLYBRACKET
    (170) statement_list -> statement_list . statement
    (152) statement -> . labeled_statement
    (153) statement -> . compound_statement
    (154) statement -> . expression_statement
    (155) statement -> . selection_statement
    (156) statement -> . iteration_statement
    (157) statement -> . jump_statement
    (158) labeled_statement -> . ID COLON statement
    (159) labeled_statement -> . CASE constant_expression COLON statement
    (160) labeled_statement -> . DEFAULT COLON statement
    (161) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (162) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (163) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (164) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (165) expression_statement -> . SEMICOLON
    (166) expression_statement -> . expression SEMICOLON
    (171) selection_statement -> . IF LPAREN expression RPAREN statement
    (172) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (173) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (174) iteration_statement -> . WHILE LPAREN expression RPAREN
    (175) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (176) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (177) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (178) jump_statement -> . GOTO ID SEMICOLON
    (179) jump_statement -> . CONTINUE SEMICOLON
    (180) jump_statement -> . BREAK SEMICOLON
    (181) jump_statement -> . RETURN SEMICOLON
    (182) jump_statement -> . RETURN expression SEMICOLON
    (74) expression -> . assignment_expression
    (75) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCURLYBRACKET   shift and go to state 234
    ID              shift and go to state 78
    CASE            shift and go to state 79
    DEFAULT         shift and go to state 80
    LCURLYBRACKET   shift and go to state 41
    SEMICOLON       shift and go to state 77
    IF              shift and go to state 82
    SWITCH          shift and go to state 84
    WHILE           shift and go to state 85
    DO              shift and go to state 86
    FOR             shift and go to state 87
    GOTO            shift and go to state 88
    CONTINUE        shift and go to state 89
    BREAK           shift and go to state 90
    RETURN          shift and go to state 91
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    statement                      shift and go to state 152
    labeled_statement              shift and go to state 71
    compound_statement             shift and go to state 72
    expression_statement           shift and go to state 73
    selection_statement            shift and go to state 74
    iteration_statement            shift and go to state 75
    jump_statement                 shift and go to state 76
    expression                     shift and go to state 81
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 93
    unary_expression               shift and go to state 94
    logical_or_expression          shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 155

    (158) labeled_statement -> ID COLON . statement
    (152) statement -> . labeled_statement
    (153) statement -> . compound_statement
    (154) statement -> . expression_statement
    (155) statement -> . selection_statement
    (156) statement -> . iteration_statement
    (157) statement -> . jump_statement
    (158) labeled_statement -> . ID COLON statement
    (159) labeled_statement -> . CASE constant_expression COLON statement
    (160) labeled_statement -> . DEFAULT COLON statement
    (161) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (162) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (163) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (164) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (165) expression_statement -> . SEMICOLON
    (166) expression_statement -> . expression SEMICOLON
    (171) selection_statement -> . IF LPAREN expression RPAREN statement
    (172) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (173) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (174) iteration_statement -> . WHILE LPAREN expression RPAREN
    (175) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (176) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (177) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (178) jump_statement -> . GOTO ID SEMICOLON
    (179) jump_statement -> . CONTINUE SEMICOLON
    (180) jump_statement -> . BREAK SEMICOLON
    (181) jump_statement -> . RETURN SEMICOLON
    (182) jump_statement -> . RETURN expression SEMICOLON
    (74) expression -> . assignment_expression
    (75) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    ID              shift and go to state 78
    CASE            shift and go to state 79
    DEFAULT         shift and go to state 80
    LCURLYBRACKET   shift and go to state 41
    SEMICOLON       shift and go to state 77
    IF              shift and go to state 82
    SWITCH          shift and go to state 84
    WHILE           shift and go to state 85
    DO              shift and go to state 86
    FOR             shift and go to state 87
    GOTO            shift and go to state 88
    CONTINUE        shift and go to state 89
    BREAK           shift and go to state 90
    RETURN          shift and go to state 91
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    statement                      shift and go to state 235
    labeled_statement              shift and go to state 71
    compound_statement             shift and go to state 72
    expression_statement           shift and go to state 73
    selection_statement            shift and go to state 74
    iteration_statement            shift and go to state 75
    jump_statement                 shift and go to state 76
    expression                     shift and go to state 81
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 93
    unary_expression               shift and go to state 94
    logical_or_expression          shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 156

    (159) labeled_statement -> CASE constant_expression . COLON statement

    COLON           shift and go to state 236


state 157

    (160) labeled_statement -> DEFAULT COLON . statement
    (152) statement -> . labeled_statement
    (153) statement -> . compound_statement
    (154) statement -> . expression_statement
    (155) statement -> . selection_statement
    (156) statement -> . iteration_statement
    (157) statement -> . jump_statement
    (158) labeled_statement -> . ID COLON statement
    (159) labeled_statement -> . CASE constant_expression COLON statement
    (160) labeled_statement -> . DEFAULT COLON statement
    (161) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (162) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (163) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (164) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (165) expression_statement -> . SEMICOLON
    (166) expression_statement -> . expression SEMICOLON
    (171) selection_statement -> . IF LPAREN expression RPAREN statement
    (172) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (173) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (174) iteration_statement -> . WHILE LPAREN expression RPAREN
    (175) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (176) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (177) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (178) jump_statement -> . GOTO ID SEMICOLON
    (179) jump_statement -> . CONTINUE SEMICOLON
    (180) jump_statement -> . BREAK SEMICOLON
    (181) jump_statement -> . RETURN SEMICOLON
    (182) jump_statement -> . RETURN expression SEMICOLON
    (74) expression -> . assignment_expression
    (75) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    ID              shift and go to state 78
    CASE            shift and go to state 79
    DEFAULT         shift and go to state 80
    LCURLYBRACKET   shift and go to state 41
    SEMICOLON       shift and go to state 77
    IF              shift and go to state 82
    SWITCH          shift and go to state 84
    WHILE           shift and go to state 85
    DO              shift and go to state 86
    FOR             shift and go to state 87
    GOTO            shift and go to state 88
    CONTINUE        shift and go to state 89
    BREAK           shift and go to state 90
    RETURN          shift and go to state 91
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    statement                      shift and go to state 237
    labeled_statement              shift and go to state 71
    compound_statement             shift and go to state 72
    expression_statement           shift and go to state 73
    selection_statement            shift and go to state 74
    iteration_statement            shift and go to state 75
    jump_statement                 shift and go to state 76
    expression                     shift and go to state 81
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 93
    unary_expression               shift and go to state 94
    logical_or_expression          shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 158

    (166) expression_statement -> expression SEMICOLON .

    RCURLYBRACKET   reduce using rule 166 (expression_statement -> expression SEMICOLON .)
    ID              reduce using rule 166 (expression_statement -> expression SEMICOLON .)
    CASE            reduce using rule 166 (expression_statement -> expression SEMICOLON .)
    DEFAULT         reduce using rule 166 (expression_statement -> expression SEMICOLON .)
    LCURLYBRACKET   reduce using rule 166 (expression_statement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 166 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 166 (expression_statement -> expression SEMICOLON .)
    SWITCH          reduce using rule 166 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 166 (expression_statement -> expression SEMICOLON .)
    DO              reduce using rule 166 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 166 (expression_statement -> expression SEMICOLON .)
    GOTO            reduce using rule 166 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 166 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 166 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 166 (expression_statement -> expression SEMICOLON .)
    INCREMENT       reduce using rule 166 (expression_statement -> expression SEMICOLON .)
    DECREMENT       reduce using rule 166 (expression_statement -> expression SEMICOLON .)
    SIZEOF          reduce using rule 166 (expression_statement -> expression SEMICOLON .)
    AND             reduce using rule 166 (expression_statement -> expression SEMICOLON .)
    MULTIPLY        reduce using rule 166 (expression_statement -> expression SEMICOLON .)
    PLUS            reduce using rule 166 (expression_statement -> expression SEMICOLON .)
    MINUS           reduce using rule 166 (expression_statement -> expression SEMICOLON .)
    NOT             reduce using rule 166 (expression_statement -> expression SEMICOLON .)
    LNOT            reduce using rule 166 (expression_statement -> expression SEMICOLON .)
    INT_CONST       reduce using rule 166 (expression_statement -> expression SEMICOLON .)
    FLOAT_CONST     reduce using rule 166 (expression_statement -> expression SEMICOLON .)
    CHAR_CONST      reduce using rule 166 (expression_statement -> expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 166 (expression_statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 166 (expression_statement -> expression SEMICOLON .)
    ELSE            reduce using rule 166 (expression_statement -> expression SEMICOLON .)
    RPAREN          reduce using rule 166 (expression_statement -> expression SEMICOLON .)


state 159

    (75) expression -> expression COMMA . assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    assignment_expression          shift and go to state 238
    conditional_expression         shift and go to state 93
    unary_expression               shift and go to state 94
    logical_or_expression          shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 160

    (171) selection_statement -> IF LPAREN . expression RPAREN statement
    (172) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (74) expression -> . assignment_expression
    (75) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    expression                     shift and go to state 239
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 93
    unary_expression               shift and go to state 94
    logical_or_expression          shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 161

    (6) primary_expression -> LPAREN expression . RPAREN
    (75) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 240
    COMMA           shift and go to state 159


state 162

    (30) cast_expression -> LPAREN type_name . RPAREN cast_expression
    (103) type_specifier -> type_name .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 241
    VOID            reduce using rule 103 (type_specifier -> type_name .)
    CHAR            reduce using rule 103 (type_specifier -> type_name .)
    SHORT           reduce using rule 103 (type_specifier -> type_name .)
    INT             reduce using rule 103 (type_specifier -> type_name .)
    LONG            reduce using rule 103 (type_specifier -> type_name .)
    FLOAT           reduce using rule 103 (type_specifier -> type_name .)
    DOUBLE          reduce using rule 103 (type_specifier -> type_name .)
    SIGNED          reduce using rule 103 (type_specifier -> type_name .)
    UNSIGNED        reduce using rule 103 (type_specifier -> type_name .)
    CONST           reduce using rule 103 (type_specifier -> type_name .)
    VOLATILE        reduce using rule 103 (type_specifier -> type_name .)
    MULTIPLY        reduce using rule 103 (type_specifier -> type_name .)
    LPAREN          reduce using rule 103 (type_specifier -> type_name .)
    LSQUAREBRACKET  reduce using rule 103 (type_specifier -> type_name .)

  ! RPAREN          [ reduce using rule 103 (type_specifier -> type_name .) ]


state 163

    (104) specifier_qualifier_list -> type_specifier . specifier_qualifier_list
    (105) specifier_qualifier_list -> type_specifier .
    (104) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (105) specifier_qualifier_list -> . type_specifier
    (106) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (107) specifier_qualifier_list -> . type_qualifier
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . type_name
    (108) type_qualifier -> . CONST
    (109) type_qualifier -> . VOLATILE
    (134) type_name -> . specifier_qualifier_list
    (135) type_name -> . specifier_qualifier_list abstract_declarator

  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for SIGNED resolved as shift
  ! shift/reduce conflict for UNSIGNED resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for VOLATILE resolved as shift
    RPAREN          reduce using rule 105 (specifier_qualifier_list -> type_specifier .)
    MULTIPLY        reduce using rule 105 (specifier_qualifier_list -> type_specifier .)
    LPAREN          reduce using rule 105 (specifier_qualifier_list -> type_specifier .)
    LSQUAREBRACKET  reduce using rule 105 (specifier_qualifier_list -> type_specifier .)
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    CONST           shift and go to state 27
    VOLATILE        shift and go to state 28

  ! VOID            [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]
  ! CHAR            [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]
  ! SHORT           [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]
  ! INT             [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]
  ! LONG            [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]
  ! FLOAT           [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]
  ! DOUBLE          [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]
  ! SIGNED          [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]
  ! UNSIGNED        [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]
  ! CONST           [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]
  ! VOLATILE        [ reduce using rule 105 (specifier_qualifier_list -> type_specifier .) ]

    type_specifier                 shift and go to state 163
    specifier_qualifier_list       shift and go to state 45
    type_qualifier                 shift and go to state 164
    type_name                      shift and go to state 26

state 164

    (106) specifier_qualifier_list -> type_qualifier . specifier_qualifier_list
    (107) specifier_qualifier_list -> type_qualifier .
    (104) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (105) specifier_qualifier_list -> . type_specifier
    (106) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (107) specifier_qualifier_list -> . type_qualifier
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . type_name
    (108) type_qualifier -> . CONST
    (109) type_qualifier -> . VOLATILE
    (134) type_name -> . specifier_qualifier_list
    (135) type_name -> . specifier_qualifier_list abstract_declarator

  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for SIGNED resolved as shift
  ! shift/reduce conflict for UNSIGNED resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for VOLATILE resolved as shift
    RPAREN          reduce using rule 107 (specifier_qualifier_list -> type_qualifier .)
    MULTIPLY        reduce using rule 107 (specifier_qualifier_list -> type_qualifier .)
    LPAREN          reduce using rule 107 (specifier_qualifier_list -> type_qualifier .)
    LSQUAREBRACKET  reduce using rule 107 (specifier_qualifier_list -> type_qualifier .)
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    CONST           shift and go to state 27
    VOLATILE        shift and go to state 28

  ! VOID            [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]
  ! CHAR            [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]
  ! SHORT           [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]
  ! INT             [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]
  ! LONG            [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]
  ! FLOAT           [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]
  ! DOUBLE          [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]
  ! SIGNED          [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]
  ! UNSIGNED        [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]
  ! CONST           [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]
  ! VOLATILE        [ reduce using rule 107 (specifier_qualifier_list -> type_qualifier .) ]

    type_qualifier                 shift and go to state 164
    specifier_qualifier_list       shift and go to state 47
    type_specifier                 shift and go to state 163
    type_name                      shift and go to state 26

state 165

    (173) selection_statement -> SWITCH LPAREN . expression RPAREN statement
    (74) expression -> . assignment_expression
    (75) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    expression                     shift and go to state 242
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 93
    unary_expression               shift and go to state 94
    logical_or_expression          shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 166

    (174) iteration_statement -> WHILE LPAREN . expression RPAREN
    (74) expression -> . assignment_expression
    (75) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    expression                     shift and go to state 243
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 93
    unary_expression               shift and go to state 94
    logical_or_expression          shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 167

    (175) iteration_statement -> DO statement . WHILE LPAREN expression RPAREN SEMICOLON

    WHILE           shift and go to state 244


state 168

    (176) iteration_statement -> FOR LPAREN . expression_statement expression_statement RPAREN statement
    (177) iteration_statement -> FOR LPAREN . expression_statement expression_statement expression RPAREN statement
    (165) expression_statement -> . SEMICOLON
    (166) expression_statement -> . expression SEMICOLON
    (74) expression -> . assignment_expression
    (75) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 77
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    expression_statement           shift and go to state 245
    expression                     shift and go to state 81
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 93
    unary_expression               shift and go to state 94
    logical_or_expression          shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 169

    (178) jump_statement -> GOTO ID . SEMICOLON

    SEMICOLON       shift and go to state 246


state 170

    (179) jump_statement -> CONTINUE SEMICOLON .

    RCURLYBRACKET   reduce using rule 179 (jump_statement -> CONTINUE SEMICOLON .)
    ID              reduce using rule 179 (jump_statement -> CONTINUE SEMICOLON .)
    CASE            reduce using rule 179 (jump_statement -> CONTINUE SEMICOLON .)
    DEFAULT         reduce using rule 179 (jump_statement -> CONTINUE SEMICOLON .)
    LCURLYBRACKET   reduce using rule 179 (jump_statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 179 (jump_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 179 (jump_statement -> CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 179 (jump_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 179 (jump_statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 179 (jump_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 179 (jump_statement -> CONTINUE SEMICOLON .)
    GOTO            reduce using rule 179 (jump_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 179 (jump_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 179 (jump_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 179 (jump_statement -> CONTINUE SEMICOLON .)
    INCREMENT       reduce using rule 179 (jump_statement -> CONTINUE SEMICOLON .)
    DECREMENT       reduce using rule 179 (jump_statement -> CONTINUE SEMICOLON .)
    SIZEOF          reduce using rule 179 (jump_statement -> CONTINUE SEMICOLON .)
    AND             reduce using rule 179 (jump_statement -> CONTINUE SEMICOLON .)
    MULTIPLY        reduce using rule 179 (jump_statement -> CONTINUE SEMICOLON .)
    PLUS            reduce using rule 179 (jump_statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 179 (jump_statement -> CONTINUE SEMICOLON .)
    NOT             reduce using rule 179 (jump_statement -> CONTINUE SEMICOLON .)
    LNOT            reduce using rule 179 (jump_statement -> CONTINUE SEMICOLON .)
    INT_CONST       reduce using rule 179 (jump_statement -> CONTINUE SEMICOLON .)
    FLOAT_CONST     reduce using rule 179 (jump_statement -> CONTINUE SEMICOLON .)
    CHAR_CONST      reduce using rule 179 (jump_statement -> CONTINUE SEMICOLON .)
    STRING_LITERAL  reduce using rule 179 (jump_statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 179 (jump_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 179 (jump_statement -> CONTINUE SEMICOLON .)


state 171

    (180) jump_statement -> BREAK SEMICOLON .

    RCURLYBRACKET   reduce using rule 180 (jump_statement -> BREAK SEMICOLON .)
    ID              reduce using rule 180 (jump_statement -> BREAK SEMICOLON .)
    CASE            reduce using rule 180 (jump_statement -> BREAK SEMICOLON .)
    DEFAULT         reduce using rule 180 (jump_statement -> BREAK SEMICOLON .)
    LCURLYBRACKET   reduce using rule 180 (jump_statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 180 (jump_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 180 (jump_statement -> BREAK SEMICOLON .)
    SWITCH          reduce using rule 180 (jump_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 180 (jump_statement -> BREAK SEMICOLON .)
    DO              reduce using rule 180 (jump_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 180 (jump_statement -> BREAK SEMICOLON .)
    GOTO            reduce using rule 180 (jump_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 180 (jump_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 180 (jump_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 180 (jump_statement -> BREAK SEMICOLON .)
    INCREMENT       reduce using rule 180 (jump_statement -> BREAK SEMICOLON .)
    DECREMENT       reduce using rule 180 (jump_statement -> BREAK SEMICOLON .)
    SIZEOF          reduce using rule 180 (jump_statement -> BREAK SEMICOLON .)
    AND             reduce using rule 180 (jump_statement -> BREAK SEMICOLON .)
    MULTIPLY        reduce using rule 180 (jump_statement -> BREAK SEMICOLON .)
    PLUS            reduce using rule 180 (jump_statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 180 (jump_statement -> BREAK SEMICOLON .)
    NOT             reduce using rule 180 (jump_statement -> BREAK SEMICOLON .)
    LNOT            reduce using rule 180 (jump_statement -> BREAK SEMICOLON .)
    INT_CONST       reduce using rule 180 (jump_statement -> BREAK SEMICOLON .)
    FLOAT_CONST     reduce using rule 180 (jump_statement -> BREAK SEMICOLON .)
    CHAR_CONST      reduce using rule 180 (jump_statement -> BREAK SEMICOLON .)
    STRING_LITERAL  reduce using rule 180 (jump_statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 180 (jump_statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 180 (jump_statement -> BREAK SEMICOLON .)


state 172

    (181) jump_statement -> RETURN SEMICOLON .

    RCURLYBRACKET   reduce using rule 181 (jump_statement -> RETURN SEMICOLON .)
    ID              reduce using rule 181 (jump_statement -> RETURN SEMICOLON .)
    CASE            reduce using rule 181 (jump_statement -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 181 (jump_statement -> RETURN SEMICOLON .)
    LCURLYBRACKET   reduce using rule 181 (jump_statement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 181 (jump_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 181 (jump_statement -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 181 (jump_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 181 (jump_statement -> RETURN SEMICOLON .)
    DO              reduce using rule 181 (jump_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 181 (jump_statement -> RETURN SEMICOLON .)
    GOTO            reduce using rule 181 (jump_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 181 (jump_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 181 (jump_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 181 (jump_statement -> RETURN SEMICOLON .)
    INCREMENT       reduce using rule 181 (jump_statement -> RETURN SEMICOLON .)
    DECREMENT       reduce using rule 181 (jump_statement -> RETURN SEMICOLON .)
    SIZEOF          reduce using rule 181 (jump_statement -> RETURN SEMICOLON .)
    AND             reduce using rule 181 (jump_statement -> RETURN SEMICOLON .)
    MULTIPLY        reduce using rule 181 (jump_statement -> RETURN SEMICOLON .)
    PLUS            reduce using rule 181 (jump_statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 181 (jump_statement -> RETURN SEMICOLON .)
    NOT             reduce using rule 181 (jump_statement -> RETURN SEMICOLON .)
    LNOT            reduce using rule 181 (jump_statement -> RETURN SEMICOLON .)
    INT_CONST       reduce using rule 181 (jump_statement -> RETURN SEMICOLON .)
    FLOAT_CONST     reduce using rule 181 (jump_statement -> RETURN SEMICOLON .)
    CHAR_CONST      reduce using rule 181 (jump_statement -> RETURN SEMICOLON .)
    STRING_LITERAL  reduce using rule 181 (jump_statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 181 (jump_statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 181 (jump_statement -> RETURN SEMICOLON .)


state 173

    (182) jump_statement -> RETURN expression . SEMICOLON
    (75) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 247
    COMMA           shift and go to state 159


state 174

    (62) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    unary_expression               shift and go to state 94
    assignment_expression          shift and go to state 248
    conditional_expression         shift and go to state 93
    logical_or_expression          shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 175

    (63) assignment_operator -> EQUALS .

    INCREMENT       reduce using rule 63 (assignment_operator -> EQUALS .)
    DECREMENT       reduce using rule 63 (assignment_operator -> EQUALS .)
    SIZEOF          reduce using rule 63 (assignment_operator -> EQUALS .)
    AND             reduce using rule 63 (assignment_operator -> EQUALS .)
    MULTIPLY        reduce using rule 63 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 63 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 63 (assignment_operator -> EQUALS .)
    NOT             reduce using rule 63 (assignment_operator -> EQUALS .)
    LNOT            reduce using rule 63 (assignment_operator -> EQUALS .)
    ID              reduce using rule 63 (assignment_operator -> EQUALS .)
    INT_CONST       reduce using rule 63 (assignment_operator -> EQUALS .)
    FLOAT_CONST     reduce using rule 63 (assignment_operator -> EQUALS .)
    CHAR_CONST      reduce using rule 63 (assignment_operator -> EQUALS .)
    STRING_LITERAL  reduce using rule 63 (assignment_operator -> EQUALS .)
    LPAREN          reduce using rule 63 (assignment_operator -> EQUALS .)


state 176

    (64) assignment_operator -> MULTIPLYEQUAL .

    INCREMENT       reduce using rule 64 (assignment_operator -> MULTIPLYEQUAL .)
    DECREMENT       reduce using rule 64 (assignment_operator -> MULTIPLYEQUAL .)
    SIZEOF          reduce using rule 64 (assignment_operator -> MULTIPLYEQUAL .)
    AND             reduce using rule 64 (assignment_operator -> MULTIPLYEQUAL .)
    MULTIPLY        reduce using rule 64 (assignment_operator -> MULTIPLYEQUAL .)
    PLUS            reduce using rule 64 (assignment_operator -> MULTIPLYEQUAL .)
    MINUS           reduce using rule 64 (assignment_operator -> MULTIPLYEQUAL .)
    NOT             reduce using rule 64 (assignment_operator -> MULTIPLYEQUAL .)
    LNOT            reduce using rule 64 (assignment_operator -> MULTIPLYEQUAL .)
    ID              reduce using rule 64 (assignment_operator -> MULTIPLYEQUAL .)
    INT_CONST       reduce using rule 64 (assignment_operator -> MULTIPLYEQUAL .)
    FLOAT_CONST     reduce using rule 64 (assignment_operator -> MULTIPLYEQUAL .)
    CHAR_CONST      reduce using rule 64 (assignment_operator -> MULTIPLYEQUAL .)
    STRING_LITERAL  reduce using rule 64 (assignment_operator -> MULTIPLYEQUAL .)
    LPAREN          reduce using rule 64 (assignment_operator -> MULTIPLYEQUAL .)


state 177

    (65) assignment_operator -> DIVIDEEQUAL .

    INCREMENT       reduce using rule 65 (assignment_operator -> DIVIDEEQUAL .)
    DECREMENT       reduce using rule 65 (assignment_operator -> DIVIDEEQUAL .)
    SIZEOF          reduce using rule 65 (assignment_operator -> DIVIDEEQUAL .)
    AND             reduce using rule 65 (assignment_operator -> DIVIDEEQUAL .)
    MULTIPLY        reduce using rule 65 (assignment_operator -> DIVIDEEQUAL .)
    PLUS            reduce using rule 65 (assignment_operator -> DIVIDEEQUAL .)
    MINUS           reduce using rule 65 (assignment_operator -> DIVIDEEQUAL .)
    NOT             reduce using rule 65 (assignment_operator -> DIVIDEEQUAL .)
    LNOT            reduce using rule 65 (assignment_operator -> DIVIDEEQUAL .)
    ID              reduce using rule 65 (assignment_operator -> DIVIDEEQUAL .)
    INT_CONST       reduce using rule 65 (assignment_operator -> DIVIDEEQUAL .)
    FLOAT_CONST     reduce using rule 65 (assignment_operator -> DIVIDEEQUAL .)
    CHAR_CONST      reduce using rule 65 (assignment_operator -> DIVIDEEQUAL .)
    STRING_LITERAL  reduce using rule 65 (assignment_operator -> DIVIDEEQUAL .)
    LPAREN          reduce using rule 65 (assignment_operator -> DIVIDEEQUAL .)


state 178

    (66) assignment_operator -> MODEQUAL .

    INCREMENT       reduce using rule 66 (assignment_operator -> MODEQUAL .)
    DECREMENT       reduce using rule 66 (assignment_operator -> MODEQUAL .)
    SIZEOF          reduce using rule 66 (assignment_operator -> MODEQUAL .)
    AND             reduce using rule 66 (assignment_operator -> MODEQUAL .)
    MULTIPLY        reduce using rule 66 (assignment_operator -> MODEQUAL .)
    PLUS            reduce using rule 66 (assignment_operator -> MODEQUAL .)
    MINUS           reduce using rule 66 (assignment_operator -> MODEQUAL .)
    NOT             reduce using rule 66 (assignment_operator -> MODEQUAL .)
    LNOT            reduce using rule 66 (assignment_operator -> MODEQUAL .)
    ID              reduce using rule 66 (assignment_operator -> MODEQUAL .)
    INT_CONST       reduce using rule 66 (assignment_operator -> MODEQUAL .)
    FLOAT_CONST     reduce using rule 66 (assignment_operator -> MODEQUAL .)
    CHAR_CONST      reduce using rule 66 (assignment_operator -> MODEQUAL .)
    STRING_LITERAL  reduce using rule 66 (assignment_operator -> MODEQUAL .)
    LPAREN          reduce using rule 66 (assignment_operator -> MODEQUAL .)


state 179

    (67) assignment_operator -> PLUSEQUAL .

    INCREMENT       reduce using rule 67 (assignment_operator -> PLUSEQUAL .)
    DECREMENT       reduce using rule 67 (assignment_operator -> PLUSEQUAL .)
    SIZEOF          reduce using rule 67 (assignment_operator -> PLUSEQUAL .)
    AND             reduce using rule 67 (assignment_operator -> PLUSEQUAL .)
    MULTIPLY        reduce using rule 67 (assignment_operator -> PLUSEQUAL .)
    PLUS            reduce using rule 67 (assignment_operator -> PLUSEQUAL .)
    MINUS           reduce using rule 67 (assignment_operator -> PLUSEQUAL .)
    NOT             reduce using rule 67 (assignment_operator -> PLUSEQUAL .)
    LNOT            reduce using rule 67 (assignment_operator -> PLUSEQUAL .)
    ID              reduce using rule 67 (assignment_operator -> PLUSEQUAL .)
    INT_CONST       reduce using rule 67 (assignment_operator -> PLUSEQUAL .)
    FLOAT_CONST     reduce using rule 67 (assignment_operator -> PLUSEQUAL .)
    CHAR_CONST      reduce using rule 67 (assignment_operator -> PLUSEQUAL .)
    STRING_LITERAL  reduce using rule 67 (assignment_operator -> PLUSEQUAL .)
    LPAREN          reduce using rule 67 (assignment_operator -> PLUSEQUAL .)


state 180

    (68) assignment_operator -> MINUSEQUAL .

    INCREMENT       reduce using rule 68 (assignment_operator -> MINUSEQUAL .)
    DECREMENT       reduce using rule 68 (assignment_operator -> MINUSEQUAL .)
    SIZEOF          reduce using rule 68 (assignment_operator -> MINUSEQUAL .)
    AND             reduce using rule 68 (assignment_operator -> MINUSEQUAL .)
    MULTIPLY        reduce using rule 68 (assignment_operator -> MINUSEQUAL .)
    PLUS            reduce using rule 68 (assignment_operator -> MINUSEQUAL .)
    MINUS           reduce using rule 68 (assignment_operator -> MINUSEQUAL .)
    NOT             reduce using rule 68 (assignment_operator -> MINUSEQUAL .)
    LNOT            reduce using rule 68 (assignment_operator -> MINUSEQUAL .)
    ID              reduce using rule 68 (assignment_operator -> MINUSEQUAL .)
    INT_CONST       reduce using rule 68 (assignment_operator -> MINUSEQUAL .)
    FLOAT_CONST     reduce using rule 68 (assignment_operator -> MINUSEQUAL .)
    CHAR_CONST      reduce using rule 68 (assignment_operator -> MINUSEQUAL .)
    STRING_LITERAL  reduce using rule 68 (assignment_operator -> MINUSEQUAL .)
    LPAREN          reduce using rule 68 (assignment_operator -> MINUSEQUAL .)


state 181

    (69) assignment_operator -> LSHIFTEQUAL .

    INCREMENT       reduce using rule 69 (assignment_operator -> LSHIFTEQUAL .)
    DECREMENT       reduce using rule 69 (assignment_operator -> LSHIFTEQUAL .)
    SIZEOF          reduce using rule 69 (assignment_operator -> LSHIFTEQUAL .)
    AND             reduce using rule 69 (assignment_operator -> LSHIFTEQUAL .)
    MULTIPLY        reduce using rule 69 (assignment_operator -> LSHIFTEQUAL .)
    PLUS            reduce using rule 69 (assignment_operator -> LSHIFTEQUAL .)
    MINUS           reduce using rule 69 (assignment_operator -> LSHIFTEQUAL .)
    NOT             reduce using rule 69 (assignment_operator -> LSHIFTEQUAL .)
    LNOT            reduce using rule 69 (assignment_operator -> LSHIFTEQUAL .)
    ID              reduce using rule 69 (assignment_operator -> LSHIFTEQUAL .)
    INT_CONST       reduce using rule 69 (assignment_operator -> LSHIFTEQUAL .)
    FLOAT_CONST     reduce using rule 69 (assignment_operator -> LSHIFTEQUAL .)
    CHAR_CONST      reduce using rule 69 (assignment_operator -> LSHIFTEQUAL .)
    STRING_LITERAL  reduce using rule 69 (assignment_operator -> LSHIFTEQUAL .)
    LPAREN          reduce using rule 69 (assignment_operator -> LSHIFTEQUAL .)


state 182

    (70) assignment_operator -> RSHIFTEQUAL .

    INCREMENT       reduce using rule 70 (assignment_operator -> RSHIFTEQUAL .)
    DECREMENT       reduce using rule 70 (assignment_operator -> RSHIFTEQUAL .)
    SIZEOF          reduce using rule 70 (assignment_operator -> RSHIFTEQUAL .)
    AND             reduce using rule 70 (assignment_operator -> RSHIFTEQUAL .)
    MULTIPLY        reduce using rule 70 (assignment_operator -> RSHIFTEQUAL .)
    PLUS            reduce using rule 70 (assignment_operator -> RSHIFTEQUAL .)
    MINUS           reduce using rule 70 (assignment_operator -> RSHIFTEQUAL .)
    NOT             reduce using rule 70 (assignment_operator -> RSHIFTEQUAL .)
    LNOT            reduce using rule 70 (assignment_operator -> RSHIFTEQUAL .)
    ID              reduce using rule 70 (assignment_operator -> RSHIFTEQUAL .)
    INT_CONST       reduce using rule 70 (assignment_operator -> RSHIFTEQUAL .)
    FLOAT_CONST     reduce using rule 70 (assignment_operator -> RSHIFTEQUAL .)
    CHAR_CONST      reduce using rule 70 (assignment_operator -> RSHIFTEQUAL .)
    STRING_LITERAL  reduce using rule 70 (assignment_operator -> RSHIFTEQUAL .)
    LPAREN          reduce using rule 70 (assignment_operator -> RSHIFTEQUAL .)


state 183

    (71) assignment_operator -> ANDEQUAL .

    INCREMENT       reduce using rule 71 (assignment_operator -> ANDEQUAL .)
    DECREMENT       reduce using rule 71 (assignment_operator -> ANDEQUAL .)
    SIZEOF          reduce using rule 71 (assignment_operator -> ANDEQUAL .)
    AND             reduce using rule 71 (assignment_operator -> ANDEQUAL .)
    MULTIPLY        reduce using rule 71 (assignment_operator -> ANDEQUAL .)
    PLUS            reduce using rule 71 (assignment_operator -> ANDEQUAL .)
    MINUS           reduce using rule 71 (assignment_operator -> ANDEQUAL .)
    NOT             reduce using rule 71 (assignment_operator -> ANDEQUAL .)
    LNOT            reduce using rule 71 (assignment_operator -> ANDEQUAL .)
    ID              reduce using rule 71 (assignment_operator -> ANDEQUAL .)
    INT_CONST       reduce using rule 71 (assignment_operator -> ANDEQUAL .)
    FLOAT_CONST     reduce using rule 71 (assignment_operator -> ANDEQUAL .)
    CHAR_CONST      reduce using rule 71 (assignment_operator -> ANDEQUAL .)
    STRING_LITERAL  reduce using rule 71 (assignment_operator -> ANDEQUAL .)
    LPAREN          reduce using rule 71 (assignment_operator -> ANDEQUAL .)


state 184

    (72) assignment_operator -> XOREQUAL .

    INCREMENT       reduce using rule 72 (assignment_operator -> XOREQUAL .)
    DECREMENT       reduce using rule 72 (assignment_operator -> XOREQUAL .)
    SIZEOF          reduce using rule 72 (assignment_operator -> XOREQUAL .)
    AND             reduce using rule 72 (assignment_operator -> XOREQUAL .)
    MULTIPLY        reduce using rule 72 (assignment_operator -> XOREQUAL .)
    PLUS            reduce using rule 72 (assignment_operator -> XOREQUAL .)
    MINUS           reduce using rule 72 (assignment_operator -> XOREQUAL .)
    NOT             reduce using rule 72 (assignment_operator -> XOREQUAL .)
    LNOT            reduce using rule 72 (assignment_operator -> XOREQUAL .)
    ID              reduce using rule 72 (assignment_operator -> XOREQUAL .)
    INT_CONST       reduce using rule 72 (assignment_operator -> XOREQUAL .)
    FLOAT_CONST     reduce using rule 72 (assignment_operator -> XOREQUAL .)
    CHAR_CONST      reduce using rule 72 (assignment_operator -> XOREQUAL .)
    STRING_LITERAL  reduce using rule 72 (assignment_operator -> XOREQUAL .)
    LPAREN          reduce using rule 72 (assignment_operator -> XOREQUAL .)


state 185

    (73) assignment_operator -> OREQUAL .

    INCREMENT       reduce using rule 73 (assignment_operator -> OREQUAL .)
    DECREMENT       reduce using rule 73 (assignment_operator -> OREQUAL .)
    SIZEOF          reduce using rule 73 (assignment_operator -> OREQUAL .)
    AND             reduce using rule 73 (assignment_operator -> OREQUAL .)
    MULTIPLY        reduce using rule 73 (assignment_operator -> OREQUAL .)
    PLUS            reduce using rule 73 (assignment_operator -> OREQUAL .)
    MINUS           reduce using rule 73 (assignment_operator -> OREQUAL .)
    NOT             reduce using rule 73 (assignment_operator -> OREQUAL .)
    LNOT            reduce using rule 73 (assignment_operator -> OREQUAL .)
    ID              reduce using rule 73 (assignment_operator -> OREQUAL .)
    INT_CONST       reduce using rule 73 (assignment_operator -> OREQUAL .)
    FLOAT_CONST     reduce using rule 73 (assignment_operator -> OREQUAL .)
    CHAR_CONST      reduce using rule 73 (assignment_operator -> OREQUAL .)
    STRING_LITERAL  reduce using rule 73 (assignment_operator -> OREQUAL .)
    LPAREN          reduce using rule 73 (assignment_operator -> OREQUAL .)


state 186

    (60) conditional_expression -> logical_or_expression CONDOP . expression COLON conditional_expression
    (74) expression -> . assignment_expression
    (75) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    logical_or_expression          shift and go to state 95
    expression                     shift and go to state 249
    conditional_expression         shift and go to state 93
    assignment_expression          shift and go to state 92
    unary_expression               shift and go to state 94
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 187

    (58) logical_or_expression -> logical_or_expression LOR . logical_and_expression
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 127
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114

    logical_and_expression         shift and go to state 250
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 126
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    primary_expression             shift and go to state 103

state 188

    (10) postfix_expression -> postfix_expression LSQUAREBRACKET . expression RSQUAREBRACKET
    (74) expression -> . assignment_expression
    (75) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    postfix_expression             shift and go to state 96
    expression                     shift and go to state 251
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 93
    unary_expression               shift and go to state 94
    logical_or_expression          shift and go to state 95
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 189

    (11) postfix_expression -> postfix_expression LPAREN . RPAREN
    (13) postfix_expression -> postfix_expression LPAREN . argument_expression_list RPAREN
    (7) argument_expression_list -> . assignment_expression
    (8) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 252
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    postfix_expression             shift and go to state 96
    argument_expression_list       shift and go to state 253
    assignment_expression          shift and go to state 254
    conditional_expression         shift and go to state 93
    unary_expression               shift and go to state 94
    logical_or_expression          shift and go to state 95
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 190

    (12) postfix_expression -> postfix_expression PERIOD . ID

    ID              shift and go to state 255


state 191

    (14) postfix_expression -> postfix_expression ARROW . ID

    ID              shift and go to state 256


state 192

    (15) postfix_expression -> postfix_expression INCREMENT .

    LSQUAREBRACKET  reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    LPAREN          reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    PERIOD          reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    ARROW           reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    INCREMENT       reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    DECREMENT       reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    EQUALS          reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    MULTIPLYEQUAL   reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    DIVIDEEQUAL     reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    MODEQUAL        reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    PLUSEQUAL       reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    MINUSEQUAL      reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    LSHIFTEQUAL     reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    RSHIFTEQUAL     reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    ANDEQUAL        reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    XOREQUAL        reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    OREQUAL         reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    MULTIPLY        reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    DIVIDE          reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    MOD             reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    PLUS            reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    MINUS           reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    LSHIFT          reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    RSHIFT          reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    LESS            reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    GREATER         reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    LESSEQUAL       reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    GREATEREQUAL    reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    EQUAL           reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    NOTEQUAL        reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    AND             reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    XOR             reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    OR              reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    LAND            reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    CONDOP          reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    LOR             reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    SEMICOLON       reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    COMMA           reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    RSQUAREBRACKET  reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    COLON           reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    RPAREN          reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)
    RCURLYBRACKET   reduce using rule 15 (postfix_expression -> postfix_expression INCREMENT .)


state 193

    (16) postfix_expression -> postfix_expression DECREMENT .

    LSQUAREBRACKET  reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    LPAREN          reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    PERIOD          reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    ARROW           reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    INCREMENT       reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    DECREMENT       reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    EQUALS          reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    MULTIPLYEQUAL   reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    DIVIDEEQUAL     reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    MODEQUAL        reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    PLUSEQUAL       reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    MINUSEQUAL      reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    LSHIFTEQUAL     reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    RSHIFTEQUAL     reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    ANDEQUAL        reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    XOREQUAL        reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    OREQUAL         reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    MULTIPLY        reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    DIVIDE          reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    MOD             reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    PLUS            reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    MINUS           reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    LSHIFT          reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    RSHIFT          reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    LESS            reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    GREATER         reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    LESSEQUAL       reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    GREATEREQUAL    reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    EQUAL           reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    NOTEQUAL        reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    AND             reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    XOR             reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    OR              reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    LAND            reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    CONDOP          reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    LOR             reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    SEMICOLON       reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    COMMA           reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    RSQUAREBRACKET  reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    COLON           reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    RPAREN          reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)
    RCURLYBRACKET   reduce using rule 16 (postfix_expression -> postfix_expression DECREMENT .)


state 194

    (18) unary_expression -> INCREMENT unary_expression .

    EQUALS          reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    MULTIPLYEQUAL   reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    DIVIDEEQUAL     reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    MODEQUAL        reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    PLUSEQUAL       reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    MINUSEQUAL      reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    LSHIFTEQUAL     reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    RSHIFTEQUAL     reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    ANDEQUAL        reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    XOREQUAL        reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    OREQUAL         reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    MULTIPLY        reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    DIVIDE          reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    MOD             reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    PLUS            reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    MINUS           reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    LSHIFT          reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    RSHIFT          reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    LESS            reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    GREATER         reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    LESSEQUAL       reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    GREATEREQUAL    reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    EQUAL           reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    NOTEQUAL        reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    AND             reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    XOR             reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    OR              reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    LAND            reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    CONDOP          reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    LOR             reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    SEMICOLON       reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    COMMA           reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    RSQUAREBRACKET  reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    COLON           reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    RPAREN          reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)
    RCURLYBRACKET   reduce using rule 18 (unary_expression -> INCREMENT unary_expression .)


state 195

    (6) primary_expression -> LPAREN . expression RPAREN
    (74) expression -> . assignment_expression
    (75) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    expression                     shift and go to state 161
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 93
    unary_expression               shift and go to state 94
    logical_or_expression          shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 196

    (19) unary_expression -> DECREMENT unary_expression .

    EQUALS          reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    MULTIPLYEQUAL   reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    DIVIDEEQUAL     reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    MODEQUAL        reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    PLUSEQUAL       reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    MINUSEQUAL      reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    LSHIFTEQUAL     reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    RSHIFTEQUAL     reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    ANDEQUAL        reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    XOREQUAL        reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    OREQUAL         reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    MULTIPLY        reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    DIVIDE          reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    MOD             reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    PLUS            reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    MINUS           reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    LSHIFT          reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    RSHIFT          reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    LESS            reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    GREATER         reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    LESSEQUAL       reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    GREATEREQUAL    reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    EQUAL           reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    NOTEQUAL        reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    AND             reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    XOR             reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    OR              reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    LAND            reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    CONDOP          reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    LOR             reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    SEMICOLON       reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    COMMA           reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    RSQUAREBRACKET  reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    COLON           reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    RPAREN          reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)
    RCURLYBRACKET   reduce using rule 19 (unary_expression -> DECREMENT unary_expression .)


state 197

    (20) unary_expression -> unary_operator cast_expression .

    EQUALS          reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    MULTIPLYEQUAL   reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    DIVIDEEQUAL     reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    MODEQUAL        reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    PLUSEQUAL       reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    MINUSEQUAL      reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    LSHIFTEQUAL     reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    RSHIFTEQUAL     reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    ANDEQUAL        reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    XOREQUAL        reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    OREQUAL         reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    MULTIPLY        reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    LSHIFT          reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    RSHIFT          reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    LESS            reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    GREATER         reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    LESSEQUAL       reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    GREATEREQUAL    reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    EQUAL           reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    NOTEQUAL        reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    XOR             reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    LAND            reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    CONDOP          reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    LOR             reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    SEMICOLON       reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    RSQUAREBRACKET  reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    COLON           reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    RCURLYBRACKET   reduce using rule 20 (unary_expression -> unary_operator cast_expression .)


state 198

    (21) unary_expression -> SIZEOF unary_expression .

    EQUALS          reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    MULTIPLYEQUAL   reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    DIVIDEEQUAL     reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    MODEQUAL        reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    PLUSEQUAL       reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    MINUSEQUAL      reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    LSHIFTEQUAL     reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    RSHIFTEQUAL     reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    ANDEQUAL        reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    XOREQUAL        reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    OREQUAL         reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    MULTIPLY        reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    DIVIDE          reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    MOD             reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    PLUS            reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    MINUS           reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    LSHIFT          reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    RSHIFT          reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    LESS            reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    GREATER         reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    LESSEQUAL       reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    GREATEREQUAL    reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    EQUAL           reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    NOTEQUAL        reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    AND             reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    XOR             reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    OR              reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    LAND            reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    CONDOP          reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    LOR             reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    SEMICOLON       reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    RSQUAREBRACKET  reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    RPAREN          reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    RCURLYBRACKET   reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)


state 199

    (22) unary_expression -> SIZEOF LPAREN . type_name RPAREN
    (6) primary_expression -> LPAREN . expression RPAREN
    (134) type_name -> . specifier_qualifier_list
    (135) type_name -> . specifier_qualifier_list abstract_declarator
    (74) expression -> . assignment_expression
    (75) expression -> . expression COMMA assignment_expression
    (104) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (105) specifier_qualifier_list -> . type_specifier
    (106) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (107) specifier_qualifier_list -> . type_qualifier
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . type_name
    (108) type_qualifier -> . CONST
    (109) type_qualifier -> . VOLATILE
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    CONST           shift and go to state 27
    VOLATILE        shift and go to state 28
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    type_name                      shift and go to state 257
    expression                     shift and go to state 161
    specifier_qualifier_list       shift and go to state 32
    assignment_expression          shift and go to state 92
    type_specifier                 shift and go to state 163
    type_qualifier                 shift and go to state 164
    conditional_expression         shift and go to state 93
    unary_expression               shift and go to state 94
    logical_or_expression          shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 200

    (56) logical_and_expression -> logical_and_expression LAND . inclusive_or_expression
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 127
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114

    inclusive_or_expression        shift and go to state 258
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 126
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    primary_expression             shift and go to state 103

state 201

    (54) inclusive_or_expression -> inclusive_or_expression OR . exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 127
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114

    exclusive_or_expression        shift and go to state 259
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 126
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    primary_expression             shift and go to state 103

state 202

    (52) exclusive_or_expression -> exclusive_or_expression XOR . and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 127
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114

    and_expression                 shift and go to state 260
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 126
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    primary_expression             shift and go to state 103

state 203

    (50) and_expression -> and_expression AND . equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 127
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114

    equality_expression            shift and go to state 261
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 126
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    primary_expression             shift and go to state 103

state 204

    (47) equality_expression -> equality_expression EQUAL . relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 127
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114

    relational_expression          shift and go to state 262
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 126
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    primary_expression             shift and go to state 103

state 205

    (48) equality_expression -> equality_expression NOTEQUAL . relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 127
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114

    relational_expression          shift and go to state 263
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 126
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    primary_expression             shift and go to state 103

state 206

    (42) relational_expression -> relational_expression LESS . shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 127
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114

    shift_expression               shift and go to state 264
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 126
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    primary_expression             shift and go to state 103

state 207

    (43) relational_expression -> relational_expression GREATER . shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 127
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114

    shift_expression               shift and go to state 265
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 126
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    primary_expression             shift and go to state 103

state 208

    (44) relational_expression -> relational_expression LESSEQUAL . shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 127
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114

    shift_expression               shift and go to state 266
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 126
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    primary_expression             shift and go to state 103

state 209

    (45) relational_expression -> relational_expression GREATEREQUAL . shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 127
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114

    shift_expression               shift and go to state 267
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 126
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    primary_expression             shift and go to state 103

state 210

    (39) shift_expression -> shift_expression LSHIFT . additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 127
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114

    additive_expression            shift and go to state 268
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 126
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    primary_expression             shift and go to state 103

state 211

    (40) shift_expression -> shift_expression RSHIFT . additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 127
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114

    additive_expression            shift and go to state 269
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 126
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    primary_expression             shift and go to state 103

state 212

    (36) additive_expression -> additive_expression PLUS . multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 127
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114

    multiplicative_expression      shift and go to state 270
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 126
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    primary_expression             shift and go to state 103

state 213

    (37) additive_expression -> additive_expression MINUS . multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 127
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114

    multiplicative_expression      shift and go to state 271
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 126
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    primary_expression             shift and go to state 103

state 214

    (32) multiplicative_expression -> multiplicative_expression MULTIPLY . cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 127
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114

    cast_expression                shift and go to state 272
    unary_expression               shift and go to state 126
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    primary_expression             shift and go to state 103

state 215

    (33) multiplicative_expression -> multiplicative_expression DIVIDE . cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 127
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114

    cast_expression                shift and go to state 273
    unary_expression               shift and go to state 126
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    primary_expression             shift and go to state 103

state 216

    (34) multiplicative_expression -> multiplicative_expression MOD . cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 127
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114

    cast_expression                shift and go to state 274
    unary_expression               shift and go to state 126
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    primary_expression             shift and go to state 103

state 217

    (114) direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .

    LSQUAREBRACKET  reduce using rule 114 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    LPAREN          reduce using rule 114 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    LCURLYBRACKET   reduce using rule 114 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    TYPEDEF         reduce using rule 114 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    EXTERN          reduce using rule 114 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    STATIC          reduce using rule 114 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    AUTO            reduce using rule 114 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    REGISTER        reduce using rule 114 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    VOID            reduce using rule 114 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    CHAR            reduce using rule 114 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    SHORT           reduce using rule 114 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    INT             reduce using rule 114 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    LONG            reduce using rule 114 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    FLOAT           reduce using rule 114 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    DOUBLE          reduce using rule 114 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    SIGNED          reduce using rule 114 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    UNSIGNED        reduce using rule 114 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    CONST           reduce using rule 114 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    VOLATILE        reduce using rule 114 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    EQUALS          reduce using rule 114 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    SEMICOLON       reduce using rule 114 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    COMMA           reduce using rule 114 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    RPAREN          reduce using rule 114 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)


state 218

    (116) direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .

    LSQUAREBRACKET  reduce using rule 116 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 116 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LCURLYBRACKET   reduce using rule 116 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    TYPEDEF         reduce using rule 116 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    EXTERN          reduce using rule 116 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    STATIC          reduce using rule 116 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    AUTO            reduce using rule 116 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    REGISTER        reduce using rule 116 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    VOID            reduce using rule 116 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    CHAR            reduce using rule 116 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SHORT           reduce using rule 116 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    INT             reduce using rule 116 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LONG            reduce using rule 116 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    FLOAT           reduce using rule 116 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    DOUBLE          reduce using rule 116 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SIGNED          reduce using rule 116 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    UNSIGNED        reduce using rule 116 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    CONST           reduce using rule 116 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    VOLATILE        reduce using rule 116 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    EQUALS          reduce using rule 116 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SEMICOLON       reduce using rule 116 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 116 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 116 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)


state 219

    (117) direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .

    LSQUAREBRACKET  reduce using rule 117 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LPAREN          reduce using rule 117 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LCURLYBRACKET   reduce using rule 117 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    TYPEDEF         reduce using rule 117 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    EXTERN          reduce using rule 117 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    STATIC          reduce using rule 117 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    AUTO            reduce using rule 117 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    REGISTER        reduce using rule 117 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    VOID            reduce using rule 117 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    CHAR            reduce using rule 117 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SHORT           reduce using rule 117 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    INT             reduce using rule 117 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LONG            reduce using rule 117 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    FLOAT           reduce using rule 117 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    DOUBLE          reduce using rule 117 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SIGNED          reduce using rule 117 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    UNSIGNED        reduce using rule 117 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    CONST           reduce using rule 117 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    VOLATILE        reduce using rule 117 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    EQUALS          reduce using rule 117 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SEMICOLON       reduce using rule 117 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    COMMA           reduce using rule 117 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    RPAREN          reduce using rule 117 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)


state 220

    (133) identifier_list -> identifier_list COMMA . ID

    ID              shift and go to state 275


state 221

    (126) parameter_type_list -> parameter_list COMMA . ELLIPSIS
    (128) parameter_list -> parameter_list COMMA . parameter_declaration
    (129) parameter_declaration -> . declaration_specifiers declarator
    (130) parameter_declaration -> . declaration_specifiers abstract_declarator
    (131) parameter_declaration -> . declaration_specifiers
    (79) declaration_specifiers -> . storage_class_specifier
    (80) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_qualifier
    (84) declaration_specifiers -> . type_qualifier declaration_specifiers
    (89) storage_class_specifier -> . TYPEDEF
    (90) storage_class_specifier -> . EXTERN
    (91) storage_class_specifier -> . STATIC
    (92) storage_class_specifier -> . AUTO
    (93) storage_class_specifier -> . REGISTER
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . type_name
    (108) type_qualifier -> . CONST
    (109) type_qualifier -> . VOLATILE
    (134) type_name -> . specifier_qualifier_list
    (135) type_name -> . specifier_qualifier_list abstract_declarator
    (104) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (105) specifier_qualifier_list -> . type_specifier
    (106) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (107) specifier_qualifier_list -> . type_qualifier

    ELLIPSIS        shift and go to state 276
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    CONST           shift and go to state 27
    VOLATILE        shift and go to state 28

    parameter_declaration          shift and go to state 277
    declaration_specifiers         shift and go to state 135
    storage_class_specifier        shift and go to state 7
    type_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 9
    type_name                      shift and go to state 26
    specifier_qualifier_list       shift and go to state 32

state 222

    (129) parameter_declaration -> declaration_specifiers declarator .

    COMMA           reduce using rule 129 (parameter_declaration -> declaration_specifiers declarator .)
    RPAREN          reduce using rule 129 (parameter_declaration -> declaration_specifiers declarator .)


state 223

    (130) parameter_declaration -> declaration_specifiers abstract_declarator .

    COMMA           reduce using rule 130 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    RPAREN          reduce using rule 130 (parameter_declaration -> declaration_specifiers abstract_declarator .)


state 224

    (110) declarator -> pointer . direct_declarator
    (136) abstract_declarator -> pointer .
    (138) abstract_declarator -> pointer . direct_abstract_declarator
    (112) direct_declarator -> . ID
    (113) direct_declarator -> . LPAREN declarator RPAREN
    (114) direct_declarator -> . direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (115) direct_declarator -> . direct_declarator LSQUAREBRACKET RSQUAREBRACKET
    (116) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (117) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (118) direct_declarator -> . direct_declarator LPAREN RPAREN
    (139) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (140) direct_abstract_declarator -> . LSQUAREBRACKET RSQUAREBRACKET
    (141) direct_abstract_declarator -> . LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (142) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (143) direct_abstract_declarator -> . direct_abstract_declarator LPAREN constant_expression RPAREN
    (144) direct_abstract_declarator -> . LPAREN RPAREN
    (145) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (146) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

    COMMA           reduce using rule 136 (abstract_declarator -> pointer .)
    RPAREN          reduce using rule 136 (abstract_declarator -> pointer .)
    ID              shift and go to state 30
    LPAREN          shift and go to state 225
    LSQUAREBRACKET  shift and go to state 59

    direct_declarator              shift and go to state 48
    direct_abstract_declarator     shift and go to state 139

state 225

    (113) direct_declarator -> LPAREN . declarator RPAREN
    (139) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (144) direct_abstract_declarator -> LPAREN . RPAREN
    (145) direct_abstract_declarator -> LPAREN . parameter_type_list RPAREN
    (110) declarator -> . pointer direct_declarator
    (111) declarator -> . direct_declarator
    (136) abstract_declarator -> . pointer
    (137) abstract_declarator -> . direct_abstract_declarator
    (138) abstract_declarator -> . pointer direct_abstract_declarator
    (125) parameter_type_list -> . parameter_list
    (126) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (121) pointer -> . MULTIPLY
    (122) pointer -> . MULTIPLY type_qualifier_list
    (123) pointer -> . MULTIPLY type_qualifier_list pointer
    (124) pointer -> . MULTIPLY pointer
    (112) direct_declarator -> . ID
    (113) direct_declarator -> . LPAREN declarator RPAREN
    (114) direct_declarator -> . direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (115) direct_declarator -> . direct_declarator LSQUAREBRACKET RSQUAREBRACKET
    (116) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (117) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (118) direct_declarator -> . direct_declarator LPAREN RPAREN
    (139) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (140) direct_abstract_declarator -> . LSQUAREBRACKET RSQUAREBRACKET
    (141) direct_abstract_declarator -> . LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (142) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (143) direct_abstract_declarator -> . direct_abstract_declarator LPAREN constant_expression RPAREN
    (144) direct_abstract_declarator -> . LPAREN RPAREN
    (145) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (146) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN
    (127) parameter_list -> . parameter_declaration
    (128) parameter_list -> . parameter_list COMMA parameter_declaration
    (129) parameter_declaration -> . declaration_specifiers declarator
    (130) parameter_declaration -> . declaration_specifiers abstract_declarator
    (131) parameter_declaration -> . declaration_specifiers
    (79) declaration_specifiers -> . storage_class_specifier
    (80) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_qualifier
    (84) declaration_specifiers -> . type_qualifier declaration_specifiers
    (89) storage_class_specifier -> . TYPEDEF
    (90) storage_class_specifier -> . EXTERN
    (91) storage_class_specifier -> . STATIC
    (92) storage_class_specifier -> . AUTO
    (93) storage_class_specifier -> . REGISTER
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . type_name
    (108) type_qualifier -> . CONST
    (109) type_qualifier -> . VOLATILE
    (134) type_name -> . specifier_qualifier_list
    (135) type_name -> . specifier_qualifier_list abstract_declarator
    (104) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (105) specifier_qualifier_list -> . type_specifier
    (106) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (107) specifier_qualifier_list -> . type_qualifier

    RPAREN          shift and go to state 142
    MULTIPLY        shift and go to state 29
    ID              shift and go to state 30
    LPAREN          shift and go to state 225
    LSQUAREBRACKET  shift and go to state 59
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    CONST           shift and go to state 27
    VOLATILE        shift and go to state 28

    declarator                     shift and go to state 54
    abstract_declarator            shift and go to state 141
    parameter_type_list            shift and go to state 143
    pointer                        shift and go to state 224
    direct_declarator              shift and go to state 11
    direct_abstract_declarator     shift and go to state 57
    parameter_list                 shift and go to state 132
    parameter_declaration          shift and go to state 134
    declaration_specifiers         shift and go to state 135
    storage_class_specifier        shift and go to state 7
    type_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 9
    type_name                      shift and go to state 26
    specifier_qualifier_list       shift and go to state 32

state 226

    (142) direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .

    LPAREN          reduce using rule 142 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    TYPEDEF         reduce using rule 142 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    EXTERN          reduce using rule 142 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    STATIC          reduce using rule 142 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    AUTO            reduce using rule 142 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    REGISTER        reduce using rule 142 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    VOID            reduce using rule 142 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    CHAR            reduce using rule 142 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    SHORT           reduce using rule 142 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    INT             reduce using rule 142 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    LONG            reduce using rule 142 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    FLOAT           reduce using rule 142 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    DOUBLE          reduce using rule 142 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    SIGNED          reduce using rule 142 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    UNSIGNED        reduce using rule 142 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    CONST           reduce using rule 142 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    VOLATILE        reduce using rule 142 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    SEMICOLON       reduce using rule 142 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    MULTIPLY        reduce using rule 142 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    ID              reduce using rule 142 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    LSQUAREBRACKET  reduce using rule 142 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    COMMA           reduce using rule 142 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    RPAREN          reduce using rule 142 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)


state 227

    (143) direct_abstract_declarator -> direct_abstract_declarator LPAREN constant_expression . RPAREN

    RPAREN          shift and go to state 278


state 228

    (146) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 279


state 229

    (139) direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .

    LPAREN          reduce using rule 139 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    TYPEDEF         reduce using rule 139 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    EXTERN          reduce using rule 139 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    STATIC          reduce using rule 139 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    AUTO            reduce using rule 139 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    REGISTER        reduce using rule 139 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    VOID            reduce using rule 139 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    CHAR            reduce using rule 139 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    SHORT           reduce using rule 139 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    INT             reduce using rule 139 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    LONG            reduce using rule 139 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    FLOAT           reduce using rule 139 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    DOUBLE          reduce using rule 139 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    SIGNED          reduce using rule 139 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    UNSIGNED        reduce using rule 139 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    CONST           reduce using rule 139 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    VOLATILE        reduce using rule 139 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    SEMICOLON       reduce using rule 139 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    MULTIPLY        reduce using rule 139 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    ID              reduce using rule 139 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    LSQUAREBRACKET  reduce using rule 139 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    COMMA           reduce using rule 139 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    RPAREN          reduce using rule 139 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)


state 230

    (145) direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .

    LPAREN          reduce using rule 145 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    TYPEDEF         reduce using rule 145 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    EXTERN          reduce using rule 145 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    STATIC          reduce using rule 145 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    AUTO            reduce using rule 145 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    REGISTER        reduce using rule 145 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    VOID            reduce using rule 145 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    CHAR            reduce using rule 145 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    SHORT           reduce using rule 145 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    INT             reduce using rule 145 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    LONG            reduce using rule 145 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    FLOAT           reduce using rule 145 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    DOUBLE          reduce using rule 145 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    SIGNED          reduce using rule 145 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    UNSIGNED        reduce using rule 145 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    CONST           reduce using rule 145 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    VOLATILE        reduce using rule 145 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    SEMICOLON       reduce using rule 145 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    MULTIPLY        reduce using rule 145 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    ID              reduce using rule 145 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    LSQUAREBRACKET  reduce using rule 145 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 145 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 145 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)


state 231

    (141) direct_abstract_declarator -> LSQUAREBRACKET constant_expression RSQUAREBRACKET .

    LPAREN          reduce using rule 141 (direct_abstract_declarator -> LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    TYPEDEF         reduce using rule 141 (direct_abstract_declarator -> LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    EXTERN          reduce using rule 141 (direct_abstract_declarator -> LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    STATIC          reduce using rule 141 (direct_abstract_declarator -> LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    AUTO            reduce using rule 141 (direct_abstract_declarator -> LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    REGISTER        reduce using rule 141 (direct_abstract_declarator -> LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    VOID            reduce using rule 141 (direct_abstract_declarator -> LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    CHAR            reduce using rule 141 (direct_abstract_declarator -> LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    SHORT           reduce using rule 141 (direct_abstract_declarator -> LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    INT             reduce using rule 141 (direct_abstract_declarator -> LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    LONG            reduce using rule 141 (direct_abstract_declarator -> LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    FLOAT           reduce using rule 141 (direct_abstract_declarator -> LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    DOUBLE          reduce using rule 141 (direct_abstract_declarator -> LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    SIGNED          reduce using rule 141 (direct_abstract_declarator -> LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    UNSIGNED        reduce using rule 141 (direct_abstract_declarator -> LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    CONST           reduce using rule 141 (direct_abstract_declarator -> LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    VOLATILE        reduce using rule 141 (direct_abstract_declarator -> LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    SEMICOLON       reduce using rule 141 (direct_abstract_declarator -> LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    MULTIPLY        reduce using rule 141 (direct_abstract_declarator -> LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    ID              reduce using rule 141 (direct_abstract_declarator -> LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    LSQUAREBRACKET  reduce using rule 141 (direct_abstract_declarator -> LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    COMMA           reduce using rule 141 (direct_abstract_declarator -> LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    RPAREN          reduce using rule 141 (direct_abstract_declarator -> LSQUAREBRACKET constant_expression RSQUAREBRACKET .)


state 232

    (148) initializer -> LCURLYBRACKET initializer_list . RCURLYBRACKET
    (149) initializer -> LCURLYBRACKET initializer_list . COMMA RCURLYBRACKET
    (151) initializer_list -> initializer_list . COMMA initializer

    RCURLYBRACKET   shift and go to state 280
    COMMA           shift and go to state 281


state 233

    (150) initializer_list -> initializer .

    RCURLYBRACKET   reduce using rule 150 (initializer_list -> initializer .)
    COMMA           reduce using rule 150 (initializer_list -> initializer .)


state 234

    (164) compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .

    TYPEDEF         reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    EXTERN          reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    STATIC          reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    AUTO            reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    REGISTER        reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    VOID            reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    CHAR            reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    SHORT           reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    INT             reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    LONG            reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    FLOAT           reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    DOUBLE          reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    SIGNED          reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    UNSIGNED        reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    CONST           reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    VOLATILE        reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    MULTIPLY        reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    ID              reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    LPAREN          reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    $end            reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    RCURLYBRACKET   reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    CASE            reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    DEFAULT         reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    LCURLYBRACKET   reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    SEMICOLON       reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    IF              reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    SWITCH          reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    WHILE           reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    DO              reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    FOR             reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    GOTO            reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    CONTINUE        reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    BREAK           reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    RETURN          reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    INCREMENT       reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    DECREMENT       reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    SIZEOF          reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    AND             reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    PLUS            reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    MINUS           reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    NOT             reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    LNOT            reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    INT_CONST       reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    FLOAT_CONST     reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    CHAR_CONST      reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    STRING_LITERAL  reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    ELSE            reduce using rule 164 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)


state 235

    (158) labeled_statement -> ID COLON statement .

    RCURLYBRACKET   reduce using rule 158 (labeled_statement -> ID COLON statement .)
    ID              reduce using rule 158 (labeled_statement -> ID COLON statement .)
    CASE            reduce using rule 158 (labeled_statement -> ID COLON statement .)
    DEFAULT         reduce using rule 158 (labeled_statement -> ID COLON statement .)
    LCURLYBRACKET   reduce using rule 158 (labeled_statement -> ID COLON statement .)
    SEMICOLON       reduce using rule 158 (labeled_statement -> ID COLON statement .)
    IF              reduce using rule 158 (labeled_statement -> ID COLON statement .)
    SWITCH          reduce using rule 158 (labeled_statement -> ID COLON statement .)
    WHILE           reduce using rule 158 (labeled_statement -> ID COLON statement .)
    DO              reduce using rule 158 (labeled_statement -> ID COLON statement .)
    FOR             reduce using rule 158 (labeled_statement -> ID COLON statement .)
    GOTO            reduce using rule 158 (labeled_statement -> ID COLON statement .)
    CONTINUE        reduce using rule 158 (labeled_statement -> ID COLON statement .)
    BREAK           reduce using rule 158 (labeled_statement -> ID COLON statement .)
    RETURN          reduce using rule 158 (labeled_statement -> ID COLON statement .)
    INCREMENT       reduce using rule 158 (labeled_statement -> ID COLON statement .)
    DECREMENT       reduce using rule 158 (labeled_statement -> ID COLON statement .)
    SIZEOF          reduce using rule 158 (labeled_statement -> ID COLON statement .)
    AND             reduce using rule 158 (labeled_statement -> ID COLON statement .)
    MULTIPLY        reduce using rule 158 (labeled_statement -> ID COLON statement .)
    PLUS            reduce using rule 158 (labeled_statement -> ID COLON statement .)
    MINUS           reduce using rule 158 (labeled_statement -> ID COLON statement .)
    NOT             reduce using rule 158 (labeled_statement -> ID COLON statement .)
    LNOT            reduce using rule 158 (labeled_statement -> ID COLON statement .)
    INT_CONST       reduce using rule 158 (labeled_statement -> ID COLON statement .)
    FLOAT_CONST     reduce using rule 158 (labeled_statement -> ID COLON statement .)
    CHAR_CONST      reduce using rule 158 (labeled_statement -> ID COLON statement .)
    STRING_LITERAL  reduce using rule 158 (labeled_statement -> ID COLON statement .)
    LPAREN          reduce using rule 158 (labeled_statement -> ID COLON statement .)
    ELSE            reduce using rule 158 (labeled_statement -> ID COLON statement .)


state 236

    (159) labeled_statement -> CASE constant_expression COLON . statement
    (152) statement -> . labeled_statement
    (153) statement -> . compound_statement
    (154) statement -> . expression_statement
    (155) statement -> . selection_statement
    (156) statement -> . iteration_statement
    (157) statement -> . jump_statement
    (158) labeled_statement -> . ID COLON statement
    (159) labeled_statement -> . CASE constant_expression COLON statement
    (160) labeled_statement -> . DEFAULT COLON statement
    (161) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (162) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (163) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (164) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (165) expression_statement -> . SEMICOLON
    (166) expression_statement -> . expression SEMICOLON
    (171) selection_statement -> . IF LPAREN expression RPAREN statement
    (172) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (173) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (174) iteration_statement -> . WHILE LPAREN expression RPAREN
    (175) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (176) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (177) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (178) jump_statement -> . GOTO ID SEMICOLON
    (179) jump_statement -> . CONTINUE SEMICOLON
    (180) jump_statement -> . BREAK SEMICOLON
    (181) jump_statement -> . RETURN SEMICOLON
    (182) jump_statement -> . RETURN expression SEMICOLON
    (74) expression -> . assignment_expression
    (75) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    ID              shift and go to state 78
    CASE            shift and go to state 79
    DEFAULT         shift and go to state 80
    LCURLYBRACKET   shift and go to state 41
    SEMICOLON       shift and go to state 77
    IF              shift and go to state 82
    SWITCH          shift and go to state 84
    WHILE           shift and go to state 85
    DO              shift and go to state 86
    FOR             shift and go to state 87
    GOTO            shift and go to state 88
    CONTINUE        shift and go to state 89
    BREAK           shift and go to state 90
    RETURN          shift and go to state 91
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    statement                      shift and go to state 282
    labeled_statement              shift and go to state 71
    compound_statement             shift and go to state 72
    expression_statement           shift and go to state 73
    selection_statement            shift and go to state 74
    iteration_statement            shift and go to state 75
    jump_statement                 shift and go to state 76
    expression                     shift and go to state 81
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 93
    unary_expression               shift and go to state 94
    logical_or_expression          shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 237

    (160) labeled_statement -> DEFAULT COLON statement .

    RCURLYBRACKET   reduce using rule 160 (labeled_statement -> DEFAULT COLON statement .)
    ID              reduce using rule 160 (labeled_statement -> DEFAULT COLON statement .)
    CASE            reduce using rule 160 (labeled_statement -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 160 (labeled_statement -> DEFAULT COLON statement .)
    LCURLYBRACKET   reduce using rule 160 (labeled_statement -> DEFAULT COLON statement .)
    SEMICOLON       reduce using rule 160 (labeled_statement -> DEFAULT COLON statement .)
    IF              reduce using rule 160 (labeled_statement -> DEFAULT COLON statement .)
    SWITCH          reduce using rule 160 (labeled_statement -> DEFAULT COLON statement .)
    WHILE           reduce using rule 160 (labeled_statement -> DEFAULT COLON statement .)
    DO              reduce using rule 160 (labeled_statement -> DEFAULT COLON statement .)
    FOR             reduce using rule 160 (labeled_statement -> DEFAULT COLON statement .)
    GOTO            reduce using rule 160 (labeled_statement -> DEFAULT COLON statement .)
    CONTINUE        reduce using rule 160 (labeled_statement -> DEFAULT COLON statement .)
    BREAK           reduce using rule 160 (labeled_statement -> DEFAULT COLON statement .)
    RETURN          reduce using rule 160 (labeled_statement -> DEFAULT COLON statement .)
    INCREMENT       reduce using rule 160 (labeled_statement -> DEFAULT COLON statement .)
    DECREMENT       reduce using rule 160 (labeled_statement -> DEFAULT COLON statement .)
    SIZEOF          reduce using rule 160 (labeled_statement -> DEFAULT COLON statement .)
    AND             reduce using rule 160 (labeled_statement -> DEFAULT COLON statement .)
    MULTIPLY        reduce using rule 160 (labeled_statement -> DEFAULT COLON statement .)
    PLUS            reduce using rule 160 (labeled_statement -> DEFAULT COLON statement .)
    MINUS           reduce using rule 160 (labeled_statement -> DEFAULT COLON statement .)
    NOT             reduce using rule 160 (labeled_statement -> DEFAULT COLON statement .)
    LNOT            reduce using rule 160 (labeled_statement -> DEFAULT COLON statement .)
    INT_CONST       reduce using rule 160 (labeled_statement -> DEFAULT COLON statement .)
    FLOAT_CONST     reduce using rule 160 (labeled_statement -> DEFAULT COLON statement .)
    CHAR_CONST      reduce using rule 160 (labeled_statement -> DEFAULT COLON statement .)
    STRING_LITERAL  reduce using rule 160 (labeled_statement -> DEFAULT COLON statement .)
    LPAREN          reduce using rule 160 (labeled_statement -> DEFAULT COLON statement .)
    ELSE            reduce using rule 160 (labeled_statement -> DEFAULT COLON statement .)


state 238

    (75) expression -> expression COMMA assignment_expression .

    SEMICOLON       reduce using rule 75 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 75 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 75 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 75 (expression -> expression COMMA assignment_expression .)
    RSQUAREBRACKET  reduce using rule 75 (expression -> expression COMMA assignment_expression .)


state 239

    (171) selection_statement -> IF LPAREN expression . RPAREN statement
    (172) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (75) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 283
    COMMA           shift and go to state 159


state 240

    (6) primary_expression -> LPAREN expression RPAREN .

    LSQUAREBRACKET  reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    PERIOD          reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    ARROW           reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    INCREMENT       reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    DECREMENT       reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    MULTIPLYEQUAL   reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDEEQUAL     reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    MODEQUAL        reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    PLUSEQUAL       reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    MINUSEQUAL      reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFTEQUAL     reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFTEQUAL     reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    ANDEQUAL        reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    XOREQUAL        reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    OREQUAL         reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    NOTEQUAL        reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    CONDOP          reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    RSQUAREBRACKET  reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)
    RCURLYBRACKET   reduce using rule 6 (primary_expression -> LPAREN expression RPAREN .)


state 241

    (30) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 127
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114

    cast_expression                shift and go to state 284
    unary_expression               shift and go to state 126
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    primary_expression             shift and go to state 103

state 242

    (173) selection_statement -> SWITCH LPAREN expression . RPAREN statement
    (75) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 285
    COMMA           shift and go to state 159


state 243

    (174) iteration_statement -> WHILE LPAREN expression . RPAREN
    (75) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 286
    COMMA           shift and go to state 159


state 244

    (175) iteration_statement -> DO statement WHILE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 287


state 245

    (176) iteration_statement -> FOR LPAREN expression_statement . expression_statement RPAREN statement
    (177) iteration_statement -> FOR LPAREN expression_statement . expression_statement expression RPAREN statement
    (165) expression_statement -> . SEMICOLON
    (166) expression_statement -> . expression SEMICOLON
    (74) expression -> . assignment_expression
    (75) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 77
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    expression_statement           shift and go to state 288
    expression                     shift and go to state 81
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 93
    unary_expression               shift and go to state 94
    logical_or_expression          shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 246

    (178) jump_statement -> GOTO ID SEMICOLON .

    RCURLYBRACKET   reduce using rule 178 (jump_statement -> GOTO ID SEMICOLON .)
    ID              reduce using rule 178 (jump_statement -> GOTO ID SEMICOLON .)
    CASE            reduce using rule 178 (jump_statement -> GOTO ID SEMICOLON .)
    DEFAULT         reduce using rule 178 (jump_statement -> GOTO ID SEMICOLON .)
    LCURLYBRACKET   reduce using rule 178 (jump_statement -> GOTO ID SEMICOLON .)
    SEMICOLON       reduce using rule 178 (jump_statement -> GOTO ID SEMICOLON .)
    IF              reduce using rule 178 (jump_statement -> GOTO ID SEMICOLON .)
    SWITCH          reduce using rule 178 (jump_statement -> GOTO ID SEMICOLON .)
    WHILE           reduce using rule 178 (jump_statement -> GOTO ID SEMICOLON .)
    DO              reduce using rule 178 (jump_statement -> GOTO ID SEMICOLON .)
    FOR             reduce using rule 178 (jump_statement -> GOTO ID SEMICOLON .)
    GOTO            reduce using rule 178 (jump_statement -> GOTO ID SEMICOLON .)
    CONTINUE        reduce using rule 178 (jump_statement -> GOTO ID SEMICOLON .)
    BREAK           reduce using rule 178 (jump_statement -> GOTO ID SEMICOLON .)
    RETURN          reduce using rule 178 (jump_statement -> GOTO ID SEMICOLON .)
    INCREMENT       reduce using rule 178 (jump_statement -> GOTO ID SEMICOLON .)
    DECREMENT       reduce using rule 178 (jump_statement -> GOTO ID SEMICOLON .)
    SIZEOF          reduce using rule 178 (jump_statement -> GOTO ID SEMICOLON .)
    AND             reduce using rule 178 (jump_statement -> GOTO ID SEMICOLON .)
    MULTIPLY        reduce using rule 178 (jump_statement -> GOTO ID SEMICOLON .)
    PLUS            reduce using rule 178 (jump_statement -> GOTO ID SEMICOLON .)
    MINUS           reduce using rule 178 (jump_statement -> GOTO ID SEMICOLON .)
    NOT             reduce using rule 178 (jump_statement -> GOTO ID SEMICOLON .)
    LNOT            reduce using rule 178 (jump_statement -> GOTO ID SEMICOLON .)
    INT_CONST       reduce using rule 178 (jump_statement -> GOTO ID SEMICOLON .)
    FLOAT_CONST     reduce using rule 178 (jump_statement -> GOTO ID SEMICOLON .)
    CHAR_CONST      reduce using rule 178 (jump_statement -> GOTO ID SEMICOLON .)
    STRING_LITERAL  reduce using rule 178 (jump_statement -> GOTO ID SEMICOLON .)
    LPAREN          reduce using rule 178 (jump_statement -> GOTO ID SEMICOLON .)
    ELSE            reduce using rule 178 (jump_statement -> GOTO ID SEMICOLON .)


state 247

    (182) jump_statement -> RETURN expression SEMICOLON .

    RCURLYBRACKET   reduce using rule 182 (jump_statement -> RETURN expression SEMICOLON .)
    ID              reduce using rule 182 (jump_statement -> RETURN expression SEMICOLON .)
    CASE            reduce using rule 182 (jump_statement -> RETURN expression SEMICOLON .)
    DEFAULT         reduce using rule 182 (jump_statement -> RETURN expression SEMICOLON .)
    LCURLYBRACKET   reduce using rule 182 (jump_statement -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 182 (jump_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 182 (jump_statement -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 182 (jump_statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 182 (jump_statement -> RETURN expression SEMICOLON .)
    DO              reduce using rule 182 (jump_statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 182 (jump_statement -> RETURN expression SEMICOLON .)
    GOTO            reduce using rule 182 (jump_statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 182 (jump_statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 182 (jump_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 182 (jump_statement -> RETURN expression SEMICOLON .)
    INCREMENT       reduce using rule 182 (jump_statement -> RETURN expression SEMICOLON .)
    DECREMENT       reduce using rule 182 (jump_statement -> RETURN expression SEMICOLON .)
    SIZEOF          reduce using rule 182 (jump_statement -> RETURN expression SEMICOLON .)
    AND             reduce using rule 182 (jump_statement -> RETURN expression SEMICOLON .)
    MULTIPLY        reduce using rule 182 (jump_statement -> RETURN expression SEMICOLON .)
    PLUS            reduce using rule 182 (jump_statement -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 182 (jump_statement -> RETURN expression SEMICOLON .)
    NOT             reduce using rule 182 (jump_statement -> RETURN expression SEMICOLON .)
    LNOT            reduce using rule 182 (jump_statement -> RETURN expression SEMICOLON .)
    INT_CONST       reduce using rule 182 (jump_statement -> RETURN expression SEMICOLON .)
    FLOAT_CONST     reduce using rule 182 (jump_statement -> RETURN expression SEMICOLON .)
    CHAR_CONST      reduce using rule 182 (jump_statement -> RETURN expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 182 (jump_statement -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 182 (jump_statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 182 (jump_statement -> RETURN expression SEMICOLON .)


state 248

    (62) assignment_expression -> unary_expression assignment_operator assignment_expression .

    SEMICOLON       reduce using rule 62 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 62 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 62 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RCURLYBRACKET   reduce using rule 62 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 62 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RSQUAREBRACKET  reduce using rule 62 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 249

    (60) conditional_expression -> logical_or_expression CONDOP expression . COLON conditional_expression
    (75) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 289
    COMMA           shift and go to state 159


state 250

    (58) logical_or_expression -> logical_or_expression LOR logical_and_expression .
    (56) logical_and_expression -> logical_and_expression . LAND inclusive_or_expression

    CONDOP          reduce using rule 58 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    LOR             reduce using rule 58 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    SEMICOLON       reduce using rule 58 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    COMMA           reduce using rule 58 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RSQUAREBRACKET  reduce using rule 58 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    COLON           reduce using rule 58 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RPAREN          reduce using rule 58 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RCURLYBRACKET   reduce using rule 58 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    LAND            shift and go to state 200


state 251

    (10) postfix_expression -> postfix_expression LSQUAREBRACKET expression . RSQUAREBRACKET
    (75) expression -> expression . COMMA assignment_expression

    RSQUAREBRACKET  shift and go to state 290
    COMMA           shift and go to state 159


state 252

    (11) postfix_expression -> postfix_expression LPAREN RPAREN .

    LSQUAREBRACKET  reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PERIOD          reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ARROW           reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    INCREMENT       reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DECREMENT       reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUALS          reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MULTIPLYEQUAL   reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDEEQUAL     reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODEQUAL        reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSEQUAL       reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSEQUAL      reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFTEQUAL     reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFTEQUAL     reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ANDEQUAL        reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOREQUAL        reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OREQUAL         reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MULTIPLY        reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDE          reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD             reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFT          reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFT          reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LESS            reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GREATER         reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LESSEQUAL       reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GREATEREQUAL    reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUAL           reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NOTEQUAL        reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND             reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOR             reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR              reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LAND            reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    CONDOP          reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LOR             reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMICOLON       reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSQUAREBRACKET  reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RCURLYBRACKET   reduce using rule 11 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 253

    (13) postfix_expression -> postfix_expression LPAREN argument_expression_list . RPAREN
    (8) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 291
    COMMA           shift and go to state 292


state 254

    (7) argument_expression_list -> assignment_expression .

    RPAREN          reduce using rule 7 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 7 (argument_expression_list -> assignment_expression .)


state 255

    (12) postfix_expression -> postfix_expression PERIOD ID .

    LSQUAREBRACKET  reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    LPAREN          reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    PERIOD          reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    ARROW           reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    INCREMENT       reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    DECREMENT       reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    EQUALS          reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    MULTIPLYEQUAL   reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    DIVIDEEQUAL     reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    MODEQUAL        reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    PLUSEQUAL       reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    MINUSEQUAL      reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    LSHIFTEQUAL     reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    RSHIFTEQUAL     reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    ANDEQUAL        reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    XOREQUAL        reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    OREQUAL         reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    MULTIPLY        reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    DIVIDE          reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    MOD             reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    PLUS            reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    MINUS           reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    LSHIFT          reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    RSHIFT          reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    LESS            reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    GREATER         reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    LESSEQUAL       reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    GREATEREQUAL    reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    EQUAL           reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    NOTEQUAL        reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    AND             reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    XOR             reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    OR              reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    LAND            reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    CONDOP          reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    LOR             reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    SEMICOLON       reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    COMMA           reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    RSQUAREBRACKET  reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    COLON           reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    RPAREN          reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)
    RCURLYBRACKET   reduce using rule 12 (postfix_expression -> postfix_expression PERIOD ID .)


state 256

    (14) postfix_expression -> postfix_expression ARROW ID .

    LSQUAREBRACKET  reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    LPAREN          reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    PERIOD          reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    ARROW           reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    INCREMENT       reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    DECREMENT       reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    EQUALS          reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    MULTIPLYEQUAL   reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    DIVIDEEQUAL     reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    MODEQUAL        reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    PLUSEQUAL       reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    MINUSEQUAL      reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    LSHIFTEQUAL     reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    RSHIFTEQUAL     reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    ANDEQUAL        reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    XOREQUAL        reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    OREQUAL         reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    MULTIPLY        reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    DIVIDE          reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    MOD             reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    PLUS            reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    MINUS           reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    LSHIFT          reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    RSHIFT          reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    LESS            reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    GREATER         reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    LESSEQUAL       reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    GREATEREQUAL    reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    EQUAL           reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    NOTEQUAL        reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    AND             reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    XOR             reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    OR              reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    LAND            reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    CONDOP          reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    LOR             reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    SEMICOLON       reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    COMMA           reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    RSQUAREBRACKET  reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    COLON           reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    RPAREN          reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)
    RCURLYBRACKET   reduce using rule 14 (postfix_expression -> postfix_expression ARROW ID .)


state 257

    (22) unary_expression -> SIZEOF LPAREN type_name . RPAREN
    (103) type_specifier -> type_name .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 293
    VOID            reduce using rule 103 (type_specifier -> type_name .)
    CHAR            reduce using rule 103 (type_specifier -> type_name .)
    SHORT           reduce using rule 103 (type_specifier -> type_name .)
    INT             reduce using rule 103 (type_specifier -> type_name .)
    LONG            reduce using rule 103 (type_specifier -> type_name .)
    FLOAT           reduce using rule 103 (type_specifier -> type_name .)
    DOUBLE          reduce using rule 103 (type_specifier -> type_name .)
    SIGNED          reduce using rule 103 (type_specifier -> type_name .)
    UNSIGNED        reduce using rule 103 (type_specifier -> type_name .)
    CONST           reduce using rule 103 (type_specifier -> type_name .)
    VOLATILE        reduce using rule 103 (type_specifier -> type_name .)
    MULTIPLY        reduce using rule 103 (type_specifier -> type_name .)
    LPAREN          reduce using rule 103 (type_specifier -> type_name .)
    LSQUAREBRACKET  reduce using rule 103 (type_specifier -> type_name .)

  ! RPAREN          [ reduce using rule 103 (type_specifier -> type_name .) ]


state 258

    (56) logical_and_expression -> logical_and_expression LAND inclusive_or_expression .
    (54) inclusive_or_expression -> inclusive_or_expression . OR exclusive_or_expression

    LAND            reduce using rule 56 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    CONDOP          reduce using rule 56 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    LOR             reduce using rule 56 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    SEMICOLON       reduce using rule 56 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    COMMA           reduce using rule 56 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RSQUAREBRACKET  reduce using rule 56 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    COLON           reduce using rule 56 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RPAREN          reduce using rule 56 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RCURLYBRACKET   reduce using rule 56 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    OR              shift and go to state 201


state 259

    (54) inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .
    (52) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR              reduce using rule 54 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    LAND            reduce using rule 54 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    CONDOP          reduce using rule 54 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    LOR             reduce using rule 54 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    SEMICOLON       reduce using rule 54 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    COMMA           reduce using rule 54 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RSQUAREBRACKET  reduce using rule 54 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    COLON           reduce using rule 54 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RPAREN          reduce using rule 54 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RCURLYBRACKET   reduce using rule 54 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    XOR             shift and go to state 202


state 260

    (52) exclusive_or_expression -> exclusive_or_expression XOR and_expression .
    (50) and_expression -> and_expression . AND equality_expression

    XOR             reduce using rule 52 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    OR              reduce using rule 52 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    LAND            reduce using rule 52 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    CONDOP          reduce using rule 52 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    LOR             reduce using rule 52 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    SEMICOLON       reduce using rule 52 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COMMA           reduce using rule 52 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RSQUAREBRACKET  reduce using rule 52 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COLON           reduce using rule 52 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RPAREN          reduce using rule 52 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RCURLYBRACKET   reduce using rule 52 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    AND             shift and go to state 203


state 261

    (50) and_expression -> and_expression AND equality_expression .
    (47) equality_expression -> equality_expression . EQUAL relational_expression
    (48) equality_expression -> equality_expression . NOTEQUAL relational_expression

    AND             reduce using rule 50 (and_expression -> and_expression AND equality_expression .)
    XOR             reduce using rule 50 (and_expression -> and_expression AND equality_expression .)
    OR              reduce using rule 50 (and_expression -> and_expression AND equality_expression .)
    LAND            reduce using rule 50 (and_expression -> and_expression AND equality_expression .)
    CONDOP          reduce using rule 50 (and_expression -> and_expression AND equality_expression .)
    LOR             reduce using rule 50 (and_expression -> and_expression AND equality_expression .)
    SEMICOLON       reduce using rule 50 (and_expression -> and_expression AND equality_expression .)
    COMMA           reduce using rule 50 (and_expression -> and_expression AND equality_expression .)
    RSQUAREBRACKET  reduce using rule 50 (and_expression -> and_expression AND equality_expression .)
    COLON           reduce using rule 50 (and_expression -> and_expression AND equality_expression .)
    RPAREN          reduce using rule 50 (and_expression -> and_expression AND equality_expression .)
    RCURLYBRACKET   reduce using rule 50 (and_expression -> and_expression AND equality_expression .)
    EQUAL           shift and go to state 204
    NOTEQUAL        shift and go to state 205


state 262

    (47) equality_expression -> equality_expression EQUAL relational_expression .
    (42) relational_expression -> relational_expression . LESS shift_expression
    (43) relational_expression -> relational_expression . GREATER shift_expression
    (44) relational_expression -> relational_expression . LESSEQUAL shift_expression
    (45) relational_expression -> relational_expression . GREATEREQUAL shift_expression

    EQUAL           reduce using rule 47 (equality_expression -> equality_expression EQUAL relational_expression .)
    NOTEQUAL        reduce using rule 47 (equality_expression -> equality_expression EQUAL relational_expression .)
    AND             reduce using rule 47 (equality_expression -> equality_expression EQUAL relational_expression .)
    XOR             reduce using rule 47 (equality_expression -> equality_expression EQUAL relational_expression .)
    OR              reduce using rule 47 (equality_expression -> equality_expression EQUAL relational_expression .)
    LAND            reduce using rule 47 (equality_expression -> equality_expression EQUAL relational_expression .)
    CONDOP          reduce using rule 47 (equality_expression -> equality_expression EQUAL relational_expression .)
    LOR             reduce using rule 47 (equality_expression -> equality_expression EQUAL relational_expression .)
    SEMICOLON       reduce using rule 47 (equality_expression -> equality_expression EQUAL relational_expression .)
    COMMA           reduce using rule 47 (equality_expression -> equality_expression EQUAL relational_expression .)
    RSQUAREBRACKET  reduce using rule 47 (equality_expression -> equality_expression EQUAL relational_expression .)
    COLON           reduce using rule 47 (equality_expression -> equality_expression EQUAL relational_expression .)
    RPAREN          reduce using rule 47 (equality_expression -> equality_expression EQUAL relational_expression .)
    RCURLYBRACKET   reduce using rule 47 (equality_expression -> equality_expression EQUAL relational_expression .)
    LESS            shift and go to state 206
    GREATER         shift and go to state 207
    LESSEQUAL       shift and go to state 208
    GREATEREQUAL    shift and go to state 209


state 263

    (48) equality_expression -> equality_expression NOTEQUAL relational_expression .
    (42) relational_expression -> relational_expression . LESS shift_expression
    (43) relational_expression -> relational_expression . GREATER shift_expression
    (44) relational_expression -> relational_expression . LESSEQUAL shift_expression
    (45) relational_expression -> relational_expression . GREATEREQUAL shift_expression

    EQUAL           reduce using rule 48 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    NOTEQUAL        reduce using rule 48 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    AND             reduce using rule 48 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    XOR             reduce using rule 48 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    OR              reduce using rule 48 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    LAND            reduce using rule 48 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    CONDOP          reduce using rule 48 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    LOR             reduce using rule 48 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    SEMICOLON       reduce using rule 48 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    COMMA           reduce using rule 48 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    RSQUAREBRACKET  reduce using rule 48 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    COLON           reduce using rule 48 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    RPAREN          reduce using rule 48 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    RCURLYBRACKET   reduce using rule 48 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    LESS            shift and go to state 206
    GREATER         shift and go to state 207
    LESSEQUAL       shift and go to state 208
    GREATEREQUAL    shift and go to state 209


state 264

    (42) relational_expression -> relational_expression LESS shift_expression .
    (39) shift_expression -> shift_expression . LSHIFT additive_expression
    (40) shift_expression -> shift_expression . RSHIFT additive_expression

    LESS            reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    GREATER         reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    LESSEQUAL       reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    GREATEREQUAL    reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    EQUAL           reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    NOTEQUAL        reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    AND             reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    XOR             reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    OR              reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    LAND            reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    CONDOP          reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    LOR             reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    SEMICOLON       reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    COMMA           reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    RSQUAREBRACKET  reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    COLON           reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    RPAREN          reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    RCURLYBRACKET   reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    LSHIFT          shift and go to state 210
    RSHIFT          shift and go to state 211


state 265

    (43) relational_expression -> relational_expression GREATER shift_expression .
    (39) shift_expression -> shift_expression . LSHIFT additive_expression
    (40) shift_expression -> shift_expression . RSHIFT additive_expression

    LESS            reduce using rule 43 (relational_expression -> relational_expression GREATER shift_expression .)
    GREATER         reduce using rule 43 (relational_expression -> relational_expression GREATER shift_expression .)
    LESSEQUAL       reduce using rule 43 (relational_expression -> relational_expression GREATER shift_expression .)
    GREATEREQUAL    reduce using rule 43 (relational_expression -> relational_expression GREATER shift_expression .)
    EQUAL           reduce using rule 43 (relational_expression -> relational_expression GREATER shift_expression .)
    NOTEQUAL        reduce using rule 43 (relational_expression -> relational_expression GREATER shift_expression .)
    AND             reduce using rule 43 (relational_expression -> relational_expression GREATER shift_expression .)
    XOR             reduce using rule 43 (relational_expression -> relational_expression GREATER shift_expression .)
    OR              reduce using rule 43 (relational_expression -> relational_expression GREATER shift_expression .)
    LAND            reduce using rule 43 (relational_expression -> relational_expression GREATER shift_expression .)
    CONDOP          reduce using rule 43 (relational_expression -> relational_expression GREATER shift_expression .)
    LOR             reduce using rule 43 (relational_expression -> relational_expression GREATER shift_expression .)
    SEMICOLON       reduce using rule 43 (relational_expression -> relational_expression GREATER shift_expression .)
    COMMA           reduce using rule 43 (relational_expression -> relational_expression GREATER shift_expression .)
    RSQUAREBRACKET  reduce using rule 43 (relational_expression -> relational_expression GREATER shift_expression .)
    COLON           reduce using rule 43 (relational_expression -> relational_expression GREATER shift_expression .)
    RPAREN          reduce using rule 43 (relational_expression -> relational_expression GREATER shift_expression .)
    RCURLYBRACKET   reduce using rule 43 (relational_expression -> relational_expression GREATER shift_expression .)
    LSHIFT          shift and go to state 210
    RSHIFT          shift and go to state 211


state 266

    (44) relational_expression -> relational_expression LESSEQUAL shift_expression .
    (39) shift_expression -> shift_expression . LSHIFT additive_expression
    (40) shift_expression -> shift_expression . RSHIFT additive_expression

    LESS            reduce using rule 44 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    GREATER         reduce using rule 44 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    LESSEQUAL       reduce using rule 44 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    GREATEREQUAL    reduce using rule 44 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    EQUAL           reduce using rule 44 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    NOTEQUAL        reduce using rule 44 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    AND             reduce using rule 44 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    XOR             reduce using rule 44 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    OR              reduce using rule 44 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    LAND            reduce using rule 44 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    CONDOP          reduce using rule 44 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    LOR             reduce using rule 44 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    SEMICOLON       reduce using rule 44 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    COMMA           reduce using rule 44 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    RSQUAREBRACKET  reduce using rule 44 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    COLON           reduce using rule 44 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    RPAREN          reduce using rule 44 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    RCURLYBRACKET   reduce using rule 44 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    LSHIFT          shift and go to state 210
    RSHIFT          shift and go to state 211


state 267

    (45) relational_expression -> relational_expression GREATEREQUAL shift_expression .
    (39) shift_expression -> shift_expression . LSHIFT additive_expression
    (40) shift_expression -> shift_expression . RSHIFT additive_expression

    LESS            reduce using rule 45 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    GREATER         reduce using rule 45 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    LESSEQUAL       reduce using rule 45 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    GREATEREQUAL    reduce using rule 45 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    EQUAL           reduce using rule 45 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    NOTEQUAL        reduce using rule 45 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    AND             reduce using rule 45 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    XOR             reduce using rule 45 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    OR              reduce using rule 45 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    LAND            reduce using rule 45 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    CONDOP          reduce using rule 45 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    LOR             reduce using rule 45 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    SEMICOLON       reduce using rule 45 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    COMMA           reduce using rule 45 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    RSQUAREBRACKET  reduce using rule 45 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    COLON           reduce using rule 45 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    RPAREN          reduce using rule 45 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    RCURLYBRACKET   reduce using rule 45 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    LSHIFT          shift and go to state 210
    RSHIFT          shift and go to state 211


state 268

    (39) shift_expression -> shift_expression LSHIFT additive_expression .
    (36) additive_expression -> additive_expression . PLUS multiplicative_expression
    (37) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 39 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSHIFT          reduce using rule 39 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LESS            reduce using rule 39 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GREATER         reduce using rule 39 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LESSEQUAL       reduce using rule 39 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GREATEREQUAL    reduce using rule 39 (shift_expression -> shift_expression LSHIFT additive_expression .)
    EQUAL           reduce using rule 39 (shift_expression -> shift_expression LSHIFT additive_expression .)
    NOTEQUAL        reduce using rule 39 (shift_expression -> shift_expression LSHIFT additive_expression .)
    AND             reduce using rule 39 (shift_expression -> shift_expression LSHIFT additive_expression .)
    XOR             reduce using rule 39 (shift_expression -> shift_expression LSHIFT additive_expression .)
    OR              reduce using rule 39 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LAND            reduce using rule 39 (shift_expression -> shift_expression LSHIFT additive_expression .)
    CONDOP          reduce using rule 39 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LOR             reduce using rule 39 (shift_expression -> shift_expression LSHIFT additive_expression .)
    SEMICOLON       reduce using rule 39 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COMMA           reduce using rule 39 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSQUAREBRACKET  reduce using rule 39 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COLON           reduce using rule 39 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RPAREN          reduce using rule 39 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RCURLYBRACKET   reduce using rule 39 (shift_expression -> shift_expression LSHIFT additive_expression .)
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213


state 269

    (40) shift_expression -> shift_expression RSHIFT additive_expression .
    (36) additive_expression -> additive_expression . PLUS multiplicative_expression
    (37) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 40 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSHIFT          reduce using rule 40 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LESS            reduce using rule 40 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GREATER         reduce using rule 40 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LESSEQUAL       reduce using rule 40 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GREATEREQUAL    reduce using rule 40 (shift_expression -> shift_expression RSHIFT additive_expression .)
    EQUAL           reduce using rule 40 (shift_expression -> shift_expression RSHIFT additive_expression .)
    NOTEQUAL        reduce using rule 40 (shift_expression -> shift_expression RSHIFT additive_expression .)
    AND             reduce using rule 40 (shift_expression -> shift_expression RSHIFT additive_expression .)
    XOR             reduce using rule 40 (shift_expression -> shift_expression RSHIFT additive_expression .)
    OR              reduce using rule 40 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LAND            reduce using rule 40 (shift_expression -> shift_expression RSHIFT additive_expression .)
    CONDOP          reduce using rule 40 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LOR             reduce using rule 40 (shift_expression -> shift_expression RSHIFT additive_expression .)
    SEMICOLON       reduce using rule 40 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COMMA           reduce using rule 40 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSQUAREBRACKET  reduce using rule 40 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COLON           reduce using rule 40 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RPAREN          reduce using rule 40 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RCURLYBRACKET   reduce using rule 40 (shift_expression -> shift_expression RSHIFT additive_expression .)
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213


state 270

    (36) additive_expression -> additive_expression PLUS multiplicative_expression .
    (32) multiplicative_expression -> multiplicative_expression . MULTIPLY cast_expression
    (33) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (34) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 36 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 36 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LSHIFT          reduce using rule 36 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RSHIFT          reduce using rule 36 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS            reduce using rule 36 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER         reduce using rule 36 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESSEQUAL       reduce using rule 36 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATEREQUAL    reduce using rule 36 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQUAL           reduce using rule 36 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NOTEQUAL        reduce using rule 36 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 36 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    XOR             reduce using rule 36 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 36 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LAND            reduce using rule 36 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CONDOP          reduce using rule 36 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LOR             reduce using rule 36 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMICOLON       reduce using rule 36 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 36 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RSQUAREBRACKET  reduce using rule 36 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COLON           reduce using rule 36 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 36 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RCURLYBRACKET   reduce using rule 36 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MULTIPLY        shift and go to state 214
    DIVIDE          shift and go to state 215
    MOD             shift and go to state 216


state 271

    (37) additive_expression -> additive_expression MINUS multiplicative_expression .
    (32) multiplicative_expression -> multiplicative_expression . MULTIPLY cast_expression
    (33) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (34) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 37 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 37 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LSHIFT          reduce using rule 37 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RSHIFT          reduce using rule 37 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS            reduce using rule 37 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER         reduce using rule 37 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESSEQUAL       reduce using rule 37 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATEREQUAL    reduce using rule 37 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQUAL           reduce using rule 37 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NOTEQUAL        reduce using rule 37 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 37 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    XOR             reduce using rule 37 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 37 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LAND            reduce using rule 37 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CONDOP          reduce using rule 37 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LOR             reduce using rule 37 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMICOLON       reduce using rule 37 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 37 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RSQUAREBRACKET  reduce using rule 37 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COLON           reduce using rule 37 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 37 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RCURLYBRACKET   reduce using rule 37 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MULTIPLY        shift and go to state 214
    DIVIDE          shift and go to state 215
    MOD             shift and go to state 216


state 272

    (32) multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .

    MULTIPLY        reduce using rule 32 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    DIVIDE          reduce using rule 32 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    MOD             reduce using rule 32 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    PLUS            reduce using rule 32 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    MINUS           reduce using rule 32 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    LSHIFT          reduce using rule 32 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    RSHIFT          reduce using rule 32 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    LESS            reduce using rule 32 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    GREATER         reduce using rule 32 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    LESSEQUAL       reduce using rule 32 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    GREATEREQUAL    reduce using rule 32 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    EQUAL           reduce using rule 32 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    NOTEQUAL        reduce using rule 32 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    AND             reduce using rule 32 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    XOR             reduce using rule 32 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    OR              reduce using rule 32 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    LAND            reduce using rule 32 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    CONDOP          reduce using rule 32 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    LOR             reduce using rule 32 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    SEMICOLON       reduce using rule 32 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    COMMA           reduce using rule 32 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    RSQUAREBRACKET  reduce using rule 32 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    COLON           reduce using rule 32 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    RPAREN          reduce using rule 32 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    RCURLYBRACKET   reduce using rule 32 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)


state 273

    (33) multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .

    MULTIPLY        reduce using rule 33 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    DIVIDE          reduce using rule 33 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MOD             reduce using rule 33 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    PLUS            reduce using rule 33 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MINUS           reduce using rule 33 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LSHIFT          reduce using rule 33 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RSHIFT          reduce using rule 33 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LESS            reduce using rule 33 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GREATER         reduce using rule 33 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LESSEQUAL       reduce using rule 33 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GREATEREQUAL    reduce using rule 33 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    EQUAL           reduce using rule 33 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    NOTEQUAL        reduce using rule 33 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    AND             reduce using rule 33 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    XOR             reduce using rule 33 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    OR              reduce using rule 33 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LAND            reduce using rule 33 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    CONDOP          reduce using rule 33 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LOR             reduce using rule 33 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    SEMICOLON       reduce using rule 33 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COMMA           reduce using rule 33 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RSQUAREBRACKET  reduce using rule 33 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COLON           reduce using rule 33 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RPAREN          reduce using rule 33 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RCURLYBRACKET   reduce using rule 33 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)


state 274

    (34) multiplicative_expression -> multiplicative_expression MOD cast_expression .

    MULTIPLY        reduce using rule 34 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    DIVIDE          reduce using rule 34 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MOD             reduce using rule 34 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    PLUS            reduce using rule 34 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MINUS           reduce using rule 34 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LSHIFT          reduce using rule 34 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RSHIFT          reduce using rule 34 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LESS            reduce using rule 34 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    GREATER         reduce using rule 34 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LESSEQUAL       reduce using rule 34 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    GREATEREQUAL    reduce using rule 34 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    EQUAL           reduce using rule 34 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    NOTEQUAL        reduce using rule 34 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    AND             reduce using rule 34 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    XOR             reduce using rule 34 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    OR              reduce using rule 34 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LAND            reduce using rule 34 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    CONDOP          reduce using rule 34 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LOR             reduce using rule 34 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    SEMICOLON       reduce using rule 34 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    COMMA           reduce using rule 34 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RSQUAREBRACKET  reduce using rule 34 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    COLON           reduce using rule 34 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RPAREN          reduce using rule 34 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RCURLYBRACKET   reduce using rule 34 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)


state 275

    (133) identifier_list -> identifier_list COMMA ID .

    RPAREN          reduce using rule 133 (identifier_list -> identifier_list COMMA ID .)
    COMMA           reduce using rule 133 (identifier_list -> identifier_list COMMA ID .)


state 276

    (126) parameter_type_list -> parameter_list COMMA ELLIPSIS .

    RPAREN          reduce using rule 126 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)


state 277

    (128) parameter_list -> parameter_list COMMA parameter_declaration .

    COMMA           reduce using rule 128 (parameter_list -> parameter_list COMMA parameter_declaration .)
    RPAREN          reduce using rule 128 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 278

    (143) direct_abstract_declarator -> direct_abstract_declarator LPAREN constant_expression RPAREN .

    LPAREN          reduce using rule 143 (direct_abstract_declarator -> direct_abstract_declarator LPAREN constant_expression RPAREN .)
    TYPEDEF         reduce using rule 143 (direct_abstract_declarator -> direct_abstract_declarator LPAREN constant_expression RPAREN .)
    EXTERN          reduce using rule 143 (direct_abstract_declarator -> direct_abstract_declarator LPAREN constant_expression RPAREN .)
    STATIC          reduce using rule 143 (direct_abstract_declarator -> direct_abstract_declarator LPAREN constant_expression RPAREN .)
    AUTO            reduce using rule 143 (direct_abstract_declarator -> direct_abstract_declarator LPAREN constant_expression RPAREN .)
    REGISTER        reduce using rule 143 (direct_abstract_declarator -> direct_abstract_declarator LPAREN constant_expression RPAREN .)
    VOID            reduce using rule 143 (direct_abstract_declarator -> direct_abstract_declarator LPAREN constant_expression RPAREN .)
    CHAR            reduce using rule 143 (direct_abstract_declarator -> direct_abstract_declarator LPAREN constant_expression RPAREN .)
    SHORT           reduce using rule 143 (direct_abstract_declarator -> direct_abstract_declarator LPAREN constant_expression RPAREN .)
    INT             reduce using rule 143 (direct_abstract_declarator -> direct_abstract_declarator LPAREN constant_expression RPAREN .)
    LONG            reduce using rule 143 (direct_abstract_declarator -> direct_abstract_declarator LPAREN constant_expression RPAREN .)
    FLOAT           reduce using rule 143 (direct_abstract_declarator -> direct_abstract_declarator LPAREN constant_expression RPAREN .)
    DOUBLE          reduce using rule 143 (direct_abstract_declarator -> direct_abstract_declarator LPAREN constant_expression RPAREN .)
    SIGNED          reduce using rule 143 (direct_abstract_declarator -> direct_abstract_declarator LPAREN constant_expression RPAREN .)
    UNSIGNED        reduce using rule 143 (direct_abstract_declarator -> direct_abstract_declarator LPAREN constant_expression RPAREN .)
    CONST           reduce using rule 143 (direct_abstract_declarator -> direct_abstract_declarator LPAREN constant_expression RPAREN .)
    VOLATILE        reduce using rule 143 (direct_abstract_declarator -> direct_abstract_declarator LPAREN constant_expression RPAREN .)
    SEMICOLON       reduce using rule 143 (direct_abstract_declarator -> direct_abstract_declarator LPAREN constant_expression RPAREN .)
    MULTIPLY        reduce using rule 143 (direct_abstract_declarator -> direct_abstract_declarator LPAREN constant_expression RPAREN .)
    ID              reduce using rule 143 (direct_abstract_declarator -> direct_abstract_declarator LPAREN constant_expression RPAREN .)
    LSQUAREBRACKET  reduce using rule 143 (direct_abstract_declarator -> direct_abstract_declarator LPAREN constant_expression RPAREN .)
    COMMA           reduce using rule 143 (direct_abstract_declarator -> direct_abstract_declarator LPAREN constant_expression RPAREN .)
    RPAREN          reduce using rule 143 (direct_abstract_declarator -> direct_abstract_declarator LPAREN constant_expression RPAREN .)


state 279

    (146) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .

    LPAREN          reduce using rule 146 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    TYPEDEF         reduce using rule 146 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    EXTERN          reduce using rule 146 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    STATIC          reduce using rule 146 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    AUTO            reduce using rule 146 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    REGISTER        reduce using rule 146 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    VOID            reduce using rule 146 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    CHAR            reduce using rule 146 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    SHORT           reduce using rule 146 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    INT             reduce using rule 146 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    LONG            reduce using rule 146 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    FLOAT           reduce using rule 146 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    DOUBLE          reduce using rule 146 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    SIGNED          reduce using rule 146 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    UNSIGNED        reduce using rule 146 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    CONST           reduce using rule 146 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    VOLATILE        reduce using rule 146 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    SEMICOLON       reduce using rule 146 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    MULTIPLY        reduce using rule 146 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    ID              reduce using rule 146 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    LSQUAREBRACKET  reduce using rule 146 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 146 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 146 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)


state 280

    (148) initializer -> LCURLYBRACKET initializer_list RCURLYBRACKET .

    SEMICOLON       reduce using rule 148 (initializer -> LCURLYBRACKET initializer_list RCURLYBRACKET .)
    COMMA           reduce using rule 148 (initializer -> LCURLYBRACKET initializer_list RCURLYBRACKET .)
    RCURLYBRACKET   reduce using rule 148 (initializer -> LCURLYBRACKET initializer_list RCURLYBRACKET .)


state 281

    (149) initializer -> LCURLYBRACKET initializer_list COMMA . RCURLYBRACKET
    (151) initializer_list -> initializer_list COMMA . initializer
    (147) initializer -> . assignment_expression
    (148) initializer -> . LCURLYBRACKET initializer_list RCURLYBRACKET
    (149) initializer -> . LCURLYBRACKET initializer_list COMMA RCURLYBRACKET
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCURLYBRACKET   shift and go to state 294
    LCURLYBRACKET   shift and go to state 149
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    initializer                    shift and go to state 295
    assignment_expression          shift and go to state 148
    conditional_expression         shift and go to state 93
    unary_expression               shift and go to state 94
    logical_or_expression          shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 282

    (159) labeled_statement -> CASE constant_expression COLON statement .

    RCURLYBRACKET   reduce using rule 159 (labeled_statement -> CASE constant_expression COLON statement .)
    ID              reduce using rule 159 (labeled_statement -> CASE constant_expression COLON statement .)
    CASE            reduce using rule 159 (labeled_statement -> CASE constant_expression COLON statement .)
    DEFAULT         reduce using rule 159 (labeled_statement -> CASE constant_expression COLON statement .)
    LCURLYBRACKET   reduce using rule 159 (labeled_statement -> CASE constant_expression COLON statement .)
    SEMICOLON       reduce using rule 159 (labeled_statement -> CASE constant_expression COLON statement .)
    IF              reduce using rule 159 (labeled_statement -> CASE constant_expression COLON statement .)
    SWITCH          reduce using rule 159 (labeled_statement -> CASE constant_expression COLON statement .)
    WHILE           reduce using rule 159 (labeled_statement -> CASE constant_expression COLON statement .)
    DO              reduce using rule 159 (labeled_statement -> CASE constant_expression COLON statement .)
    FOR             reduce using rule 159 (labeled_statement -> CASE constant_expression COLON statement .)
    GOTO            reduce using rule 159 (labeled_statement -> CASE constant_expression COLON statement .)
    CONTINUE        reduce using rule 159 (labeled_statement -> CASE constant_expression COLON statement .)
    BREAK           reduce using rule 159 (labeled_statement -> CASE constant_expression COLON statement .)
    RETURN          reduce using rule 159 (labeled_statement -> CASE constant_expression COLON statement .)
    INCREMENT       reduce using rule 159 (labeled_statement -> CASE constant_expression COLON statement .)
    DECREMENT       reduce using rule 159 (labeled_statement -> CASE constant_expression COLON statement .)
    SIZEOF          reduce using rule 159 (labeled_statement -> CASE constant_expression COLON statement .)
    AND             reduce using rule 159 (labeled_statement -> CASE constant_expression COLON statement .)
    MULTIPLY        reduce using rule 159 (labeled_statement -> CASE constant_expression COLON statement .)
    PLUS            reduce using rule 159 (labeled_statement -> CASE constant_expression COLON statement .)
    MINUS           reduce using rule 159 (labeled_statement -> CASE constant_expression COLON statement .)
    NOT             reduce using rule 159 (labeled_statement -> CASE constant_expression COLON statement .)
    LNOT            reduce using rule 159 (labeled_statement -> CASE constant_expression COLON statement .)
    INT_CONST       reduce using rule 159 (labeled_statement -> CASE constant_expression COLON statement .)
    FLOAT_CONST     reduce using rule 159 (labeled_statement -> CASE constant_expression COLON statement .)
    CHAR_CONST      reduce using rule 159 (labeled_statement -> CASE constant_expression COLON statement .)
    STRING_LITERAL  reduce using rule 159 (labeled_statement -> CASE constant_expression COLON statement .)
    LPAREN          reduce using rule 159 (labeled_statement -> CASE constant_expression COLON statement .)
    ELSE            reduce using rule 159 (labeled_statement -> CASE constant_expression COLON statement .)


state 283

    (171) selection_statement -> IF LPAREN expression RPAREN . statement
    (172) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (152) statement -> . labeled_statement
    (153) statement -> . compound_statement
    (154) statement -> . expression_statement
    (155) statement -> . selection_statement
    (156) statement -> . iteration_statement
    (157) statement -> . jump_statement
    (158) labeled_statement -> . ID COLON statement
    (159) labeled_statement -> . CASE constant_expression COLON statement
    (160) labeled_statement -> . DEFAULT COLON statement
    (161) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (162) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (163) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (164) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (165) expression_statement -> . SEMICOLON
    (166) expression_statement -> . expression SEMICOLON
    (171) selection_statement -> . IF LPAREN expression RPAREN statement
    (172) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (173) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (174) iteration_statement -> . WHILE LPAREN expression RPAREN
    (175) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (176) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (177) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (178) jump_statement -> . GOTO ID SEMICOLON
    (179) jump_statement -> . CONTINUE SEMICOLON
    (180) jump_statement -> . BREAK SEMICOLON
    (181) jump_statement -> . RETURN SEMICOLON
    (182) jump_statement -> . RETURN expression SEMICOLON
    (74) expression -> . assignment_expression
    (75) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    ID              shift and go to state 78
    CASE            shift and go to state 79
    DEFAULT         shift and go to state 80
    LCURLYBRACKET   shift and go to state 41
    SEMICOLON       shift and go to state 77
    IF              shift and go to state 82
    SWITCH          shift and go to state 84
    WHILE           shift and go to state 85
    DO              shift and go to state 86
    FOR             shift and go to state 87
    GOTO            shift and go to state 88
    CONTINUE        shift and go to state 89
    BREAK           shift and go to state 90
    RETURN          shift and go to state 91
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    expression                     shift and go to state 81
    statement                      shift and go to state 296
    labeled_statement              shift and go to state 71
    compound_statement             shift and go to state 72
    expression_statement           shift and go to state 73
    selection_statement            shift and go to state 74
    iteration_statement            shift and go to state 75
    jump_statement                 shift and go to state 76
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 93
    unary_expression               shift and go to state 94
    logical_or_expression          shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 284

    (30) cast_expression -> LPAREN type_name RPAREN cast_expression .

    MULTIPLY        reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVIDE          reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MOD             reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUS            reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUS           reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFT          reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFT          reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LESS            reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GREATER         reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LESSEQUAL       reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GREATEREQUAL    reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQUAL           reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    NOTEQUAL        reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    AND             reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOR             reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OR              reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LAND            reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    CONDOP          reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LOR             reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SEMICOLON       reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COMMA           reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSQUAREBRACKET  reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COLON           reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RPAREN          reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQUALS          reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MULTIPLYEQUAL   reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVIDEEQUAL     reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MODEQUAL        reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUSEQUAL       reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUSEQUAL      reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFTEQUAL     reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFTEQUAL     reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ANDEQUAL        reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOREQUAL        reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OREQUAL         reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RCURLYBRACKET   reduce using rule 30 (cast_expression -> LPAREN type_name RPAREN cast_expression .)


state 285

    (173) selection_statement -> SWITCH LPAREN expression RPAREN . statement
    (152) statement -> . labeled_statement
    (153) statement -> . compound_statement
    (154) statement -> . expression_statement
    (155) statement -> . selection_statement
    (156) statement -> . iteration_statement
    (157) statement -> . jump_statement
    (158) labeled_statement -> . ID COLON statement
    (159) labeled_statement -> . CASE constant_expression COLON statement
    (160) labeled_statement -> . DEFAULT COLON statement
    (161) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (162) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (163) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (164) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (165) expression_statement -> . SEMICOLON
    (166) expression_statement -> . expression SEMICOLON
    (171) selection_statement -> . IF LPAREN expression RPAREN statement
    (172) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (173) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (174) iteration_statement -> . WHILE LPAREN expression RPAREN
    (175) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (176) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (177) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (178) jump_statement -> . GOTO ID SEMICOLON
    (179) jump_statement -> . CONTINUE SEMICOLON
    (180) jump_statement -> . BREAK SEMICOLON
    (181) jump_statement -> . RETURN SEMICOLON
    (182) jump_statement -> . RETURN expression SEMICOLON
    (74) expression -> . assignment_expression
    (75) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    ID              shift and go to state 78
    CASE            shift and go to state 79
    DEFAULT         shift and go to state 80
    LCURLYBRACKET   shift and go to state 41
    SEMICOLON       shift and go to state 77
    IF              shift and go to state 82
    SWITCH          shift and go to state 84
    WHILE           shift and go to state 85
    DO              shift and go to state 86
    FOR             shift and go to state 87
    GOTO            shift and go to state 88
    CONTINUE        shift and go to state 89
    BREAK           shift and go to state 90
    RETURN          shift and go to state 91
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    expression                     shift and go to state 81
    statement                      shift and go to state 297
    labeled_statement              shift and go to state 71
    compound_statement             shift and go to state 72
    expression_statement           shift and go to state 73
    selection_statement            shift and go to state 74
    iteration_statement            shift and go to state 75
    jump_statement                 shift and go to state 76
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 93
    unary_expression               shift and go to state 94
    logical_or_expression          shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 286

    (174) iteration_statement -> WHILE LPAREN expression RPAREN .

    RCURLYBRACKET   reduce using rule 174 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    ID              reduce using rule 174 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    CASE            reduce using rule 174 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 174 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    LCURLYBRACKET   reduce using rule 174 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 174 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    IF              reduce using rule 174 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    SWITCH          reduce using rule 174 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    WHILE           reduce using rule 174 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    DO              reduce using rule 174 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    FOR             reduce using rule 174 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    GOTO            reduce using rule 174 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 174 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    BREAK           reduce using rule 174 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    RETURN          reduce using rule 174 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    INCREMENT       reduce using rule 174 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    DECREMENT       reduce using rule 174 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    SIZEOF          reduce using rule 174 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    AND             reduce using rule 174 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 174 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    PLUS            reduce using rule 174 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    MINUS           reduce using rule 174 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    NOT             reduce using rule 174 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    LNOT            reduce using rule 174 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    INT_CONST       reduce using rule 174 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    FLOAT_CONST     reduce using rule 174 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    CHAR_CONST      reduce using rule 174 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    STRING_LITERAL  reduce using rule 174 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    LPAREN          reduce using rule 174 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    ELSE            reduce using rule 174 (iteration_statement -> WHILE LPAREN expression RPAREN .)


state 287

    (175) iteration_statement -> DO statement WHILE LPAREN . expression RPAREN SEMICOLON
    (74) expression -> . assignment_expression
    (75) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    expression                     shift and go to state 298
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 93
    unary_expression               shift and go to state 94
    logical_or_expression          shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 288

    (176) iteration_statement -> FOR LPAREN expression_statement expression_statement . RPAREN statement
    (177) iteration_statement -> FOR LPAREN expression_statement expression_statement . expression RPAREN statement
    (74) expression -> . assignment_expression
    (75) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 299
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    expression                     shift and go to state 300
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 93
    unary_expression               shift and go to state 94
    logical_or_expression          shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 289

    (60) conditional_expression -> logical_or_expression CONDOP expression COLON . conditional_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 127
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114

    logical_or_expression          shift and go to state 95
    conditional_expression         shift and go to state 301
    logical_and_expression         shift and go to state 102
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 126
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    primary_expression             shift and go to state 103

state 290

    (10) postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .

    LSQUAREBRACKET  reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    LPAREN          reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    PERIOD          reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    ARROW           reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    INCREMENT       reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    DECREMENT       reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    EQUALS          reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    MULTIPLYEQUAL   reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    DIVIDEEQUAL     reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    MODEQUAL        reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    PLUSEQUAL       reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    MINUSEQUAL      reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    LSHIFTEQUAL     reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    RSHIFTEQUAL     reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    ANDEQUAL        reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    XOREQUAL        reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    OREQUAL         reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    MULTIPLY        reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    DIVIDE          reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    MOD             reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    PLUS            reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    MINUS           reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    LSHIFT          reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    RSHIFT          reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    LESS            reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    GREATER         reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    LESSEQUAL       reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    GREATEREQUAL    reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    EQUAL           reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    NOTEQUAL        reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    AND             reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    XOR             reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    OR              reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    LAND            reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    CONDOP          reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    LOR             reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    SEMICOLON       reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    COMMA           reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    RSQUAREBRACKET  reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    COLON           reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    RPAREN          reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    RCURLYBRACKET   reduce using rule 10 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)


state 291

    (13) postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .

    LSQUAREBRACKET  reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LPAREN          reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PERIOD          reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ARROW           reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    INCREMENT       reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DECREMENT       reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQUALS          reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MULTIPLYEQUAL   reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVIDEEQUAL     reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MODEQUAL        reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUSEQUAL       reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUSEQUAL      reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LSHIFTEQUAL     reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSHIFTEQUAL     reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ANDEQUAL        reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOREQUAL        reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OREQUAL         reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MULTIPLY        reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVIDE          reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MOD             reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUS            reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUS           reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LSHIFT          reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSHIFT          reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LESS            reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GREATER         reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LESSEQUAL       reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GREATEREQUAL    reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQUAL           reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    NOTEQUAL        reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AND             reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOR             reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OR              reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LAND            reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    CONDOP          reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LOR             reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SEMICOLON       reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COMMA           reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSQUAREBRACKET  reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COLON           reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RPAREN          reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RCURLYBRACKET   reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)


state 292

    (8) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    ID              shift and go to state 128
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    assignment_expression          shift and go to state 302
    conditional_expression         shift and go to state 93
    unary_expression               shift and go to state 94
    logical_or_expression          shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 293

    (22) unary_expression -> SIZEOF LPAREN type_name RPAREN .

    EQUALS          reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MULTIPLYEQUAL   reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVIDEEQUAL     reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MODEQUAL        reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUSEQUAL       reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUSEQUAL      reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFTEQUAL     reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFTEQUAL     reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ANDEQUAL        reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOREQUAL        reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OREQUAL         reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MULTIPLY        reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVIDE          reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MOD             reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUS            reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUS           reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LESS            reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GREATER         reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LESSEQUAL       reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GREATEREQUAL    reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQUAL           reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    NOTEQUAL        reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    AND             reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOR             reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OR              reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LAND            reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    CONDOP          reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LOR             reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SEMICOLON       reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COMMA           reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSQUAREBRACKET  reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COLON           reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RCURLYBRACKET   reduce using rule 22 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)


state 294

    (149) initializer -> LCURLYBRACKET initializer_list COMMA RCURLYBRACKET .

    SEMICOLON       reduce using rule 149 (initializer -> LCURLYBRACKET initializer_list COMMA RCURLYBRACKET .)
    COMMA           reduce using rule 149 (initializer -> LCURLYBRACKET initializer_list COMMA RCURLYBRACKET .)
    RCURLYBRACKET   reduce using rule 149 (initializer -> LCURLYBRACKET initializer_list COMMA RCURLYBRACKET .)


state 295

    (151) initializer_list -> initializer_list COMMA initializer .

    RCURLYBRACKET   reduce using rule 151 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 151 (initializer_list -> initializer_list COMMA initializer .)


state 296

    (171) selection_statement -> IF LPAREN expression RPAREN statement .
    (172) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RCURLYBRACKET   reduce using rule 171 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 171 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 171 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 171 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LCURLYBRACKET   reduce using rule 171 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 171 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 171 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 171 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 171 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 171 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 171 (selection_statement -> IF LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 171 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 171 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 171 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 171 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INCREMENT       reduce using rule 171 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DECREMENT       reduce using rule 171 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 171 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AND             reduce using rule 171 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MULTIPLY        reduce using rule 171 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 171 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 171 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 171 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 171 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 171 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 171 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 171 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 171 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 171 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 303

  ! ELSE            [ reduce using rule 171 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 297

    (173) selection_statement -> SWITCH LPAREN expression RPAREN statement .

    RCURLYBRACKET   reduce using rule 173 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ID              reduce using rule 173 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CASE            reduce using rule 173 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 173 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LCURLYBRACKET   reduce using rule 173 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 173 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IF              reduce using rule 173 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 173 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 173 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DO              reduce using rule 173 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FOR             reduce using rule 173 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 173 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 173 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 173 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 173 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INCREMENT       reduce using rule 173 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DECREMENT       reduce using rule 173 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 173 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    AND             reduce using rule 173 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MULTIPLY        reduce using rule 173 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 173 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 173 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NOT             reduce using rule 173 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 173 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 173 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 173 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 173 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 173 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 173 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 173 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)


state 298

    (175) iteration_statement -> DO statement WHILE LPAREN expression . RPAREN SEMICOLON
    (75) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 304
    COMMA           shift and go to state 159


state 299

    (176) iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN . statement
    (152) statement -> . labeled_statement
    (153) statement -> . compound_statement
    (154) statement -> . expression_statement
    (155) statement -> . selection_statement
    (156) statement -> . iteration_statement
    (157) statement -> . jump_statement
    (158) labeled_statement -> . ID COLON statement
    (159) labeled_statement -> . CASE constant_expression COLON statement
    (160) labeled_statement -> . DEFAULT COLON statement
    (161) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (162) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (163) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (164) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (165) expression_statement -> . SEMICOLON
    (166) expression_statement -> . expression SEMICOLON
    (171) selection_statement -> . IF LPAREN expression RPAREN statement
    (172) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (173) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (174) iteration_statement -> . WHILE LPAREN expression RPAREN
    (175) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (176) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (177) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (178) jump_statement -> . GOTO ID SEMICOLON
    (179) jump_statement -> . CONTINUE SEMICOLON
    (180) jump_statement -> . BREAK SEMICOLON
    (181) jump_statement -> . RETURN SEMICOLON
    (182) jump_statement -> . RETURN expression SEMICOLON
    (74) expression -> . assignment_expression
    (75) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    ID              shift and go to state 78
    CASE            shift and go to state 79
    DEFAULT         shift and go to state 80
    LCURLYBRACKET   shift and go to state 41
    SEMICOLON       shift and go to state 77
    IF              shift and go to state 82
    SWITCH          shift and go to state 84
    WHILE           shift and go to state 85
    DO              shift and go to state 86
    FOR             shift and go to state 87
    GOTO            shift and go to state 88
    CONTINUE        shift and go to state 89
    BREAK           shift and go to state 90
    RETURN          shift and go to state 91
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    expression_statement           shift and go to state 73
    statement                      shift and go to state 305
    labeled_statement              shift and go to state 71
    compound_statement             shift and go to state 72
    selection_statement            shift and go to state 74
    iteration_statement            shift and go to state 75
    jump_statement                 shift and go to state 76
    expression                     shift and go to state 81
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 93
    unary_expression               shift and go to state 94
    logical_or_expression          shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 300

    (177) iteration_statement -> FOR LPAREN expression_statement expression_statement expression . RPAREN statement
    (75) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 306
    COMMA           shift and go to state 159


state 301

    (60) conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .

    SEMICOLON       reduce using rule 60 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    COMMA           reduce using rule 60 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    RSQUAREBRACKET  reduce using rule 60 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    COLON           reduce using rule 60 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    RPAREN          reduce using rule 60 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    RCURLYBRACKET   reduce using rule 60 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)


state 302

    (8) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 8 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 8 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 303

    (172) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (152) statement -> . labeled_statement
    (153) statement -> . compound_statement
    (154) statement -> . expression_statement
    (155) statement -> . selection_statement
    (156) statement -> . iteration_statement
    (157) statement -> . jump_statement
    (158) labeled_statement -> . ID COLON statement
    (159) labeled_statement -> . CASE constant_expression COLON statement
    (160) labeled_statement -> . DEFAULT COLON statement
    (161) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (162) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (163) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (164) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (165) expression_statement -> . SEMICOLON
    (166) expression_statement -> . expression SEMICOLON
    (171) selection_statement -> . IF LPAREN expression RPAREN statement
    (172) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (173) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (174) iteration_statement -> . WHILE LPAREN expression RPAREN
    (175) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (176) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (177) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (178) jump_statement -> . GOTO ID SEMICOLON
    (179) jump_statement -> . CONTINUE SEMICOLON
    (180) jump_statement -> . BREAK SEMICOLON
    (181) jump_statement -> . RETURN SEMICOLON
    (182) jump_statement -> . RETURN expression SEMICOLON
    (74) expression -> . assignment_expression
    (75) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    ID              shift and go to state 78
    CASE            shift and go to state 79
    DEFAULT         shift and go to state 80
    LCURLYBRACKET   shift and go to state 41
    SEMICOLON       shift and go to state 77
    IF              shift and go to state 82
    SWITCH          shift and go to state 84
    WHILE           shift and go to state 85
    DO              shift and go to state 86
    FOR             shift and go to state 87
    GOTO            shift and go to state 88
    CONTINUE        shift and go to state 89
    BREAK           shift and go to state 90
    RETURN          shift and go to state 91
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    expression                     shift and go to state 81
    statement                      shift and go to state 307
    labeled_statement              shift and go to state 71
    compound_statement             shift and go to state 72
    expression_statement           shift and go to state 73
    selection_statement            shift and go to state 74
    iteration_statement            shift and go to state 75
    jump_statement                 shift and go to state 76
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 93
    unary_expression               shift and go to state 94
    logical_or_expression          shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 304

    (175) iteration_statement -> DO statement WHILE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 308


state 305

    (176) iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .

    RCURLYBRACKET   reduce using rule 176 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    ID              reduce using rule 176 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CASE            reduce using rule 176 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DEFAULT         reduce using rule 176 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    LCURLYBRACKET   reduce using rule 176 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SEMICOLON       reduce using rule 176 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    IF              reduce using rule 176 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SWITCH          reduce using rule 176 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    WHILE           reduce using rule 176 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DO              reduce using rule 176 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    FOR             reduce using rule 176 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    GOTO            reduce using rule 176 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CONTINUE        reduce using rule 176 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    BREAK           reduce using rule 176 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    RETURN          reduce using rule 176 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    INCREMENT       reduce using rule 176 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DECREMENT       reduce using rule 176 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SIZEOF          reduce using rule 176 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    AND             reduce using rule 176 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    MULTIPLY        reduce using rule 176 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    PLUS            reduce using rule 176 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    MINUS           reduce using rule 176 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    NOT             reduce using rule 176 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    LNOT            reduce using rule 176 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    INT_CONST       reduce using rule 176 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    FLOAT_CONST     reduce using rule 176 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CHAR_CONST      reduce using rule 176 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    STRING_LITERAL  reduce using rule 176 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    LPAREN          reduce using rule 176 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    ELSE            reduce using rule 176 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)


state 306

    (177) iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN . statement
    (152) statement -> . labeled_statement
    (153) statement -> . compound_statement
    (154) statement -> . expression_statement
    (155) statement -> . selection_statement
    (156) statement -> . iteration_statement
    (157) statement -> . jump_statement
    (158) labeled_statement -> . ID COLON statement
    (159) labeled_statement -> . CASE constant_expression COLON statement
    (160) labeled_statement -> . DEFAULT COLON statement
    (161) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (162) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (163) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (164) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (165) expression_statement -> . SEMICOLON
    (166) expression_statement -> . expression SEMICOLON
    (171) selection_statement -> . IF LPAREN expression RPAREN statement
    (172) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (173) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (174) iteration_statement -> . WHILE LPAREN expression RPAREN
    (175) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (176) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (177) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (178) jump_statement -> . GOTO ID SEMICOLON
    (179) jump_statement -> . CONTINUE SEMICOLON
    (180) jump_statement -> . BREAK SEMICOLON
    (181) jump_statement -> . RETURN SEMICOLON
    (182) jump_statement -> . RETURN expression SEMICOLON
    (74) expression -> . assignment_expression
    (75) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INCREMENT unary_expression
    (19) unary_expression -> . DECREMENT unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (11) postfix_expression -> . postfix_expression LPAREN RPAREN
    (12) postfix_expression -> . postfix_expression PERIOD ID
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression ARROW ID
    (15) postfix_expression -> . postfix_expression INCREMENT
    (16) postfix_expression -> . postfix_expression DECREMENT
    (23) unary_operator -> . AND
    (24) unary_operator -> . MULTIPLY
    (25) unary_operator -> . PLUS
    (26) unary_operator -> . MINUS
    (27) unary_operator -> . NOT
    (28) unary_operator -> . LNOT
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST
    (3) primary_expression -> . FLOAT_CONST
    (4) primary_expression -> . CHAR_CONST
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . LPAREN expression RPAREN
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression AND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQUAL relational_expression
    (48) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GREATER shift_expression
    (44) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (45) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LSHIFT additive_expression
    (40) shift_expression -> . shift_expression RSHIFT additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression PLUS multiplicative_expression
    (37) additive_expression -> . additive_expression MINUS multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (33) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . LPAREN type_name RPAREN cast_expression

    ID              shift and go to state 78
    CASE            shift and go to state 79
    DEFAULT         shift and go to state 80
    LCURLYBRACKET   shift and go to state 41
    SEMICOLON       shift and go to state 77
    IF              shift and go to state 82
    SWITCH          shift and go to state 84
    WHILE           shift and go to state 85
    DO              shift and go to state 86
    FOR             shift and go to state 87
    GOTO            shift and go to state 88
    CONTINUE        shift and go to state 89
    BREAK           shift and go to state 90
    RETURN          shift and go to state 91
    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    SIZEOF          shift and go to state 101
    AND             shift and go to state 104
    MULTIPLY        shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    NOT             shift and go to state 108
    LNOT            shift and go to state 109
    INT_CONST       shift and go to state 111
    FLOAT_CONST     shift and go to state 112
    CHAR_CONST      shift and go to state 113
    STRING_LITERAL  shift and go to state 114
    LPAREN          shift and go to state 83

    expression_statement           shift and go to state 73
    expression                     shift and go to state 81
    statement                      shift and go to state 309
    labeled_statement              shift and go to state 71
    compound_statement             shift and go to state 72
    selection_statement            shift and go to state 74
    iteration_statement            shift and go to state 75
    jump_statement                 shift and go to state 76
    assignment_expression          shift and go to state 92
    conditional_expression         shift and go to state 93
    unary_expression               shift and go to state 94
    logical_or_expression          shift and go to state 95
    postfix_expression             shift and go to state 96
    unary_operator                 shift and go to state 99
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 102
    primary_expression             shift and go to state 103
    inclusive_or_expression        shift and go to state 110
    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 307

    (172) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    RCURLYBRACKET   reduce using rule 172 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 172 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 172 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 172 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LCURLYBRACKET   reduce using rule 172 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMICOLON       reduce using rule 172 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 172 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 172 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 172 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DO              reduce using rule 172 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 172 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    GOTO            reduce using rule 172 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 172 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 172 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 172 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INCREMENT       reduce using rule 172 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DECREMENT       reduce using rule 172 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIZEOF          reduce using rule 172 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AND             reduce using rule 172 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MULTIPLY        reduce using rule 172 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 172 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 172 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 172 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LNOT            reduce using rule 172 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT_CONST       reduce using rule 172 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT_CONST     reduce using rule 172 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR_CONST      reduce using rule 172 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING_LITERAL  reduce using rule 172 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 172 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 172 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 308

    (175) iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .

    RCURLYBRACKET   reduce using rule 175 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ID              reduce using rule 175 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CASE            reduce using rule 175 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 175 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LCURLYBRACKET   reduce using rule 175 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 175 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 175 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SWITCH          reduce using rule 175 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 175 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DO              reduce using rule 175 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 175 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    GOTO            reduce using rule 175 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 175 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BREAK           reduce using rule 175 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 175 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    INCREMENT       reduce using rule 175 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DECREMENT       reduce using rule 175 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SIZEOF          reduce using rule 175 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    AND             reduce using rule 175 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    MULTIPLY        reduce using rule 175 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    PLUS            reduce using rule 175 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    MINUS           reduce using rule 175 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    NOT             reduce using rule 175 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LNOT            reduce using rule 175 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    INT_CONST       reduce using rule 175 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FLOAT_CONST     reduce using rule 175 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CHAR_CONST      reduce using rule 175 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STRING_LITERAL  reduce using rule 175 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 175 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ELSE            reduce using rule 175 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)


state 309

    (177) iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .

    RCURLYBRACKET   reduce using rule 177 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ID              reduce using rule 177 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CASE            reduce using rule 177 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DEFAULT         reduce using rule 177 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LCURLYBRACKET   reduce using rule 177 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SEMICOLON       reduce using rule 177 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    IF              reduce using rule 177 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SWITCH          reduce using rule 177 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    WHILE           reduce using rule 177 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DO              reduce using rule 177 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FOR             reduce using rule 177 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    GOTO            reduce using rule 177 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CONTINUE        reduce using rule 177 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    BREAK           reduce using rule 177 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    RETURN          reduce using rule 177 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    INCREMENT       reduce using rule 177 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DECREMENT       reduce using rule 177 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SIZEOF          reduce using rule 177 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    AND             reduce using rule 177 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    MULTIPLY        reduce using rule 177 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    PLUS            reduce using rule 177 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    MINUS           reduce using rule 177 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    NOT             reduce using rule 177 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LNOT            reduce using rule 177 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    INT_CONST       reduce using rule 177 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 177 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CHAR_CONST      reduce using rule 177 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 177 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LPAREN          reduce using rule 177 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ELSE            reduce using rule 177 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for TYPEDEF in state 8 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 8 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 8 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 8 resolved as shift
WARNING: shift/reduce conflict for REGISTER in state 8 resolved as shift
WARNING: shift/reduce conflict for VOID in state 8 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 8 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 8 resolved as shift
WARNING: shift/reduce conflict for INT in state 8 resolved as shift
WARNING: shift/reduce conflict for LONG in state 8 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 8 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 8 resolved as shift
WARNING: shift/reduce conflict for SIGNED in state 8 resolved as shift
WARNING: shift/reduce conflict for UNSIGNED in state 8 resolved as shift
WARNING: shift/reduce conflict for CONST in state 8 resolved as shift
WARNING: shift/reduce conflict for VOLATILE in state 8 resolved as shift
WARNING: shift/reduce conflict for TYPEDEF in state 9 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 9 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 9 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 9 resolved as shift
WARNING: shift/reduce conflict for REGISTER in state 9 resolved as shift
WARNING: shift/reduce conflict for VOID in state 9 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 9 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 9 resolved as shift
WARNING: shift/reduce conflict for INT in state 9 resolved as shift
WARNING: shift/reduce conflict for LONG in state 9 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 9 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 9 resolved as shift
WARNING: shift/reduce conflict for SIGNED in state 9 resolved as shift
WARNING: shift/reduce conflict for UNSIGNED in state 9 resolved as shift
WARNING: shift/reduce conflict for CONST in state 9 resolved as shift
WARNING: shift/reduce conflict for VOLATILE in state 9 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 32 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 32 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBRACKET in state 32 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 45 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 45 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBRACKET in state 45 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 47 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 47 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBRACKET in state 47 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 56 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBRACKET in state 56 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 57 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 139 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 162 resolved as shift
WARNING: shift/reduce conflict for VOID in state 163 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 163 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 163 resolved as shift
WARNING: shift/reduce conflict for INT in state 163 resolved as shift
WARNING: shift/reduce conflict for LONG in state 163 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 163 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 163 resolved as shift
WARNING: shift/reduce conflict for SIGNED in state 163 resolved as shift
WARNING: shift/reduce conflict for UNSIGNED in state 163 resolved as shift
WARNING: shift/reduce conflict for CONST in state 163 resolved as shift
WARNING: shift/reduce conflict for VOLATILE in state 163 resolved as shift
WARNING: shift/reduce conflict for VOID in state 164 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 164 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 164 resolved as shift
WARNING: shift/reduce conflict for INT in state 164 resolved as shift
WARNING: shift/reduce conflict for LONG in state 164 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 164 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 164 resolved as shift
WARNING: shift/reduce conflict for SIGNED in state 164 resolved as shift
WARNING: shift/reduce conflict for UNSIGNED in state 164 resolved as shift
WARNING: shift/reduce conflict for CONST in state 164 resolved as shift
WARNING: shift/reduce conflict for VOLATILE in state 164 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 257 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 296 resolved as shift
WARNING: reduce/reduce conflict in state 8 resolved using rule (declaration_specifiers -> type_specifier)
WARNING: rejected rule (specifier_qualifier_list -> type_specifier) in state 8
WARNING: reduce/reduce conflict in state 9 resolved using rule (declaration_specifiers -> type_qualifier)
WARNING: rejected rule (specifier_qualifier_list -> type_qualifier) in state 9
WARNING: reduce/reduce conflict in state 45 resolved using rule (specifier_qualifier_list -> type_specifier specifier_qualifier_list)
WARNING: rejected rule (type_name -> specifier_qualifier_list) in state 45
WARNING: reduce/reduce conflict in state 47 resolved using rule (specifier_qualifier_list -> type_qualifier specifier_qualifier_list)
WARNING: rejected rule (type_name -> specifier_qualifier_list) in state 47
