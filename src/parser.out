Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> translation_unit
Rule 1     primary_expression -> ID
Rule 2     primary_expression -> CHAR_CONST
Rule 3     primary_expression -> INT_CONST
Rule 4     primary_expression -> FLOAT_CONST
Rule 5     primary_expression -> OCTAL_CONST
Rule 6     primary_expression -> HEX_CONST
Rule 7     primary_expression -> BIN_CONST
Rule 8     primary_expression -> STRING_LITERAL
Rule 9     primary_expression -> LPAREN expression RPAREN
Rule 10    postfix_expression -> primary_expression
Rule 11    postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
Rule 12    postfix_expression -> postfix_expression LPAREN RPAREN
Rule 13    postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN
Rule 14    postfix_expression -> postfix_expression PERIOD ID
Rule 15    postfix_expression -> postfix_expression ARROW ID
Rule 16    postfix_expression -> postfix_expression INCREMENT
Rule 17    postfix_expression -> postfix_expression DECREMENT
Rule 18    argument_expression_list -> assignment_expression
Rule 19    argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 20    unary_expression -> postfix_expression
Rule 21    unary_expression -> INCREMENT unary_expression
Rule 22    unary_expression -> DECREMENT unary_expression
Rule 23    unary_expression -> unary_operator cast_expression
Rule 24    unary_expression -> SIZEOF unary_expression
Rule 25    unary_expression -> SIZEOF LPAREN type_name RPAREN
Rule 26    unary_operator -> AND
Rule 27    unary_operator -> MULTIPLY
Rule 28    unary_operator -> PLUS
Rule 29    unary_operator -> MINUS
Rule 30    unary_operator -> NOT
Rule 31    unary_operator -> LNOT
Rule 32    cast_expression -> unary_expression
Rule 33    cast_expression -> LPAREN type_name RPAREN cast_expression
Rule 34    multiplicative_expression -> cast_expression
Rule 35    multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression
Rule 36    multiplicative_expression -> multiplicative_expression DIVIDE cast_expression
Rule 37    multiplicative_expression -> multiplicative_expression MOD cast_expression
Rule 38    additive_expression -> multiplicative_expression
Rule 39    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 40    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 41    shift_expression -> additive_expression
Rule 42    shift_expression -> shift_expression LSHIFT additive_expression
Rule 43    shift_expression -> shift_expression RSHIFT additive_expression
Rule 44    relational_expression -> shift_expression
Rule 45    relational_expression -> relational_expression LESS shift_expression
Rule 46    relational_expression -> relational_expression GREATER shift_expression
Rule 47    relational_expression -> relational_expression LESSEQUAL shift_expression
Rule 48    relational_expression -> relational_expression GREATEREQUAL shift_expression
Rule 49    equality_expression -> relational_expression
Rule 50    equality_expression -> equality_expression EQUAL relational_expression
Rule 51    equality_expression -> equality_expression NOTEQUAL relational_expression
Rule 52    and_expression -> equality_expression
Rule 53    and_expression -> and_expression AND equality_expression
Rule 54    exclusive_or_expression -> and_expression
Rule 55    exclusive_or_expression -> exclusive_or_expression XOR and_expression
Rule 56    inclusive_or_expression -> exclusive_or_expression
Rule 57    inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression
Rule 58    logical_and_expression -> inclusive_or_expression
Rule 59    logical_and_expression -> logical_and_expression LAND inclusive_or_expression
Rule 60    logical_or_expression -> logical_and_expression
Rule 61    logical_or_expression -> logical_or_expression LOR logical_and_expression
Rule 62    conditional_expression -> logical_or_expression
Rule 63    conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression
Rule 64    assignment_expression -> conditional_expression
Rule 65    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 66    assignment_operator -> EQUALS
Rule 67    assignment_operator -> MULTIPLYEQUAL
Rule 68    assignment_operator -> DIVIDEEQUAL
Rule 69    assignment_operator -> MODEQUAL
Rule 70    assignment_operator -> PLUSEQUAL
Rule 71    assignment_operator -> MINUSEQUAL
Rule 72    assignment_operator -> LSHIFTEQUAL
Rule 73    assignment_operator -> RSHIFTEQUAL
Rule 74    assignment_operator -> ANDEQUAL
Rule 75    assignment_operator -> XOREQUAL
Rule 76    assignment_operator -> OREQUAL
Rule 77    expression -> assignment_expression
Rule 78    expression -> expression COMMA assignment_expression
Rule 79    constant_expression -> conditional_expression
Rule 80    declaration -> declaration_specifiers SEMICOLON
Rule 81    declaration -> declaration_specifiers init_declarator_list SEMICOLON
Rule 82    declaration_specifiers -> storage_class_specifier
Rule 83    declaration_specifiers -> storage_class_specifier declaration_specifiers
Rule 84    declaration_specifiers -> type_specifier
Rule 85    declaration_specifiers -> type_specifier declaration_specifiers
Rule 86    declaration_specifiers -> type_qualifier
Rule 87    declaration_specifiers -> type_qualifier declaration_specifiers
Rule 88    init_declarator_list -> init_declarator
Rule 89    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 90    init_declarator -> declarator
Rule 91    init_declarator -> declarator EQUALS initializer
Rule 92    storage_class_specifier -> TYPEDEF
Rule 93    storage_class_specifier -> EXTERN
Rule 94    storage_class_specifier -> STATIC
Rule 95    storage_class_specifier -> AUTO
Rule 96    storage_class_specifier -> REGISTER
Rule 97    type_specifier -> VOID
Rule 98    type_specifier -> CHAR
Rule 99    type_specifier -> SHORT
Rule 100   type_specifier -> INT
Rule 101   type_specifier -> LONG
Rule 102   type_specifier -> FLOAT
Rule 103   type_specifier -> DOUBLE
Rule 104   type_specifier -> SIGNED
Rule 105   type_specifier -> UNSIGNED
Rule 106   type_specifier -> struct_or_union_specifier
Rule 107   type_specifier -> enum_specifier
Rule 108   type_specifier -> TYPE_NAME
Rule 109   struct_or_union_specifier -> struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET
Rule 110   struct_or_union_specifier -> struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET
Rule 111   struct_or_union_specifier -> struct_or_union ID
Rule 112   struct_or_union -> STRUCT
Rule 113   struct_or_union -> UNION
Rule 114   struct_declaration_list -> struct_declaration
Rule 115   struct_declaration_list -> struct_declaration_list struct_declaration
Rule 116   struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON
Rule 117   specifier_qualifier_list -> type_specifier specifier_qualifier_list
Rule 118   specifier_qualifier_list -> type_specifier
Rule 119   specifier_qualifier_list -> type_qualifier specifier_qualifier_list
Rule 120   specifier_qualifier_list -> type_qualifier
Rule 121   struct_declarator_list -> struct_declarator
Rule 122   struct_declarator_list -> struct_declarator_list COMMA struct_declarator
Rule 123   struct_declarator -> declarator
Rule 124   struct_declarator -> COLON constant_expression
Rule 125   struct_declarator -> declarator COLON constant_expression
Rule 126   enum_specifier -> ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET
Rule 127   enum_specifier -> ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET
Rule 128   enum_specifier -> ENUM ID
Rule 129   enumerator_list -> enumerator
Rule 130   enumerator_list -> enumerator_list COMMA enumerator
Rule 131   enumerator -> ID
Rule 132   enumerator -> ID EQUALS constant_expression
Rule 133   type_qualifier -> CONST
Rule 134   type_qualifier -> VOLATILE
Rule 135   declarator -> pointer direct_declarator
Rule 136   declarator -> direct_declarator
Rule 137   direct_declarator -> ID
Rule 138   direct_declarator -> LPAREN declarator RPAREN
Rule 139   direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET
Rule 140   direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET
Rule 141   direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN
Rule 142   direct_declarator -> direct_declarator LPAREN identifier_list RPAREN
Rule 143   direct_declarator -> direct_declarator LPAREN RPAREN
Rule 144   pointer -> MULTIPLY
Rule 145   pointer -> MULTIPLY type_qualifier_list
Rule 146   pointer -> MULTIPLY pointer
Rule 147   pointer -> MULTIPLY type_qualifier_list pointer
Rule 148   type_qualifier_list -> type_qualifier
Rule 149   type_qualifier_list -> type_qualifier_list type_qualifier
Rule 150   parameter_type_list -> parameter_list
Rule 151   parameter_type_list -> parameter_list COMMA ELLIPSIS
Rule 152   parameter_list -> parameter_declaration
Rule 153   parameter_list -> parameter_list COMMA parameter_declaration
Rule 154   parameter_declaration -> declaration_specifiers declarator
Rule 155   parameter_declaration -> declaration_specifiers abstract_declarator
Rule 156   parameter_declaration -> declaration_specifiers
Rule 157   identifier_list -> ID
Rule 158   identifier_list -> identifier_list COMMA ID
Rule 159   type_name -> specifier_qualifier_list
Rule 160   type_name -> specifier_qualifier_list abstract_declarator
Rule 161   abstract_declarator -> pointer
Rule 162   abstract_declarator -> direct_abstract_declarator
Rule 163   abstract_declarator -> pointer direct_abstract_declarator
Rule 164   direct_abstract_declarator -> LPAREN abstract_declarator RPAREN
Rule 165   direct_abstract_declarator -> LSQUAREBRACKET RSQUAREBRACKET
Rule 166   direct_abstract_declarator -> LSQUAREBRACKET constant_expression RSQUAREBRACKET
Rule 167   direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN
Rule 168   direct_abstract_declarator -> direct_abstract_declarator LPAREN constant_expression RPAREN
Rule 169   direct_abstract_declarator -> LPAREN RPAREN
Rule 170   direct_abstract_declarator -> LPAREN parameter_type_list RPAREN
Rule 171   direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN
Rule 172   initializer -> assignment_expression
Rule 173   initializer -> LCURLYBRACKET initializer_list RCURLYBRACKET
Rule 174   initializer -> LCURLYBRACKET initializer_list COMMA RCURLYBRACKET
Rule 175   initializer_list -> initializer
Rule 176   initializer_list -> initializer_list COMMA initializer
Rule 177   statement -> labeled_statement
Rule 178   statement -> compound_statement
Rule 179   statement -> expression_statement
Rule 180   statement -> selection_statement
Rule 181   statement -> iteration_statement
Rule 182   statement -> jump_statement
Rule 183   labeled_statement -> ID COLON statement
Rule 184   labeled_statement -> CASE constant_expression COLON statement
Rule 185   labeled_statement -> DEFAULT COLON statement
Rule 186   compound_statement -> LCURLYBRACKET RCURLYBRACKET
Rule 187   compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET
Rule 188   compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET
Rule 189   compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
Rule 190   declaration_list -> declaration
Rule 191   declaration_list -> declaration_list declaration
Rule 192   statement_list -> statement
Rule 193   statement_list -> statement_list statement
Rule 194   expression_statement -> SEMICOLON
Rule 195   expression_statement -> expression SEMICOLON
Rule 196   selection_statement -> IF LPAREN expression RPAREN statement
Rule 197   selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 198   selection_statement -> SWITCH LPAREN expression RPAREN statement
Rule 199   iteration_statement -> WHILE LPAREN expression RPAREN
Rule 200   iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON
Rule 201   iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement
Rule 202   iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement
Rule 203   jump_statement -> GOTO ID SEMICOLON
Rule 204   jump_statement -> CONTINUE SEMICOLON
Rule 205   jump_statement -> BREAK SEMICOLON
Rule 206   jump_statement -> RETURN SEMICOLON
Rule 207   jump_statement -> RETURN expression SEMICOLON
Rule 208   translation_unit -> external_declaration
Rule 209   translation_unit -> translation_unit external_declaration
Rule 210   external_declaration -> function_definition
Rule 211   external_declaration -> declaration
Rule 212   function_definition -> declaration_specifiers declarator declaration_list compound_statement
Rule 213   function_definition -> declaration_specifiers declarator compound_statement
Rule 214   function_definition -> declarator declaration_list compound_statement
Rule 215   function_definition -> declarator compound_statement

Terminals, with rules where they appear

AND                  : 26 53
ANDEQUAL             : 74
ARROW                : 15
AUTO                 : 95
BIN_CONST            : 7
BREAK                : 205
CASE                 : 184
CHAR                 : 98
CHAR_CONST           : 2
COLON                : 63 124 125 183 184 185
COMMA                : 19 78 89 122 130 151 153 158 174 176
CONDOP               : 63
CONST                : 133
CONTINUE             : 204
DECREMENT            : 17 22
DEFAULT              : 185
DIVIDE               : 36
DIVIDEEQUAL          : 68
DO                   : 200
DOUBLE               : 103
ELLIPSIS             : 151
ELSE                 : 197
ENUM                 : 126 127 128
EQUAL                : 50
EQUALS               : 66 91 132
EXTERN               : 93
FLOAT                : 102
FLOAT_CONST          : 4
FOR                  : 201 202
GOTO                 : 203
GREATER              : 46
GREATEREQUAL         : 48
HEX_CONST            : 6
ID                   : 1 14 15 109 111 127 128 131 132 137 157 158 183 203
IF                   : 196 197
INCREMENT            : 16 21
INT                  : 100
INT_CONST            : 3
LAND                 : 59
LCURLYBRACKET        : 109 110 126 127 173 174 186 187 188 189
LESS                 : 45
LESSEQUAL            : 47
LNOT                 : 31
LONG                 : 101
LOR                  : 61
LPAREN               : 9 12 13 25 33 138 141 142 143 164 167 168 169 170 171 196 197 198 199 200 201 202
LSHIFT               : 42
LSHIFTEQUAL          : 72
LSQUAREBRACKET       : 11 139 140 165 166
MINUS                : 29 40
MINUSEQUAL           : 71
MOD                  : 37
MODEQUAL             : 69
MULTIPLY             : 27 35 144 145 146 147
MULTIPLYEQUAL        : 67
NOT                  : 30
NOTEQUAL             : 51
OCTAL_CONST          : 5
OR                   : 57
OREQUAL              : 76
PERIOD               : 14
PLUS                 : 28 39
PLUSEQUAL            : 70
RCURLYBRACKET        : 109 110 126 127 173 174 186 187 188 189
REGISTER             : 96
RETURN               : 206 207
RPAREN               : 9 12 13 25 33 138 141 142 143 164 167 168 169 170 171 196 197 198 199 200 201 202
RSHIFT               : 43
RSHIFTEQUAL          : 73
RSQUAREBRACKET       : 11 139 140 165 166
SEMICOLON            : 80 81 116 194 195 200 203 204 205 206 207
SHORT                : 99
SIGNED               : 104
SIZEOF               : 24 25
STATIC               : 94
STRING_LITERAL       : 8
STRUCT               : 112
SWITCH               : 198
TYPEDEF              : 92
TYPE_NAME            : 108
UNION                : 113
UNSIGNED             : 105
VOID                 : 97
VOLATILE             : 134
WHILE                : 199 200
XOR                  : 55
XOREQUAL             : 75
error                : 

Nonterminals, with rules where they appear

abstract_declarator  : 155 160 164
additive_expression  : 39 40 41 42 43
and_expression       : 53 54 55
argument_expression_list : 13 19
assignment_expression : 18 19 65 77 78 172
assignment_operator  : 65
cast_expression      : 23 33 34 35 36 37
compound_statement   : 178 212 213 214 215
conditional_expression : 63 64 79
constant_expression  : 124 125 132 139 166 168 184
declaration          : 190 191 211
declaration_list     : 188 189 191 212 214
declaration_specifiers : 80 81 83 85 87 154 155 156 212 213
declarator           : 90 91 123 125 138 154 212 213 214 215
direct_abstract_declarator : 162 163 167 168 171
direct_declarator    : 135 136 139 140 141 142 143
enum_specifier       : 107
enumerator           : 129 130
enumerator_list      : 126 127 130
equality_expression  : 50 51 52 53
exclusive_or_expression : 55 56 57
expression           : 9 11 63 78 195 196 197 198 199 200 202 207
expression_statement : 179 201 201 202 202
external_declaration : 208 209
function_definition  : 210
identifier_list      : 142 158
inclusive_or_expression : 57 58 59
init_declarator      : 88 89
init_declarator_list : 81 89
initializer          : 91 175 176
initializer_list     : 173 174 176
iteration_statement  : 181
jump_statement       : 182
labeled_statement    : 177
logical_and_expression : 59 60 61
logical_or_expression : 61 62 63
multiplicative_expression : 35 36 37 38 39 40
parameter_declaration : 152 153
parameter_list       : 150 151 153
parameter_type_list  : 141 170 171
pointer              : 135 146 147 161 163
postfix_expression   : 11 12 13 14 15 16 17 20
primary_expression   : 10
relational_expression : 45 46 47 48 49 50 51
selection_statement  : 180
shift_expression     : 42 43 44 45 46 47 48
specifier_qualifier_list : 116 117 119 159 160
statement            : 183 184 185 192 193 196 197 197 198 200 201 202
statement_list       : 187 189 193
storage_class_specifier : 82 83
struct_declaration   : 114 115
struct_declaration_list : 109 110 115
struct_declarator    : 121 122
struct_declarator_list : 116 122
struct_or_union      : 109 110 111
struct_or_union_specifier : 106
translation_unit     : 209 0
type_name            : 25 33
type_qualifier       : 86 87 119 120 148 149
type_qualifier_list  : 145 147 149
type_specifier       : 84 85 117 118
unary_expression     : 21 22 24 32 65
unary_operator       : 23

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (208) translation_unit -> . external_declaration
    (209) translation_unit -> . translation_unit external_declaration
    (210) external_declaration -> . function_definition
    (211) external_declaration -> . declaration
    (212) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (213) function_definition -> . declaration_specifiers declarator compound_statement
    (214) function_definition -> . declarator declaration_list compound_statement
    (215) function_definition -> . declarator compound_statement
    (80) declaration -> . declaration_specifiers SEMICOLON
    (81) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (82) declaration_specifiers -> . storage_class_specifier
    (83) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (84) declaration_specifiers -> . type_specifier
    (85) declaration_specifiers -> . type_specifier declaration_specifiers
    (86) declaration_specifiers -> . type_qualifier
    (87) declaration_specifiers -> . type_qualifier declaration_specifiers
    (135) declarator -> . pointer direct_declarator
    (136) declarator -> . direct_declarator
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . EXTERN
    (94) storage_class_specifier -> . STATIC
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) type_specifier -> . VOID
    (98) type_specifier -> . CHAR
    (99) type_specifier -> . SHORT
    (100) type_specifier -> . INT
    (101) type_specifier -> . LONG
    (102) type_specifier -> . FLOAT
    (103) type_specifier -> . DOUBLE
    (104) type_specifier -> . SIGNED
    (105) type_specifier -> . UNSIGNED
    (106) type_specifier -> . struct_or_union_specifier
    (107) type_specifier -> . enum_specifier
    (108) type_specifier -> . TYPE_NAME
    (133) type_qualifier -> . CONST
    (134) type_qualifier -> . VOLATILE
    (144) pointer -> . MULTIPLY
    (145) pointer -> . MULTIPLY type_qualifier_list
    (146) pointer -> . MULTIPLY pointer
    (147) pointer -> . MULTIPLY type_qualifier_list pointer
    (137) direct_declarator -> . ID
    (138) direct_declarator -> . LPAREN declarator RPAREN
    (139) direct_declarator -> . direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (140) direct_declarator -> . direct_declarator LSQUAREBRACKET RSQUAREBRACKET
    (141) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (142) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (143) direct_declarator -> . direct_declarator LPAREN RPAREN
    (109) struct_or_union_specifier -> . struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (110) struct_or_union_specifier -> . struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (111) struct_or_union_specifier -> . struct_or_union ID
    (126) enum_specifier -> . ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET
    (127) enum_specifier -> . ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET
    (128) enum_specifier -> . ENUM ID
    (112) struct_or_union -> . STRUCT
    (113) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    TYPE_NAME       shift and go to state 28
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    MULTIPLY        shift and go to state 31
    ID              shift and go to state 32
    LPAREN          shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    translation_unit               shift and go to state 1
    external_declaration           shift and go to state 2
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    declaration_specifiers         shift and go to state 5
    declarator                     shift and go to state 6
    storage_class_specifier        shift and go to state 7
    type_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 9
    pointer                        shift and go to state 10
    direct_declarator              shift and go to state 11
    struct_or_union_specifier      shift and go to state 26
    enum_specifier                 shift and go to state 27
    struct_or_union                shift and go to state 34

state 1

    (0) S' -> translation_unit .
    (209) translation_unit -> translation_unit . external_declaration
    (210) external_declaration -> . function_definition
    (211) external_declaration -> . declaration
    (212) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (213) function_definition -> . declaration_specifiers declarator compound_statement
    (214) function_definition -> . declarator declaration_list compound_statement
    (215) function_definition -> . declarator compound_statement
    (80) declaration -> . declaration_specifiers SEMICOLON
    (81) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (82) declaration_specifiers -> . storage_class_specifier
    (83) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (84) declaration_specifiers -> . type_specifier
    (85) declaration_specifiers -> . type_specifier declaration_specifiers
    (86) declaration_specifiers -> . type_qualifier
    (87) declaration_specifiers -> . type_qualifier declaration_specifiers
    (135) declarator -> . pointer direct_declarator
    (136) declarator -> . direct_declarator
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . EXTERN
    (94) storage_class_specifier -> . STATIC
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) type_specifier -> . VOID
    (98) type_specifier -> . CHAR
    (99) type_specifier -> . SHORT
    (100) type_specifier -> . INT
    (101) type_specifier -> . LONG
    (102) type_specifier -> . FLOAT
    (103) type_specifier -> . DOUBLE
    (104) type_specifier -> . SIGNED
    (105) type_specifier -> . UNSIGNED
    (106) type_specifier -> . struct_or_union_specifier
    (107) type_specifier -> . enum_specifier
    (108) type_specifier -> . TYPE_NAME
    (133) type_qualifier -> . CONST
    (134) type_qualifier -> . VOLATILE
    (144) pointer -> . MULTIPLY
    (145) pointer -> . MULTIPLY type_qualifier_list
    (146) pointer -> . MULTIPLY pointer
    (147) pointer -> . MULTIPLY type_qualifier_list pointer
    (137) direct_declarator -> . ID
    (138) direct_declarator -> . LPAREN declarator RPAREN
    (139) direct_declarator -> . direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (140) direct_declarator -> . direct_declarator LSQUAREBRACKET RSQUAREBRACKET
    (141) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (142) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (143) direct_declarator -> . direct_declarator LPAREN RPAREN
    (109) struct_or_union_specifier -> . struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (110) struct_or_union_specifier -> . struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (111) struct_or_union_specifier -> . struct_or_union ID
    (126) enum_specifier -> . ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET
    (127) enum_specifier -> . ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET
    (128) enum_specifier -> . ENUM ID
    (112) struct_or_union -> . STRUCT
    (113) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    TYPE_NAME       shift and go to state 28
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    MULTIPLY        shift and go to state 31
    ID              shift and go to state 32
    LPAREN          shift and go to state 33
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    external_declaration           shift and go to state 38
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    declaration_specifiers         shift and go to state 5
    declarator                     shift and go to state 6
    storage_class_specifier        shift and go to state 7
    type_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 9
    pointer                        shift and go to state 10
    direct_declarator              shift and go to state 11
    struct_or_union_specifier      shift and go to state 26
    enum_specifier                 shift and go to state 27
    struct_or_union                shift and go to state 34

state 2

    (208) translation_unit -> external_declaration .

    TYPEDEF         reduce using rule 208 (translation_unit -> external_declaration .)
    EXTERN          reduce using rule 208 (translation_unit -> external_declaration .)
    STATIC          reduce using rule 208 (translation_unit -> external_declaration .)
    AUTO            reduce using rule 208 (translation_unit -> external_declaration .)
    REGISTER        reduce using rule 208 (translation_unit -> external_declaration .)
    VOID            reduce using rule 208 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 208 (translation_unit -> external_declaration .)
    SHORT           reduce using rule 208 (translation_unit -> external_declaration .)
    INT             reduce using rule 208 (translation_unit -> external_declaration .)
    LONG            reduce using rule 208 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 208 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 208 (translation_unit -> external_declaration .)
    SIGNED          reduce using rule 208 (translation_unit -> external_declaration .)
    UNSIGNED        reduce using rule 208 (translation_unit -> external_declaration .)
    TYPE_NAME       reduce using rule 208 (translation_unit -> external_declaration .)
    CONST           reduce using rule 208 (translation_unit -> external_declaration .)
    VOLATILE        reduce using rule 208 (translation_unit -> external_declaration .)
    MULTIPLY        reduce using rule 208 (translation_unit -> external_declaration .)
    ID              reduce using rule 208 (translation_unit -> external_declaration .)
    LPAREN          reduce using rule 208 (translation_unit -> external_declaration .)
    ENUM            reduce using rule 208 (translation_unit -> external_declaration .)
    STRUCT          reduce using rule 208 (translation_unit -> external_declaration .)
    UNION           reduce using rule 208 (translation_unit -> external_declaration .)
    $end            reduce using rule 208 (translation_unit -> external_declaration .)


state 3

    (210) external_declaration -> function_definition .

    TYPEDEF         reduce using rule 210 (external_declaration -> function_definition .)
    EXTERN          reduce using rule 210 (external_declaration -> function_definition .)
    STATIC          reduce using rule 210 (external_declaration -> function_definition .)
    AUTO            reduce using rule 210 (external_declaration -> function_definition .)
    REGISTER        reduce using rule 210 (external_declaration -> function_definition .)
    VOID            reduce using rule 210 (external_declaration -> function_definition .)
    CHAR            reduce using rule 210 (external_declaration -> function_definition .)
    SHORT           reduce using rule 210 (external_declaration -> function_definition .)
    INT             reduce using rule 210 (external_declaration -> function_definition .)
    LONG            reduce using rule 210 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 210 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 210 (external_declaration -> function_definition .)
    SIGNED          reduce using rule 210 (external_declaration -> function_definition .)
    UNSIGNED        reduce using rule 210 (external_declaration -> function_definition .)
    TYPE_NAME       reduce using rule 210 (external_declaration -> function_definition .)
    CONST           reduce using rule 210 (external_declaration -> function_definition .)
    VOLATILE        reduce using rule 210 (external_declaration -> function_definition .)
    MULTIPLY        reduce using rule 210 (external_declaration -> function_definition .)
    ID              reduce using rule 210 (external_declaration -> function_definition .)
    LPAREN          reduce using rule 210 (external_declaration -> function_definition .)
    ENUM            reduce using rule 210 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 210 (external_declaration -> function_definition .)
    UNION           reduce using rule 210 (external_declaration -> function_definition .)
    $end            reduce using rule 210 (external_declaration -> function_definition .)


state 4

    (211) external_declaration -> declaration .

    TYPEDEF         reduce using rule 211 (external_declaration -> declaration .)
    EXTERN          reduce using rule 211 (external_declaration -> declaration .)
    STATIC          reduce using rule 211 (external_declaration -> declaration .)
    AUTO            reduce using rule 211 (external_declaration -> declaration .)
    REGISTER        reduce using rule 211 (external_declaration -> declaration .)
    VOID            reduce using rule 211 (external_declaration -> declaration .)
    CHAR            reduce using rule 211 (external_declaration -> declaration .)
    SHORT           reduce using rule 211 (external_declaration -> declaration .)
    INT             reduce using rule 211 (external_declaration -> declaration .)
    LONG            reduce using rule 211 (external_declaration -> declaration .)
    FLOAT           reduce using rule 211 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 211 (external_declaration -> declaration .)
    SIGNED          reduce using rule 211 (external_declaration -> declaration .)
    UNSIGNED        reduce using rule 211 (external_declaration -> declaration .)
    TYPE_NAME       reduce using rule 211 (external_declaration -> declaration .)
    CONST           reduce using rule 211 (external_declaration -> declaration .)
    VOLATILE        reduce using rule 211 (external_declaration -> declaration .)
    MULTIPLY        reduce using rule 211 (external_declaration -> declaration .)
    ID              reduce using rule 211 (external_declaration -> declaration .)
    LPAREN          reduce using rule 211 (external_declaration -> declaration .)
    ENUM            reduce using rule 211 (external_declaration -> declaration .)
    STRUCT          reduce using rule 211 (external_declaration -> declaration .)
    UNION           reduce using rule 211 (external_declaration -> declaration .)
    $end            reduce using rule 211 (external_declaration -> declaration .)


state 5

    (212) function_definition -> declaration_specifiers . declarator declaration_list compound_statement
    (213) function_definition -> declaration_specifiers . declarator compound_statement
    (80) declaration -> declaration_specifiers . SEMICOLON
    (81) declaration -> declaration_specifiers . init_declarator_list SEMICOLON
    (135) declarator -> . pointer direct_declarator
    (136) declarator -> . direct_declarator
    (88) init_declarator_list -> . init_declarator
    (89) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (144) pointer -> . MULTIPLY
    (145) pointer -> . MULTIPLY type_qualifier_list
    (146) pointer -> . MULTIPLY pointer
    (147) pointer -> . MULTIPLY type_qualifier_list pointer
    (137) direct_declarator -> . ID
    (138) direct_declarator -> . LPAREN declarator RPAREN
    (139) direct_declarator -> . direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (140) direct_declarator -> . direct_declarator LSQUAREBRACKET RSQUAREBRACKET
    (141) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (142) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (143) direct_declarator -> . direct_declarator LPAREN RPAREN
    (90) init_declarator -> . declarator
    (91) init_declarator -> . declarator EQUALS initializer

    SEMICOLON       shift and go to state 40
    MULTIPLY        shift and go to state 31
    ID              shift and go to state 32
    LPAREN          shift and go to state 33

    declarator                     shift and go to state 39
    init_declarator_list           shift and go to state 41
    pointer                        shift and go to state 10
    direct_declarator              shift and go to state 11
    init_declarator                shift and go to state 42

state 6

    (214) function_definition -> declarator . declaration_list compound_statement
    (215) function_definition -> declarator . compound_statement
    (190) declaration_list -> . declaration
    (191) declaration_list -> . declaration_list declaration
    (186) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (187) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (188) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (189) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (80) declaration -> . declaration_specifiers SEMICOLON
    (81) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (82) declaration_specifiers -> . storage_class_specifier
    (83) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (84) declaration_specifiers -> . type_specifier
    (85) declaration_specifiers -> . type_specifier declaration_specifiers
    (86) declaration_specifiers -> . type_qualifier
    (87) declaration_specifiers -> . type_qualifier declaration_specifiers
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . EXTERN
    (94) storage_class_specifier -> . STATIC
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) type_specifier -> . VOID
    (98) type_specifier -> . CHAR
    (99) type_specifier -> . SHORT
    (100) type_specifier -> . INT
    (101) type_specifier -> . LONG
    (102) type_specifier -> . FLOAT
    (103) type_specifier -> . DOUBLE
    (104) type_specifier -> . SIGNED
    (105) type_specifier -> . UNSIGNED
    (106) type_specifier -> . struct_or_union_specifier
    (107) type_specifier -> . enum_specifier
    (108) type_specifier -> . TYPE_NAME
    (133) type_qualifier -> . CONST
    (134) type_qualifier -> . VOLATILE
    (109) struct_or_union_specifier -> . struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (110) struct_or_union_specifier -> . struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (111) struct_or_union_specifier -> . struct_or_union ID
    (126) enum_specifier -> . ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET
    (127) enum_specifier -> . ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET
    (128) enum_specifier -> . ENUM ID
    (112) struct_or_union -> . STRUCT
    (113) struct_or_union -> . UNION

    LCURLYBRACKET   shift and go to state 46
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    TYPE_NAME       shift and go to state 28
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    declaration_list               shift and go to state 43
    compound_statement             shift and go to state 44
    declaration                    shift and go to state 45
    declaration_specifiers         shift and go to state 47
    storage_class_specifier        shift and go to state 7
    type_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 9
    struct_or_union_specifier      shift and go to state 26
    enum_specifier                 shift and go to state 27
    struct_or_union                shift and go to state 34

state 7

    (82) declaration_specifiers -> storage_class_specifier .
    (83) declaration_specifiers -> storage_class_specifier . declaration_specifiers
    (82) declaration_specifiers -> . storage_class_specifier
    (83) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (84) declaration_specifiers -> . type_specifier
    (85) declaration_specifiers -> . type_specifier declaration_specifiers
    (86) declaration_specifiers -> . type_qualifier
    (87) declaration_specifiers -> . type_qualifier declaration_specifiers
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . EXTERN
    (94) storage_class_specifier -> . STATIC
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) type_specifier -> . VOID
    (98) type_specifier -> . CHAR
    (99) type_specifier -> . SHORT
    (100) type_specifier -> . INT
    (101) type_specifier -> . LONG
    (102) type_specifier -> . FLOAT
    (103) type_specifier -> . DOUBLE
    (104) type_specifier -> . SIGNED
    (105) type_specifier -> . UNSIGNED
    (106) type_specifier -> . struct_or_union_specifier
    (107) type_specifier -> . enum_specifier
    (108) type_specifier -> . TYPE_NAME
    (133) type_qualifier -> . CONST
    (134) type_qualifier -> . VOLATILE
    (109) struct_or_union_specifier -> . struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (110) struct_or_union_specifier -> . struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (111) struct_or_union_specifier -> . struct_or_union ID
    (126) enum_specifier -> . ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET
    (127) enum_specifier -> . ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET
    (128) enum_specifier -> . ENUM ID
    (112) struct_or_union -> . STRUCT
    (113) struct_or_union -> . UNION

    SEMICOLON       reduce using rule 82 (declaration_specifiers -> storage_class_specifier .)
    MULTIPLY        reduce using rule 82 (declaration_specifiers -> storage_class_specifier .)
    ID              reduce using rule 82 (declaration_specifiers -> storage_class_specifier .)
    LPAREN          reduce using rule 82 (declaration_specifiers -> storage_class_specifier .)
    LSQUAREBRACKET  reduce using rule 82 (declaration_specifiers -> storage_class_specifier .)
    COMMA           reduce using rule 82 (declaration_specifiers -> storage_class_specifier .)
    RPAREN          reduce using rule 82 (declaration_specifiers -> storage_class_specifier .)
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    TYPE_NAME       shift and go to state 28
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    storage_class_specifier        shift and go to state 7
    declaration_specifiers         shift and go to state 48
    type_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 9
    struct_or_union_specifier      shift and go to state 26
    enum_specifier                 shift and go to state 27
    struct_or_union                shift and go to state 34

state 8

    (84) declaration_specifiers -> type_specifier .
    (85) declaration_specifiers -> type_specifier . declaration_specifiers
    (82) declaration_specifiers -> . storage_class_specifier
    (83) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (84) declaration_specifiers -> . type_specifier
    (85) declaration_specifiers -> . type_specifier declaration_specifiers
    (86) declaration_specifiers -> . type_qualifier
    (87) declaration_specifiers -> . type_qualifier declaration_specifiers
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . EXTERN
    (94) storage_class_specifier -> . STATIC
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) type_specifier -> . VOID
    (98) type_specifier -> . CHAR
    (99) type_specifier -> . SHORT
    (100) type_specifier -> . INT
    (101) type_specifier -> . LONG
    (102) type_specifier -> . FLOAT
    (103) type_specifier -> . DOUBLE
    (104) type_specifier -> . SIGNED
    (105) type_specifier -> . UNSIGNED
    (106) type_specifier -> . struct_or_union_specifier
    (107) type_specifier -> . enum_specifier
    (108) type_specifier -> . TYPE_NAME
    (133) type_qualifier -> . CONST
    (134) type_qualifier -> . VOLATILE
    (109) struct_or_union_specifier -> . struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (110) struct_or_union_specifier -> . struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (111) struct_or_union_specifier -> . struct_or_union ID
    (126) enum_specifier -> . ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET
    (127) enum_specifier -> . ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET
    (128) enum_specifier -> . ENUM ID
    (112) struct_or_union -> . STRUCT
    (113) struct_or_union -> . UNION

    SEMICOLON       reduce using rule 84 (declaration_specifiers -> type_specifier .)
    MULTIPLY        reduce using rule 84 (declaration_specifiers -> type_specifier .)
    ID              reduce using rule 84 (declaration_specifiers -> type_specifier .)
    LPAREN          reduce using rule 84 (declaration_specifiers -> type_specifier .)
    LSQUAREBRACKET  reduce using rule 84 (declaration_specifiers -> type_specifier .)
    COMMA           reduce using rule 84 (declaration_specifiers -> type_specifier .)
    RPAREN          reduce using rule 84 (declaration_specifiers -> type_specifier .)
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    TYPE_NAME       shift and go to state 28
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    type_specifier                 shift and go to state 8
    declaration_specifiers         shift and go to state 49
    storage_class_specifier        shift and go to state 7
    type_qualifier                 shift and go to state 9
    struct_or_union_specifier      shift and go to state 26
    enum_specifier                 shift and go to state 27
    struct_or_union                shift and go to state 34

state 9

    (86) declaration_specifiers -> type_qualifier .
    (87) declaration_specifiers -> type_qualifier . declaration_specifiers
    (82) declaration_specifiers -> . storage_class_specifier
    (83) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (84) declaration_specifiers -> . type_specifier
    (85) declaration_specifiers -> . type_specifier declaration_specifiers
    (86) declaration_specifiers -> . type_qualifier
    (87) declaration_specifiers -> . type_qualifier declaration_specifiers
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . EXTERN
    (94) storage_class_specifier -> . STATIC
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) type_specifier -> . VOID
    (98) type_specifier -> . CHAR
    (99) type_specifier -> . SHORT
    (100) type_specifier -> . INT
    (101) type_specifier -> . LONG
    (102) type_specifier -> . FLOAT
    (103) type_specifier -> . DOUBLE
    (104) type_specifier -> . SIGNED
    (105) type_specifier -> . UNSIGNED
    (106) type_specifier -> . struct_or_union_specifier
    (107) type_specifier -> . enum_specifier
    (108) type_specifier -> . TYPE_NAME
    (133) type_qualifier -> . CONST
    (134) type_qualifier -> . VOLATILE
    (109) struct_or_union_specifier -> . struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (110) struct_or_union_specifier -> . struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (111) struct_or_union_specifier -> . struct_or_union ID
    (126) enum_specifier -> . ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET
    (127) enum_specifier -> . ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET
    (128) enum_specifier -> . ENUM ID
    (112) struct_or_union -> . STRUCT
    (113) struct_or_union -> . UNION

    SEMICOLON       reduce using rule 86 (declaration_specifiers -> type_qualifier .)
    MULTIPLY        reduce using rule 86 (declaration_specifiers -> type_qualifier .)
    ID              reduce using rule 86 (declaration_specifiers -> type_qualifier .)
    LPAREN          reduce using rule 86 (declaration_specifiers -> type_qualifier .)
    LSQUAREBRACKET  reduce using rule 86 (declaration_specifiers -> type_qualifier .)
    COMMA           reduce using rule 86 (declaration_specifiers -> type_qualifier .)
    RPAREN          reduce using rule 86 (declaration_specifiers -> type_qualifier .)
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    TYPE_NAME       shift and go to state 28
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    type_qualifier                 shift and go to state 9
    declaration_specifiers         shift and go to state 50
    storage_class_specifier        shift and go to state 7
    type_specifier                 shift and go to state 8
    struct_or_union_specifier      shift and go to state 26
    enum_specifier                 shift and go to state 27
    struct_or_union                shift and go to state 34

state 10

    (135) declarator -> pointer . direct_declarator
    (137) direct_declarator -> . ID
    (138) direct_declarator -> . LPAREN declarator RPAREN
    (139) direct_declarator -> . direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (140) direct_declarator -> . direct_declarator LSQUAREBRACKET RSQUAREBRACKET
    (141) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (142) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (143) direct_declarator -> . direct_declarator LPAREN RPAREN

    ID              shift and go to state 32
    LPAREN          shift and go to state 33

    direct_declarator              shift and go to state 51

state 11

    (136) declarator -> direct_declarator .
    (139) direct_declarator -> direct_declarator . LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (140) direct_declarator -> direct_declarator . LSQUAREBRACKET RSQUAREBRACKET
    (141) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (142) direct_declarator -> direct_declarator . LPAREN identifier_list RPAREN
    (143) direct_declarator -> direct_declarator . LPAREN RPAREN

    LCURLYBRACKET   reduce using rule 136 (declarator -> direct_declarator .)
    TYPEDEF         reduce using rule 136 (declarator -> direct_declarator .)
    EXTERN          reduce using rule 136 (declarator -> direct_declarator .)
    STATIC          reduce using rule 136 (declarator -> direct_declarator .)
    AUTO            reduce using rule 136 (declarator -> direct_declarator .)
    REGISTER        reduce using rule 136 (declarator -> direct_declarator .)
    VOID            reduce using rule 136 (declarator -> direct_declarator .)
    CHAR            reduce using rule 136 (declarator -> direct_declarator .)
    SHORT           reduce using rule 136 (declarator -> direct_declarator .)
    INT             reduce using rule 136 (declarator -> direct_declarator .)
    LONG            reduce using rule 136 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 136 (declarator -> direct_declarator .)
    DOUBLE          reduce using rule 136 (declarator -> direct_declarator .)
    SIGNED          reduce using rule 136 (declarator -> direct_declarator .)
    UNSIGNED        reduce using rule 136 (declarator -> direct_declarator .)
    TYPE_NAME       reduce using rule 136 (declarator -> direct_declarator .)
    CONST           reduce using rule 136 (declarator -> direct_declarator .)
    VOLATILE        reduce using rule 136 (declarator -> direct_declarator .)
    ENUM            reduce using rule 136 (declarator -> direct_declarator .)
    STRUCT          reduce using rule 136 (declarator -> direct_declarator .)
    UNION           reduce using rule 136 (declarator -> direct_declarator .)
    EQUALS          reduce using rule 136 (declarator -> direct_declarator .)
    SEMICOLON       reduce using rule 136 (declarator -> direct_declarator .)
    COMMA           reduce using rule 136 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 136 (declarator -> direct_declarator .)
    COLON           reduce using rule 136 (declarator -> direct_declarator .)
    LSQUAREBRACKET  shift and go to state 52
    LPAREN          shift and go to state 53


state 12

    (92) storage_class_specifier -> TYPEDEF .

    TYPEDEF         reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    EXTERN          reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    STATIC          reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    AUTO            reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    REGISTER        reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    VOID            reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    CHAR            reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    SHORT           reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    INT             reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    LONG            reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    TYPE_NAME       reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    CONST           reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    ENUM            reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    STRUCT          reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    UNION           reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    SEMICOLON       reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    MULTIPLY        reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    ID              reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    LPAREN          reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    LSQUAREBRACKET  reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    COMMA           reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    RPAREN          reduce using rule 92 (storage_class_specifier -> TYPEDEF .)


state 13

    (93) storage_class_specifier -> EXTERN .

    TYPEDEF         reduce using rule 93 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 93 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 93 (storage_class_specifier -> EXTERN .)
    AUTO            reduce using rule 93 (storage_class_specifier -> EXTERN .)
    REGISTER        reduce using rule 93 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 93 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 93 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 93 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 93 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 93 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 93 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 93 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 93 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 93 (storage_class_specifier -> EXTERN .)
    TYPE_NAME       reduce using rule 93 (storage_class_specifier -> EXTERN .)
    CONST           reduce using rule 93 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 93 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 93 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 93 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 93 (storage_class_specifier -> EXTERN .)
    SEMICOLON       reduce using rule 93 (storage_class_specifier -> EXTERN .)
    MULTIPLY        reduce using rule 93 (storage_class_specifier -> EXTERN .)
    ID              reduce using rule 93 (storage_class_specifier -> EXTERN .)
    LPAREN          reduce using rule 93 (storage_class_specifier -> EXTERN .)
    LSQUAREBRACKET  reduce using rule 93 (storage_class_specifier -> EXTERN .)
    COMMA           reduce using rule 93 (storage_class_specifier -> EXTERN .)
    RPAREN          reduce using rule 93 (storage_class_specifier -> EXTERN .)


state 14

    (94) storage_class_specifier -> STATIC .

    TYPEDEF         reduce using rule 94 (storage_class_specifier -> STATIC .)
    EXTERN          reduce using rule 94 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 94 (storage_class_specifier -> STATIC .)
    AUTO            reduce using rule 94 (storage_class_specifier -> STATIC .)
    REGISTER        reduce using rule 94 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 94 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 94 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 94 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 94 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 94 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 94 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 94 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 94 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 94 (storage_class_specifier -> STATIC .)
    TYPE_NAME       reduce using rule 94 (storage_class_specifier -> STATIC .)
    CONST           reduce using rule 94 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 94 (storage_class_specifier -> STATIC .)
    ENUM            reduce using rule 94 (storage_class_specifier -> STATIC .)
    STRUCT          reduce using rule 94 (storage_class_specifier -> STATIC .)
    UNION           reduce using rule 94 (storage_class_specifier -> STATIC .)
    SEMICOLON       reduce using rule 94 (storage_class_specifier -> STATIC .)
    MULTIPLY        reduce using rule 94 (storage_class_specifier -> STATIC .)
    ID              reduce using rule 94 (storage_class_specifier -> STATIC .)
    LPAREN          reduce using rule 94 (storage_class_specifier -> STATIC .)
    LSQUAREBRACKET  reduce using rule 94 (storage_class_specifier -> STATIC .)
    COMMA           reduce using rule 94 (storage_class_specifier -> STATIC .)
    RPAREN          reduce using rule 94 (storage_class_specifier -> STATIC .)


state 15

    (95) storage_class_specifier -> AUTO .

    TYPEDEF         reduce using rule 95 (storage_class_specifier -> AUTO .)
    EXTERN          reduce using rule 95 (storage_class_specifier -> AUTO .)
    STATIC          reduce using rule 95 (storage_class_specifier -> AUTO .)
    AUTO            reduce using rule 95 (storage_class_specifier -> AUTO .)
    REGISTER        reduce using rule 95 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 95 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 95 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 95 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 95 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 95 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 95 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 95 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 95 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 95 (storage_class_specifier -> AUTO .)
    TYPE_NAME       reduce using rule 95 (storage_class_specifier -> AUTO .)
    CONST           reduce using rule 95 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 95 (storage_class_specifier -> AUTO .)
    ENUM            reduce using rule 95 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 95 (storage_class_specifier -> AUTO .)
    UNION           reduce using rule 95 (storage_class_specifier -> AUTO .)
    SEMICOLON       reduce using rule 95 (storage_class_specifier -> AUTO .)
    MULTIPLY        reduce using rule 95 (storage_class_specifier -> AUTO .)
    ID              reduce using rule 95 (storage_class_specifier -> AUTO .)
    LPAREN          reduce using rule 95 (storage_class_specifier -> AUTO .)
    LSQUAREBRACKET  reduce using rule 95 (storage_class_specifier -> AUTO .)
    COMMA           reduce using rule 95 (storage_class_specifier -> AUTO .)
    RPAREN          reduce using rule 95 (storage_class_specifier -> AUTO .)


state 16

    (96) storage_class_specifier -> REGISTER .

    TYPEDEF         reduce using rule 96 (storage_class_specifier -> REGISTER .)
    EXTERN          reduce using rule 96 (storage_class_specifier -> REGISTER .)
    STATIC          reduce using rule 96 (storage_class_specifier -> REGISTER .)
    AUTO            reduce using rule 96 (storage_class_specifier -> REGISTER .)
    REGISTER        reduce using rule 96 (storage_class_specifier -> REGISTER .)
    VOID            reduce using rule 96 (storage_class_specifier -> REGISTER .)
    CHAR            reduce using rule 96 (storage_class_specifier -> REGISTER .)
    SHORT           reduce using rule 96 (storage_class_specifier -> REGISTER .)
    INT             reduce using rule 96 (storage_class_specifier -> REGISTER .)
    LONG            reduce using rule 96 (storage_class_specifier -> REGISTER .)
    FLOAT           reduce using rule 96 (storage_class_specifier -> REGISTER .)
    DOUBLE          reduce using rule 96 (storage_class_specifier -> REGISTER .)
    SIGNED          reduce using rule 96 (storage_class_specifier -> REGISTER .)
    UNSIGNED        reduce using rule 96 (storage_class_specifier -> REGISTER .)
    TYPE_NAME       reduce using rule 96 (storage_class_specifier -> REGISTER .)
    CONST           reduce using rule 96 (storage_class_specifier -> REGISTER .)
    VOLATILE        reduce using rule 96 (storage_class_specifier -> REGISTER .)
    ENUM            reduce using rule 96 (storage_class_specifier -> REGISTER .)
    STRUCT          reduce using rule 96 (storage_class_specifier -> REGISTER .)
    UNION           reduce using rule 96 (storage_class_specifier -> REGISTER .)
    SEMICOLON       reduce using rule 96 (storage_class_specifier -> REGISTER .)
    MULTIPLY        reduce using rule 96 (storage_class_specifier -> REGISTER .)
    ID              reduce using rule 96 (storage_class_specifier -> REGISTER .)
    LPAREN          reduce using rule 96 (storage_class_specifier -> REGISTER .)
    LSQUAREBRACKET  reduce using rule 96 (storage_class_specifier -> REGISTER .)
    COMMA           reduce using rule 96 (storage_class_specifier -> REGISTER .)
    RPAREN          reduce using rule 96 (storage_class_specifier -> REGISTER .)


state 17

    (97) type_specifier -> VOID .

    TYPEDEF         reduce using rule 97 (type_specifier -> VOID .)
    EXTERN          reduce using rule 97 (type_specifier -> VOID .)
    STATIC          reduce using rule 97 (type_specifier -> VOID .)
    AUTO            reduce using rule 97 (type_specifier -> VOID .)
    REGISTER        reduce using rule 97 (type_specifier -> VOID .)
    VOID            reduce using rule 97 (type_specifier -> VOID .)
    CHAR            reduce using rule 97 (type_specifier -> VOID .)
    SHORT           reduce using rule 97 (type_specifier -> VOID .)
    INT             reduce using rule 97 (type_specifier -> VOID .)
    LONG            reduce using rule 97 (type_specifier -> VOID .)
    FLOAT           reduce using rule 97 (type_specifier -> VOID .)
    DOUBLE          reduce using rule 97 (type_specifier -> VOID .)
    SIGNED          reduce using rule 97 (type_specifier -> VOID .)
    UNSIGNED        reduce using rule 97 (type_specifier -> VOID .)
    TYPE_NAME       reduce using rule 97 (type_specifier -> VOID .)
    CONST           reduce using rule 97 (type_specifier -> VOID .)
    VOLATILE        reduce using rule 97 (type_specifier -> VOID .)
    ENUM            reduce using rule 97 (type_specifier -> VOID .)
    STRUCT          reduce using rule 97 (type_specifier -> VOID .)
    UNION           reduce using rule 97 (type_specifier -> VOID .)
    SEMICOLON       reduce using rule 97 (type_specifier -> VOID .)
    MULTIPLY        reduce using rule 97 (type_specifier -> VOID .)
    ID              reduce using rule 97 (type_specifier -> VOID .)
    LPAREN          reduce using rule 97 (type_specifier -> VOID .)
    LSQUAREBRACKET  reduce using rule 97 (type_specifier -> VOID .)
    COMMA           reduce using rule 97 (type_specifier -> VOID .)
    RPAREN          reduce using rule 97 (type_specifier -> VOID .)
    COLON           reduce using rule 97 (type_specifier -> VOID .)


state 18

    (98) type_specifier -> CHAR .

    TYPEDEF         reduce using rule 98 (type_specifier -> CHAR .)
    EXTERN          reduce using rule 98 (type_specifier -> CHAR .)
    STATIC          reduce using rule 98 (type_specifier -> CHAR .)
    AUTO            reduce using rule 98 (type_specifier -> CHAR .)
    REGISTER        reduce using rule 98 (type_specifier -> CHAR .)
    VOID            reduce using rule 98 (type_specifier -> CHAR .)
    CHAR            reduce using rule 98 (type_specifier -> CHAR .)
    SHORT           reduce using rule 98 (type_specifier -> CHAR .)
    INT             reduce using rule 98 (type_specifier -> CHAR .)
    LONG            reduce using rule 98 (type_specifier -> CHAR .)
    FLOAT           reduce using rule 98 (type_specifier -> CHAR .)
    DOUBLE          reduce using rule 98 (type_specifier -> CHAR .)
    SIGNED          reduce using rule 98 (type_specifier -> CHAR .)
    UNSIGNED        reduce using rule 98 (type_specifier -> CHAR .)
    TYPE_NAME       reduce using rule 98 (type_specifier -> CHAR .)
    CONST           reduce using rule 98 (type_specifier -> CHAR .)
    VOLATILE        reduce using rule 98 (type_specifier -> CHAR .)
    ENUM            reduce using rule 98 (type_specifier -> CHAR .)
    STRUCT          reduce using rule 98 (type_specifier -> CHAR .)
    UNION           reduce using rule 98 (type_specifier -> CHAR .)
    SEMICOLON       reduce using rule 98 (type_specifier -> CHAR .)
    MULTIPLY        reduce using rule 98 (type_specifier -> CHAR .)
    ID              reduce using rule 98 (type_specifier -> CHAR .)
    LPAREN          reduce using rule 98 (type_specifier -> CHAR .)
    LSQUAREBRACKET  reduce using rule 98 (type_specifier -> CHAR .)
    COMMA           reduce using rule 98 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 98 (type_specifier -> CHAR .)
    COLON           reduce using rule 98 (type_specifier -> CHAR .)


state 19

    (99) type_specifier -> SHORT .

    TYPEDEF         reduce using rule 99 (type_specifier -> SHORT .)
    EXTERN          reduce using rule 99 (type_specifier -> SHORT .)
    STATIC          reduce using rule 99 (type_specifier -> SHORT .)
    AUTO            reduce using rule 99 (type_specifier -> SHORT .)
    REGISTER        reduce using rule 99 (type_specifier -> SHORT .)
    VOID            reduce using rule 99 (type_specifier -> SHORT .)
    CHAR            reduce using rule 99 (type_specifier -> SHORT .)
    SHORT           reduce using rule 99 (type_specifier -> SHORT .)
    INT             reduce using rule 99 (type_specifier -> SHORT .)
    LONG            reduce using rule 99 (type_specifier -> SHORT .)
    FLOAT           reduce using rule 99 (type_specifier -> SHORT .)
    DOUBLE          reduce using rule 99 (type_specifier -> SHORT .)
    SIGNED          reduce using rule 99 (type_specifier -> SHORT .)
    UNSIGNED        reduce using rule 99 (type_specifier -> SHORT .)
    TYPE_NAME       reduce using rule 99 (type_specifier -> SHORT .)
    CONST           reduce using rule 99 (type_specifier -> SHORT .)
    VOLATILE        reduce using rule 99 (type_specifier -> SHORT .)
    ENUM            reduce using rule 99 (type_specifier -> SHORT .)
    STRUCT          reduce using rule 99 (type_specifier -> SHORT .)
    UNION           reduce using rule 99 (type_specifier -> SHORT .)
    SEMICOLON       reduce using rule 99 (type_specifier -> SHORT .)
    MULTIPLY        reduce using rule 99 (type_specifier -> SHORT .)
    ID              reduce using rule 99 (type_specifier -> SHORT .)
    LPAREN          reduce using rule 99 (type_specifier -> SHORT .)
    LSQUAREBRACKET  reduce using rule 99 (type_specifier -> SHORT .)
    COMMA           reduce using rule 99 (type_specifier -> SHORT .)
    RPAREN          reduce using rule 99 (type_specifier -> SHORT .)
    COLON           reduce using rule 99 (type_specifier -> SHORT .)


state 20

    (100) type_specifier -> INT .

    TYPEDEF         reduce using rule 100 (type_specifier -> INT .)
    EXTERN          reduce using rule 100 (type_specifier -> INT .)
    STATIC          reduce using rule 100 (type_specifier -> INT .)
    AUTO            reduce using rule 100 (type_specifier -> INT .)
    REGISTER        reduce using rule 100 (type_specifier -> INT .)
    VOID            reduce using rule 100 (type_specifier -> INT .)
    CHAR            reduce using rule 100 (type_specifier -> INT .)
    SHORT           reduce using rule 100 (type_specifier -> INT .)
    INT             reduce using rule 100 (type_specifier -> INT .)
    LONG            reduce using rule 100 (type_specifier -> INT .)
    FLOAT           reduce using rule 100 (type_specifier -> INT .)
    DOUBLE          reduce using rule 100 (type_specifier -> INT .)
    SIGNED          reduce using rule 100 (type_specifier -> INT .)
    UNSIGNED        reduce using rule 100 (type_specifier -> INT .)
    TYPE_NAME       reduce using rule 100 (type_specifier -> INT .)
    CONST           reduce using rule 100 (type_specifier -> INT .)
    VOLATILE        reduce using rule 100 (type_specifier -> INT .)
    ENUM            reduce using rule 100 (type_specifier -> INT .)
    STRUCT          reduce using rule 100 (type_specifier -> INT .)
    UNION           reduce using rule 100 (type_specifier -> INT .)
    SEMICOLON       reduce using rule 100 (type_specifier -> INT .)
    MULTIPLY        reduce using rule 100 (type_specifier -> INT .)
    ID              reduce using rule 100 (type_specifier -> INT .)
    LPAREN          reduce using rule 100 (type_specifier -> INT .)
    LSQUAREBRACKET  reduce using rule 100 (type_specifier -> INT .)
    COMMA           reduce using rule 100 (type_specifier -> INT .)
    RPAREN          reduce using rule 100 (type_specifier -> INT .)
    COLON           reduce using rule 100 (type_specifier -> INT .)


state 21

    (101) type_specifier -> LONG .

    TYPEDEF         reduce using rule 101 (type_specifier -> LONG .)
    EXTERN          reduce using rule 101 (type_specifier -> LONG .)
    STATIC          reduce using rule 101 (type_specifier -> LONG .)
    AUTO            reduce using rule 101 (type_specifier -> LONG .)
    REGISTER        reduce using rule 101 (type_specifier -> LONG .)
    VOID            reduce using rule 101 (type_specifier -> LONG .)
    CHAR            reduce using rule 101 (type_specifier -> LONG .)
    SHORT           reduce using rule 101 (type_specifier -> LONG .)
    INT             reduce using rule 101 (type_specifier -> LONG .)
    LONG            reduce using rule 101 (type_specifier -> LONG .)
    FLOAT           reduce using rule 101 (type_specifier -> LONG .)
    DOUBLE          reduce using rule 101 (type_specifier -> LONG .)
    SIGNED          reduce using rule 101 (type_specifier -> LONG .)
    UNSIGNED        reduce using rule 101 (type_specifier -> LONG .)
    TYPE_NAME       reduce using rule 101 (type_specifier -> LONG .)
    CONST           reduce using rule 101 (type_specifier -> LONG .)
    VOLATILE        reduce using rule 101 (type_specifier -> LONG .)
    ENUM            reduce using rule 101 (type_specifier -> LONG .)
    STRUCT          reduce using rule 101 (type_specifier -> LONG .)
    UNION           reduce using rule 101 (type_specifier -> LONG .)
    SEMICOLON       reduce using rule 101 (type_specifier -> LONG .)
    MULTIPLY        reduce using rule 101 (type_specifier -> LONG .)
    ID              reduce using rule 101 (type_specifier -> LONG .)
    LPAREN          reduce using rule 101 (type_specifier -> LONG .)
    LSQUAREBRACKET  reduce using rule 101 (type_specifier -> LONG .)
    COMMA           reduce using rule 101 (type_specifier -> LONG .)
    RPAREN          reduce using rule 101 (type_specifier -> LONG .)
    COLON           reduce using rule 101 (type_specifier -> LONG .)


state 22

    (102) type_specifier -> FLOAT .

    TYPEDEF         reduce using rule 102 (type_specifier -> FLOAT .)
    EXTERN          reduce using rule 102 (type_specifier -> FLOAT .)
    STATIC          reduce using rule 102 (type_specifier -> FLOAT .)
    AUTO            reduce using rule 102 (type_specifier -> FLOAT .)
    REGISTER        reduce using rule 102 (type_specifier -> FLOAT .)
    VOID            reduce using rule 102 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 102 (type_specifier -> FLOAT .)
    SHORT           reduce using rule 102 (type_specifier -> FLOAT .)
    INT             reduce using rule 102 (type_specifier -> FLOAT .)
    LONG            reduce using rule 102 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 102 (type_specifier -> FLOAT .)
    DOUBLE          reduce using rule 102 (type_specifier -> FLOAT .)
    SIGNED          reduce using rule 102 (type_specifier -> FLOAT .)
    UNSIGNED        reduce using rule 102 (type_specifier -> FLOAT .)
    TYPE_NAME       reduce using rule 102 (type_specifier -> FLOAT .)
    CONST           reduce using rule 102 (type_specifier -> FLOAT .)
    VOLATILE        reduce using rule 102 (type_specifier -> FLOAT .)
    ENUM            reduce using rule 102 (type_specifier -> FLOAT .)
    STRUCT          reduce using rule 102 (type_specifier -> FLOAT .)
    UNION           reduce using rule 102 (type_specifier -> FLOAT .)
    SEMICOLON       reduce using rule 102 (type_specifier -> FLOAT .)
    MULTIPLY        reduce using rule 102 (type_specifier -> FLOAT .)
    ID              reduce using rule 102 (type_specifier -> FLOAT .)
    LPAREN          reduce using rule 102 (type_specifier -> FLOAT .)
    LSQUAREBRACKET  reduce using rule 102 (type_specifier -> FLOAT .)
    COMMA           reduce using rule 102 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 102 (type_specifier -> FLOAT .)
    COLON           reduce using rule 102 (type_specifier -> FLOAT .)


state 23

    (103) type_specifier -> DOUBLE .

    TYPEDEF         reduce using rule 103 (type_specifier -> DOUBLE .)
    EXTERN          reduce using rule 103 (type_specifier -> DOUBLE .)
    STATIC          reduce using rule 103 (type_specifier -> DOUBLE .)
    AUTO            reduce using rule 103 (type_specifier -> DOUBLE .)
    REGISTER        reduce using rule 103 (type_specifier -> DOUBLE .)
    VOID            reduce using rule 103 (type_specifier -> DOUBLE .)
    CHAR            reduce using rule 103 (type_specifier -> DOUBLE .)
    SHORT           reduce using rule 103 (type_specifier -> DOUBLE .)
    INT             reduce using rule 103 (type_specifier -> DOUBLE .)
    LONG            reduce using rule 103 (type_specifier -> DOUBLE .)
    FLOAT           reduce using rule 103 (type_specifier -> DOUBLE .)
    DOUBLE          reduce using rule 103 (type_specifier -> DOUBLE .)
    SIGNED          reduce using rule 103 (type_specifier -> DOUBLE .)
    UNSIGNED        reduce using rule 103 (type_specifier -> DOUBLE .)
    TYPE_NAME       reduce using rule 103 (type_specifier -> DOUBLE .)
    CONST           reduce using rule 103 (type_specifier -> DOUBLE .)
    VOLATILE        reduce using rule 103 (type_specifier -> DOUBLE .)
    ENUM            reduce using rule 103 (type_specifier -> DOUBLE .)
    STRUCT          reduce using rule 103 (type_specifier -> DOUBLE .)
    UNION           reduce using rule 103 (type_specifier -> DOUBLE .)
    SEMICOLON       reduce using rule 103 (type_specifier -> DOUBLE .)
    MULTIPLY        reduce using rule 103 (type_specifier -> DOUBLE .)
    ID              reduce using rule 103 (type_specifier -> DOUBLE .)
    LPAREN          reduce using rule 103 (type_specifier -> DOUBLE .)
    LSQUAREBRACKET  reduce using rule 103 (type_specifier -> DOUBLE .)
    COMMA           reduce using rule 103 (type_specifier -> DOUBLE .)
    RPAREN          reduce using rule 103 (type_specifier -> DOUBLE .)
    COLON           reduce using rule 103 (type_specifier -> DOUBLE .)


state 24

    (104) type_specifier -> SIGNED .

    TYPEDEF         reduce using rule 104 (type_specifier -> SIGNED .)
    EXTERN          reduce using rule 104 (type_specifier -> SIGNED .)
    STATIC          reduce using rule 104 (type_specifier -> SIGNED .)
    AUTO            reduce using rule 104 (type_specifier -> SIGNED .)
    REGISTER        reduce using rule 104 (type_specifier -> SIGNED .)
    VOID            reduce using rule 104 (type_specifier -> SIGNED .)
    CHAR            reduce using rule 104 (type_specifier -> SIGNED .)
    SHORT           reduce using rule 104 (type_specifier -> SIGNED .)
    INT             reduce using rule 104 (type_specifier -> SIGNED .)
    LONG            reduce using rule 104 (type_specifier -> SIGNED .)
    FLOAT           reduce using rule 104 (type_specifier -> SIGNED .)
    DOUBLE          reduce using rule 104 (type_specifier -> SIGNED .)
    SIGNED          reduce using rule 104 (type_specifier -> SIGNED .)
    UNSIGNED        reduce using rule 104 (type_specifier -> SIGNED .)
    TYPE_NAME       reduce using rule 104 (type_specifier -> SIGNED .)
    CONST           reduce using rule 104 (type_specifier -> SIGNED .)
    VOLATILE        reduce using rule 104 (type_specifier -> SIGNED .)
    ENUM            reduce using rule 104 (type_specifier -> SIGNED .)
    STRUCT          reduce using rule 104 (type_specifier -> SIGNED .)
    UNION           reduce using rule 104 (type_specifier -> SIGNED .)
    SEMICOLON       reduce using rule 104 (type_specifier -> SIGNED .)
    MULTIPLY        reduce using rule 104 (type_specifier -> SIGNED .)
    ID              reduce using rule 104 (type_specifier -> SIGNED .)
    LPAREN          reduce using rule 104 (type_specifier -> SIGNED .)
    LSQUAREBRACKET  reduce using rule 104 (type_specifier -> SIGNED .)
    COMMA           reduce using rule 104 (type_specifier -> SIGNED .)
    RPAREN          reduce using rule 104 (type_specifier -> SIGNED .)
    COLON           reduce using rule 104 (type_specifier -> SIGNED .)


state 25

    (105) type_specifier -> UNSIGNED .

    TYPEDEF         reduce using rule 105 (type_specifier -> UNSIGNED .)
    EXTERN          reduce using rule 105 (type_specifier -> UNSIGNED .)
    STATIC          reduce using rule 105 (type_specifier -> UNSIGNED .)
    AUTO            reduce using rule 105 (type_specifier -> UNSIGNED .)
    REGISTER        reduce using rule 105 (type_specifier -> UNSIGNED .)
    VOID            reduce using rule 105 (type_specifier -> UNSIGNED .)
    CHAR            reduce using rule 105 (type_specifier -> UNSIGNED .)
    SHORT           reduce using rule 105 (type_specifier -> UNSIGNED .)
    INT             reduce using rule 105 (type_specifier -> UNSIGNED .)
    LONG            reduce using rule 105 (type_specifier -> UNSIGNED .)
    FLOAT           reduce using rule 105 (type_specifier -> UNSIGNED .)
    DOUBLE          reduce using rule 105 (type_specifier -> UNSIGNED .)
    SIGNED          reduce using rule 105 (type_specifier -> UNSIGNED .)
    UNSIGNED        reduce using rule 105 (type_specifier -> UNSIGNED .)
    TYPE_NAME       reduce using rule 105 (type_specifier -> UNSIGNED .)
    CONST           reduce using rule 105 (type_specifier -> UNSIGNED .)
    VOLATILE        reduce using rule 105 (type_specifier -> UNSIGNED .)
    ENUM            reduce using rule 105 (type_specifier -> UNSIGNED .)
    STRUCT          reduce using rule 105 (type_specifier -> UNSIGNED .)
    UNION           reduce using rule 105 (type_specifier -> UNSIGNED .)
    SEMICOLON       reduce using rule 105 (type_specifier -> UNSIGNED .)
    MULTIPLY        reduce using rule 105 (type_specifier -> UNSIGNED .)
    ID              reduce using rule 105 (type_specifier -> UNSIGNED .)
    LPAREN          reduce using rule 105 (type_specifier -> UNSIGNED .)
    LSQUAREBRACKET  reduce using rule 105 (type_specifier -> UNSIGNED .)
    COMMA           reduce using rule 105 (type_specifier -> UNSIGNED .)
    RPAREN          reduce using rule 105 (type_specifier -> UNSIGNED .)
    COLON           reduce using rule 105 (type_specifier -> UNSIGNED .)


state 26

    (106) type_specifier -> struct_or_union_specifier .

    TYPEDEF         reduce using rule 106 (type_specifier -> struct_or_union_specifier .)
    EXTERN          reduce using rule 106 (type_specifier -> struct_or_union_specifier .)
    STATIC          reduce using rule 106 (type_specifier -> struct_or_union_specifier .)
    AUTO            reduce using rule 106 (type_specifier -> struct_or_union_specifier .)
    REGISTER        reduce using rule 106 (type_specifier -> struct_or_union_specifier .)
    VOID            reduce using rule 106 (type_specifier -> struct_or_union_specifier .)
    CHAR            reduce using rule 106 (type_specifier -> struct_or_union_specifier .)
    SHORT           reduce using rule 106 (type_specifier -> struct_or_union_specifier .)
    INT             reduce using rule 106 (type_specifier -> struct_or_union_specifier .)
    LONG            reduce using rule 106 (type_specifier -> struct_or_union_specifier .)
    FLOAT           reduce using rule 106 (type_specifier -> struct_or_union_specifier .)
    DOUBLE          reduce using rule 106 (type_specifier -> struct_or_union_specifier .)
    SIGNED          reduce using rule 106 (type_specifier -> struct_or_union_specifier .)
    UNSIGNED        reduce using rule 106 (type_specifier -> struct_or_union_specifier .)
    TYPE_NAME       reduce using rule 106 (type_specifier -> struct_or_union_specifier .)
    CONST           reduce using rule 106 (type_specifier -> struct_or_union_specifier .)
    VOLATILE        reduce using rule 106 (type_specifier -> struct_or_union_specifier .)
    ENUM            reduce using rule 106 (type_specifier -> struct_or_union_specifier .)
    STRUCT          reduce using rule 106 (type_specifier -> struct_or_union_specifier .)
    UNION           reduce using rule 106 (type_specifier -> struct_or_union_specifier .)
    SEMICOLON       reduce using rule 106 (type_specifier -> struct_or_union_specifier .)
    MULTIPLY        reduce using rule 106 (type_specifier -> struct_or_union_specifier .)
    ID              reduce using rule 106 (type_specifier -> struct_or_union_specifier .)
    LPAREN          reduce using rule 106 (type_specifier -> struct_or_union_specifier .)
    LSQUAREBRACKET  reduce using rule 106 (type_specifier -> struct_or_union_specifier .)
    COMMA           reduce using rule 106 (type_specifier -> struct_or_union_specifier .)
    RPAREN          reduce using rule 106 (type_specifier -> struct_or_union_specifier .)
    COLON           reduce using rule 106 (type_specifier -> struct_or_union_specifier .)


state 27

    (107) type_specifier -> enum_specifier .

    TYPEDEF         reduce using rule 107 (type_specifier -> enum_specifier .)
    EXTERN          reduce using rule 107 (type_specifier -> enum_specifier .)
    STATIC          reduce using rule 107 (type_specifier -> enum_specifier .)
    AUTO            reduce using rule 107 (type_specifier -> enum_specifier .)
    REGISTER        reduce using rule 107 (type_specifier -> enum_specifier .)
    VOID            reduce using rule 107 (type_specifier -> enum_specifier .)
    CHAR            reduce using rule 107 (type_specifier -> enum_specifier .)
    SHORT           reduce using rule 107 (type_specifier -> enum_specifier .)
    INT             reduce using rule 107 (type_specifier -> enum_specifier .)
    LONG            reduce using rule 107 (type_specifier -> enum_specifier .)
    FLOAT           reduce using rule 107 (type_specifier -> enum_specifier .)
    DOUBLE          reduce using rule 107 (type_specifier -> enum_specifier .)
    SIGNED          reduce using rule 107 (type_specifier -> enum_specifier .)
    UNSIGNED        reduce using rule 107 (type_specifier -> enum_specifier .)
    TYPE_NAME       reduce using rule 107 (type_specifier -> enum_specifier .)
    CONST           reduce using rule 107 (type_specifier -> enum_specifier .)
    VOLATILE        reduce using rule 107 (type_specifier -> enum_specifier .)
    ENUM            reduce using rule 107 (type_specifier -> enum_specifier .)
    STRUCT          reduce using rule 107 (type_specifier -> enum_specifier .)
    UNION           reduce using rule 107 (type_specifier -> enum_specifier .)
    SEMICOLON       reduce using rule 107 (type_specifier -> enum_specifier .)
    MULTIPLY        reduce using rule 107 (type_specifier -> enum_specifier .)
    ID              reduce using rule 107 (type_specifier -> enum_specifier .)
    LPAREN          reduce using rule 107 (type_specifier -> enum_specifier .)
    LSQUAREBRACKET  reduce using rule 107 (type_specifier -> enum_specifier .)
    COMMA           reduce using rule 107 (type_specifier -> enum_specifier .)
    RPAREN          reduce using rule 107 (type_specifier -> enum_specifier .)
    COLON           reduce using rule 107 (type_specifier -> enum_specifier .)


state 28

    (108) type_specifier -> TYPE_NAME .

    TYPEDEF         reduce using rule 108 (type_specifier -> TYPE_NAME .)
    EXTERN          reduce using rule 108 (type_specifier -> TYPE_NAME .)
    STATIC          reduce using rule 108 (type_specifier -> TYPE_NAME .)
    AUTO            reduce using rule 108 (type_specifier -> TYPE_NAME .)
    REGISTER        reduce using rule 108 (type_specifier -> TYPE_NAME .)
    VOID            reduce using rule 108 (type_specifier -> TYPE_NAME .)
    CHAR            reduce using rule 108 (type_specifier -> TYPE_NAME .)
    SHORT           reduce using rule 108 (type_specifier -> TYPE_NAME .)
    INT             reduce using rule 108 (type_specifier -> TYPE_NAME .)
    LONG            reduce using rule 108 (type_specifier -> TYPE_NAME .)
    FLOAT           reduce using rule 108 (type_specifier -> TYPE_NAME .)
    DOUBLE          reduce using rule 108 (type_specifier -> TYPE_NAME .)
    SIGNED          reduce using rule 108 (type_specifier -> TYPE_NAME .)
    UNSIGNED        reduce using rule 108 (type_specifier -> TYPE_NAME .)
    TYPE_NAME       reduce using rule 108 (type_specifier -> TYPE_NAME .)
    CONST           reduce using rule 108 (type_specifier -> TYPE_NAME .)
    VOLATILE        reduce using rule 108 (type_specifier -> TYPE_NAME .)
    ENUM            reduce using rule 108 (type_specifier -> TYPE_NAME .)
    STRUCT          reduce using rule 108 (type_specifier -> TYPE_NAME .)
    UNION           reduce using rule 108 (type_specifier -> TYPE_NAME .)
    SEMICOLON       reduce using rule 108 (type_specifier -> TYPE_NAME .)
    MULTIPLY        reduce using rule 108 (type_specifier -> TYPE_NAME .)
    ID              reduce using rule 108 (type_specifier -> TYPE_NAME .)
    LPAREN          reduce using rule 108 (type_specifier -> TYPE_NAME .)
    LSQUAREBRACKET  reduce using rule 108 (type_specifier -> TYPE_NAME .)
    COMMA           reduce using rule 108 (type_specifier -> TYPE_NAME .)
    RPAREN          reduce using rule 108 (type_specifier -> TYPE_NAME .)
    COLON           reduce using rule 108 (type_specifier -> TYPE_NAME .)


state 29

    (133) type_qualifier -> CONST .

    TYPEDEF         reduce using rule 133 (type_qualifier -> CONST .)
    EXTERN          reduce using rule 133 (type_qualifier -> CONST .)
    STATIC          reduce using rule 133 (type_qualifier -> CONST .)
    AUTO            reduce using rule 133 (type_qualifier -> CONST .)
    REGISTER        reduce using rule 133 (type_qualifier -> CONST .)
    VOID            reduce using rule 133 (type_qualifier -> CONST .)
    CHAR            reduce using rule 133 (type_qualifier -> CONST .)
    SHORT           reduce using rule 133 (type_qualifier -> CONST .)
    INT             reduce using rule 133 (type_qualifier -> CONST .)
    LONG            reduce using rule 133 (type_qualifier -> CONST .)
    FLOAT           reduce using rule 133 (type_qualifier -> CONST .)
    DOUBLE          reduce using rule 133 (type_qualifier -> CONST .)
    SIGNED          reduce using rule 133 (type_qualifier -> CONST .)
    UNSIGNED        reduce using rule 133 (type_qualifier -> CONST .)
    TYPE_NAME       reduce using rule 133 (type_qualifier -> CONST .)
    CONST           reduce using rule 133 (type_qualifier -> CONST .)
    VOLATILE        reduce using rule 133 (type_qualifier -> CONST .)
    ENUM            reduce using rule 133 (type_qualifier -> CONST .)
    STRUCT          reduce using rule 133 (type_qualifier -> CONST .)
    UNION           reduce using rule 133 (type_qualifier -> CONST .)
    SEMICOLON       reduce using rule 133 (type_qualifier -> CONST .)
    MULTIPLY        reduce using rule 133 (type_qualifier -> CONST .)
    ID              reduce using rule 133 (type_qualifier -> CONST .)
    LPAREN          reduce using rule 133 (type_qualifier -> CONST .)
    LSQUAREBRACKET  reduce using rule 133 (type_qualifier -> CONST .)
    COMMA           reduce using rule 133 (type_qualifier -> CONST .)
    RPAREN          reduce using rule 133 (type_qualifier -> CONST .)
    COLON           reduce using rule 133 (type_qualifier -> CONST .)


state 30

    (134) type_qualifier -> VOLATILE .

    TYPEDEF         reduce using rule 134 (type_qualifier -> VOLATILE .)
    EXTERN          reduce using rule 134 (type_qualifier -> VOLATILE .)
    STATIC          reduce using rule 134 (type_qualifier -> VOLATILE .)
    AUTO            reduce using rule 134 (type_qualifier -> VOLATILE .)
    REGISTER        reduce using rule 134 (type_qualifier -> VOLATILE .)
    VOID            reduce using rule 134 (type_qualifier -> VOLATILE .)
    CHAR            reduce using rule 134 (type_qualifier -> VOLATILE .)
    SHORT           reduce using rule 134 (type_qualifier -> VOLATILE .)
    INT             reduce using rule 134 (type_qualifier -> VOLATILE .)
    LONG            reduce using rule 134 (type_qualifier -> VOLATILE .)
    FLOAT           reduce using rule 134 (type_qualifier -> VOLATILE .)
    DOUBLE          reduce using rule 134 (type_qualifier -> VOLATILE .)
    SIGNED          reduce using rule 134 (type_qualifier -> VOLATILE .)
    UNSIGNED        reduce using rule 134 (type_qualifier -> VOLATILE .)
    TYPE_NAME       reduce using rule 134 (type_qualifier -> VOLATILE .)
    CONST           reduce using rule 134 (type_qualifier -> VOLATILE .)
    VOLATILE        reduce using rule 134 (type_qualifier -> VOLATILE .)
    ENUM            reduce using rule 134 (type_qualifier -> VOLATILE .)
    STRUCT          reduce using rule 134 (type_qualifier -> VOLATILE .)
    UNION           reduce using rule 134 (type_qualifier -> VOLATILE .)
    SEMICOLON       reduce using rule 134 (type_qualifier -> VOLATILE .)
    MULTIPLY        reduce using rule 134 (type_qualifier -> VOLATILE .)
    ID              reduce using rule 134 (type_qualifier -> VOLATILE .)
    LPAREN          reduce using rule 134 (type_qualifier -> VOLATILE .)
    LSQUAREBRACKET  reduce using rule 134 (type_qualifier -> VOLATILE .)
    COMMA           reduce using rule 134 (type_qualifier -> VOLATILE .)
    RPAREN          reduce using rule 134 (type_qualifier -> VOLATILE .)
    COLON           reduce using rule 134 (type_qualifier -> VOLATILE .)


state 31

    (144) pointer -> MULTIPLY .
    (145) pointer -> MULTIPLY . type_qualifier_list
    (146) pointer -> MULTIPLY . pointer
    (147) pointer -> MULTIPLY . type_qualifier_list pointer
    (148) type_qualifier_list -> . type_qualifier
    (149) type_qualifier_list -> . type_qualifier_list type_qualifier
    (144) pointer -> . MULTIPLY
    (145) pointer -> . MULTIPLY type_qualifier_list
    (146) pointer -> . MULTIPLY pointer
    (147) pointer -> . MULTIPLY type_qualifier_list pointer
    (133) type_qualifier -> . CONST
    (134) type_qualifier -> . VOLATILE

    ID              reduce using rule 144 (pointer -> MULTIPLY .)
    LPAREN          reduce using rule 144 (pointer -> MULTIPLY .)
    LSQUAREBRACKET  reduce using rule 144 (pointer -> MULTIPLY .)
    COMMA           reduce using rule 144 (pointer -> MULTIPLY .)
    RPAREN          reduce using rule 144 (pointer -> MULTIPLY .)
    MULTIPLY        shift and go to state 31
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30

    type_qualifier_list            shift and go to state 54
    pointer                        shift and go to state 55
    type_qualifier                 shift and go to state 56

state 32

    (137) direct_declarator -> ID .

    LSQUAREBRACKET  reduce using rule 137 (direct_declarator -> ID .)
    LPAREN          reduce using rule 137 (direct_declarator -> ID .)
    LCURLYBRACKET   reduce using rule 137 (direct_declarator -> ID .)
    TYPEDEF         reduce using rule 137 (direct_declarator -> ID .)
    EXTERN          reduce using rule 137 (direct_declarator -> ID .)
    STATIC          reduce using rule 137 (direct_declarator -> ID .)
    AUTO            reduce using rule 137 (direct_declarator -> ID .)
    REGISTER        reduce using rule 137 (direct_declarator -> ID .)
    VOID            reduce using rule 137 (direct_declarator -> ID .)
    CHAR            reduce using rule 137 (direct_declarator -> ID .)
    SHORT           reduce using rule 137 (direct_declarator -> ID .)
    INT             reduce using rule 137 (direct_declarator -> ID .)
    LONG            reduce using rule 137 (direct_declarator -> ID .)
    FLOAT           reduce using rule 137 (direct_declarator -> ID .)
    DOUBLE          reduce using rule 137 (direct_declarator -> ID .)
    SIGNED          reduce using rule 137 (direct_declarator -> ID .)
    UNSIGNED        reduce using rule 137 (direct_declarator -> ID .)
    TYPE_NAME       reduce using rule 137 (direct_declarator -> ID .)
    CONST           reduce using rule 137 (direct_declarator -> ID .)
    VOLATILE        reduce using rule 137 (direct_declarator -> ID .)
    ENUM            reduce using rule 137 (direct_declarator -> ID .)
    STRUCT          reduce using rule 137 (direct_declarator -> ID .)
    UNION           reduce using rule 137 (direct_declarator -> ID .)
    EQUALS          reduce using rule 137 (direct_declarator -> ID .)
    SEMICOLON       reduce using rule 137 (direct_declarator -> ID .)
    COMMA           reduce using rule 137 (direct_declarator -> ID .)
    RPAREN          reduce using rule 137 (direct_declarator -> ID .)
    COLON           reduce using rule 137 (direct_declarator -> ID .)


state 33

    (138) direct_declarator -> LPAREN . declarator RPAREN
    (135) declarator -> . pointer direct_declarator
    (136) declarator -> . direct_declarator
    (144) pointer -> . MULTIPLY
    (145) pointer -> . MULTIPLY type_qualifier_list
    (146) pointer -> . MULTIPLY pointer
    (147) pointer -> . MULTIPLY type_qualifier_list pointer
    (137) direct_declarator -> . ID
    (138) direct_declarator -> . LPAREN declarator RPAREN
    (139) direct_declarator -> . direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (140) direct_declarator -> . direct_declarator LSQUAREBRACKET RSQUAREBRACKET
    (141) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (142) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (143) direct_declarator -> . direct_declarator LPAREN RPAREN

    MULTIPLY        shift and go to state 31
    ID              shift and go to state 32
    LPAREN          shift and go to state 33

    declarator                     shift and go to state 57
    pointer                        shift and go to state 10
    direct_declarator              shift and go to state 11

state 34

    (109) struct_or_union_specifier -> struct_or_union . ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (110) struct_or_union_specifier -> struct_or_union . LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (111) struct_or_union_specifier -> struct_or_union . ID

    ID              shift and go to state 58
    LCURLYBRACKET   shift and go to state 59


state 35

    (126) enum_specifier -> ENUM . LCURLYBRACKET enumerator_list RCURLYBRACKET
    (127) enum_specifier -> ENUM . ID LCURLYBRACKET enumerator_list RCURLYBRACKET
    (128) enum_specifier -> ENUM . ID

    LCURLYBRACKET   shift and go to state 60
    ID              shift and go to state 61


state 36

    (112) struct_or_union -> STRUCT .

    ID              reduce using rule 112 (struct_or_union -> STRUCT .)
    LCURLYBRACKET   reduce using rule 112 (struct_or_union -> STRUCT .)


state 37

    (113) struct_or_union -> UNION .

    ID              reduce using rule 113 (struct_or_union -> UNION .)
    LCURLYBRACKET   reduce using rule 113 (struct_or_union -> UNION .)


state 38

    (209) translation_unit -> translation_unit external_declaration .

    TYPEDEF         reduce using rule 209 (translation_unit -> translation_unit external_declaration .)
    EXTERN          reduce using rule 209 (translation_unit -> translation_unit external_declaration .)
    STATIC          reduce using rule 209 (translation_unit -> translation_unit external_declaration .)
    AUTO            reduce using rule 209 (translation_unit -> translation_unit external_declaration .)
    REGISTER        reduce using rule 209 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 209 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 209 (translation_unit -> translation_unit external_declaration .)
    SHORT           reduce using rule 209 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 209 (translation_unit -> translation_unit external_declaration .)
    LONG            reduce using rule 209 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 209 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 209 (translation_unit -> translation_unit external_declaration .)
    SIGNED          reduce using rule 209 (translation_unit -> translation_unit external_declaration .)
    UNSIGNED        reduce using rule 209 (translation_unit -> translation_unit external_declaration .)
    TYPE_NAME       reduce using rule 209 (translation_unit -> translation_unit external_declaration .)
    CONST           reduce using rule 209 (translation_unit -> translation_unit external_declaration .)
    VOLATILE        reduce using rule 209 (translation_unit -> translation_unit external_declaration .)
    MULTIPLY        reduce using rule 209 (translation_unit -> translation_unit external_declaration .)
    ID              reduce using rule 209 (translation_unit -> translation_unit external_declaration .)
    LPAREN          reduce using rule 209 (translation_unit -> translation_unit external_declaration .)
    ENUM            reduce using rule 209 (translation_unit -> translation_unit external_declaration .)
    STRUCT          reduce using rule 209 (translation_unit -> translation_unit external_declaration .)
    UNION           reduce using rule 209 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 209 (translation_unit -> translation_unit external_declaration .)


state 39

    (212) function_definition -> declaration_specifiers declarator . declaration_list compound_statement
    (213) function_definition -> declaration_specifiers declarator . compound_statement
    (90) init_declarator -> declarator .
    (91) init_declarator -> declarator . EQUALS initializer
    (190) declaration_list -> . declaration
    (191) declaration_list -> . declaration_list declaration
    (186) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (187) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (188) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (189) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (80) declaration -> . declaration_specifiers SEMICOLON
    (81) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (82) declaration_specifiers -> . storage_class_specifier
    (83) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (84) declaration_specifiers -> . type_specifier
    (85) declaration_specifiers -> . type_specifier declaration_specifiers
    (86) declaration_specifiers -> . type_qualifier
    (87) declaration_specifiers -> . type_qualifier declaration_specifiers
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . EXTERN
    (94) storage_class_specifier -> . STATIC
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) type_specifier -> . VOID
    (98) type_specifier -> . CHAR
    (99) type_specifier -> . SHORT
    (100) type_specifier -> . INT
    (101) type_specifier -> . LONG
    (102) type_specifier -> . FLOAT
    (103) type_specifier -> . DOUBLE
    (104) type_specifier -> . SIGNED
    (105) type_specifier -> . UNSIGNED
    (106) type_specifier -> . struct_or_union_specifier
    (107) type_specifier -> . enum_specifier
    (108) type_specifier -> . TYPE_NAME
    (133) type_qualifier -> . CONST
    (134) type_qualifier -> . VOLATILE
    (109) struct_or_union_specifier -> . struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (110) struct_or_union_specifier -> . struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (111) struct_or_union_specifier -> . struct_or_union ID
    (126) enum_specifier -> . ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET
    (127) enum_specifier -> . ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET
    (128) enum_specifier -> . ENUM ID
    (112) struct_or_union -> . STRUCT
    (113) struct_or_union -> . UNION

    SEMICOLON       reduce using rule 90 (init_declarator -> declarator .)
    COMMA           reduce using rule 90 (init_declarator -> declarator .)
    EQUALS          shift and go to state 64
    LCURLYBRACKET   shift and go to state 46
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    TYPE_NAME       shift and go to state 28
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    declaration_specifiers         shift and go to state 47
    declaration_list               shift and go to state 62
    compound_statement             shift and go to state 63
    declaration                    shift and go to state 45
    storage_class_specifier        shift and go to state 7
    type_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 9
    struct_or_union_specifier      shift and go to state 26
    enum_specifier                 shift and go to state 27
    struct_or_union                shift and go to state 34

state 40

    (80) declaration -> declaration_specifiers SEMICOLON .

    TYPEDEF         reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    EXTERN          reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    STATIC          reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    AUTO            reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    REGISTER        reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    VOID            reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    CHAR            reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    SHORT           reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    INT             reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    LONG            reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    FLOAT           reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    DOUBLE          reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    SIGNED          reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    UNSIGNED        reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    TYPE_NAME       reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    CONST           reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    VOLATILE        reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    MULTIPLY        reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    ID              reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    LPAREN          reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    ENUM            reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    STRUCT          reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    UNION           reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    $end            reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    LCURLYBRACKET   reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    RCURLYBRACKET   reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    CASE            reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    DEFAULT         reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    SEMICOLON       reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    IF              reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    SWITCH          reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    WHILE           reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    DO              reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    FOR             reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    GOTO            reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    CONTINUE        reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    BREAK           reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    RETURN          reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    INCREMENT       reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    DECREMENT       reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    SIZEOF          reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    AND             reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    PLUS            reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    MINUS           reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    NOT             reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    LNOT            reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    CHAR_CONST      reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    INT_CONST       reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    FLOAT_CONST     reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    OCTAL_CONST     reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    HEX_CONST       reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    BIN_CONST       reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    STRING_LITERAL  reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)


state 41

    (81) declaration -> declaration_specifiers init_declarator_list . SEMICOLON
    (89) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMICOLON       shift and go to state 65
    COMMA           shift and go to state 66


state 42

    (88) init_declarator_list -> init_declarator .

    SEMICOLON       reduce using rule 88 (init_declarator_list -> init_declarator .)
    COMMA           reduce using rule 88 (init_declarator_list -> init_declarator .)


state 43

    (214) function_definition -> declarator declaration_list . compound_statement
    (191) declaration_list -> declaration_list . declaration
    (186) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (187) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (188) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (189) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (80) declaration -> . declaration_specifiers SEMICOLON
    (81) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (82) declaration_specifiers -> . storage_class_specifier
    (83) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (84) declaration_specifiers -> . type_specifier
    (85) declaration_specifiers -> . type_specifier declaration_specifiers
    (86) declaration_specifiers -> . type_qualifier
    (87) declaration_specifiers -> . type_qualifier declaration_specifiers
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . EXTERN
    (94) storage_class_specifier -> . STATIC
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) type_specifier -> . VOID
    (98) type_specifier -> . CHAR
    (99) type_specifier -> . SHORT
    (100) type_specifier -> . INT
    (101) type_specifier -> . LONG
    (102) type_specifier -> . FLOAT
    (103) type_specifier -> . DOUBLE
    (104) type_specifier -> . SIGNED
    (105) type_specifier -> . UNSIGNED
    (106) type_specifier -> . struct_or_union_specifier
    (107) type_specifier -> . enum_specifier
    (108) type_specifier -> . TYPE_NAME
    (133) type_qualifier -> . CONST
    (134) type_qualifier -> . VOLATILE
    (109) struct_or_union_specifier -> . struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (110) struct_or_union_specifier -> . struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (111) struct_or_union_specifier -> . struct_or_union ID
    (126) enum_specifier -> . ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET
    (127) enum_specifier -> . ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET
    (128) enum_specifier -> . ENUM ID
    (112) struct_or_union -> . STRUCT
    (113) struct_or_union -> . UNION

    LCURLYBRACKET   shift and go to state 46
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    TYPE_NAME       shift and go to state 28
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    compound_statement             shift and go to state 67
    declaration                    shift and go to state 68
    declaration_specifiers         shift and go to state 47
    storage_class_specifier        shift and go to state 7
    type_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 9
    struct_or_union_specifier      shift and go to state 26
    enum_specifier                 shift and go to state 27
    struct_or_union                shift and go to state 34

state 44

    (215) function_definition -> declarator compound_statement .

    TYPEDEF         reduce using rule 215 (function_definition -> declarator compound_statement .)
    EXTERN          reduce using rule 215 (function_definition -> declarator compound_statement .)
    STATIC          reduce using rule 215 (function_definition -> declarator compound_statement .)
    AUTO            reduce using rule 215 (function_definition -> declarator compound_statement .)
    REGISTER        reduce using rule 215 (function_definition -> declarator compound_statement .)
    VOID            reduce using rule 215 (function_definition -> declarator compound_statement .)
    CHAR            reduce using rule 215 (function_definition -> declarator compound_statement .)
    SHORT           reduce using rule 215 (function_definition -> declarator compound_statement .)
    INT             reduce using rule 215 (function_definition -> declarator compound_statement .)
    LONG            reduce using rule 215 (function_definition -> declarator compound_statement .)
    FLOAT           reduce using rule 215 (function_definition -> declarator compound_statement .)
    DOUBLE          reduce using rule 215 (function_definition -> declarator compound_statement .)
    SIGNED          reduce using rule 215 (function_definition -> declarator compound_statement .)
    UNSIGNED        reduce using rule 215 (function_definition -> declarator compound_statement .)
    TYPE_NAME       reduce using rule 215 (function_definition -> declarator compound_statement .)
    CONST           reduce using rule 215 (function_definition -> declarator compound_statement .)
    VOLATILE        reduce using rule 215 (function_definition -> declarator compound_statement .)
    MULTIPLY        reduce using rule 215 (function_definition -> declarator compound_statement .)
    ID              reduce using rule 215 (function_definition -> declarator compound_statement .)
    LPAREN          reduce using rule 215 (function_definition -> declarator compound_statement .)
    ENUM            reduce using rule 215 (function_definition -> declarator compound_statement .)
    STRUCT          reduce using rule 215 (function_definition -> declarator compound_statement .)
    UNION           reduce using rule 215 (function_definition -> declarator compound_statement .)
    $end            reduce using rule 215 (function_definition -> declarator compound_statement .)


state 45

    (190) declaration_list -> declaration .

    LCURLYBRACKET   reduce using rule 190 (declaration_list -> declaration .)
    TYPEDEF         reduce using rule 190 (declaration_list -> declaration .)
    EXTERN          reduce using rule 190 (declaration_list -> declaration .)
    STATIC          reduce using rule 190 (declaration_list -> declaration .)
    AUTO            reduce using rule 190 (declaration_list -> declaration .)
    REGISTER        reduce using rule 190 (declaration_list -> declaration .)
    VOID            reduce using rule 190 (declaration_list -> declaration .)
    CHAR            reduce using rule 190 (declaration_list -> declaration .)
    SHORT           reduce using rule 190 (declaration_list -> declaration .)
    INT             reduce using rule 190 (declaration_list -> declaration .)
    LONG            reduce using rule 190 (declaration_list -> declaration .)
    FLOAT           reduce using rule 190 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 190 (declaration_list -> declaration .)
    SIGNED          reduce using rule 190 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 190 (declaration_list -> declaration .)
    TYPE_NAME       reduce using rule 190 (declaration_list -> declaration .)
    CONST           reduce using rule 190 (declaration_list -> declaration .)
    VOLATILE        reduce using rule 190 (declaration_list -> declaration .)
    ENUM            reduce using rule 190 (declaration_list -> declaration .)
    STRUCT          reduce using rule 190 (declaration_list -> declaration .)
    UNION           reduce using rule 190 (declaration_list -> declaration .)
    RCURLYBRACKET   reduce using rule 190 (declaration_list -> declaration .)
    ID              reduce using rule 190 (declaration_list -> declaration .)
    CASE            reduce using rule 190 (declaration_list -> declaration .)
    DEFAULT         reduce using rule 190 (declaration_list -> declaration .)
    SEMICOLON       reduce using rule 190 (declaration_list -> declaration .)
    IF              reduce using rule 190 (declaration_list -> declaration .)
    SWITCH          reduce using rule 190 (declaration_list -> declaration .)
    WHILE           reduce using rule 190 (declaration_list -> declaration .)
    DO              reduce using rule 190 (declaration_list -> declaration .)
    FOR             reduce using rule 190 (declaration_list -> declaration .)
    GOTO            reduce using rule 190 (declaration_list -> declaration .)
    CONTINUE        reduce using rule 190 (declaration_list -> declaration .)
    BREAK           reduce using rule 190 (declaration_list -> declaration .)
    RETURN          reduce using rule 190 (declaration_list -> declaration .)
    INCREMENT       reduce using rule 190 (declaration_list -> declaration .)
    DECREMENT       reduce using rule 190 (declaration_list -> declaration .)
    SIZEOF          reduce using rule 190 (declaration_list -> declaration .)
    AND             reduce using rule 190 (declaration_list -> declaration .)
    MULTIPLY        reduce using rule 190 (declaration_list -> declaration .)
    PLUS            reduce using rule 190 (declaration_list -> declaration .)
    MINUS           reduce using rule 190 (declaration_list -> declaration .)
    NOT             reduce using rule 190 (declaration_list -> declaration .)
    LNOT            reduce using rule 190 (declaration_list -> declaration .)
    CHAR_CONST      reduce using rule 190 (declaration_list -> declaration .)
    INT_CONST       reduce using rule 190 (declaration_list -> declaration .)
    FLOAT_CONST     reduce using rule 190 (declaration_list -> declaration .)
    OCTAL_CONST     reduce using rule 190 (declaration_list -> declaration .)
    HEX_CONST       reduce using rule 190 (declaration_list -> declaration .)
    BIN_CONST       reduce using rule 190 (declaration_list -> declaration .)
    STRING_LITERAL  reduce using rule 190 (declaration_list -> declaration .)
    LPAREN          reduce using rule 190 (declaration_list -> declaration .)


state 46

    (186) compound_statement -> LCURLYBRACKET . RCURLYBRACKET
    (187) compound_statement -> LCURLYBRACKET . statement_list RCURLYBRACKET
    (188) compound_statement -> LCURLYBRACKET . declaration_list RCURLYBRACKET
    (189) compound_statement -> LCURLYBRACKET . declaration_list statement_list RCURLYBRACKET
    (192) statement_list -> . statement
    (193) statement_list -> . statement_list statement
    (190) declaration_list -> . declaration
    (191) declaration_list -> . declaration_list declaration
    (177) statement -> . labeled_statement
    (178) statement -> . compound_statement
    (179) statement -> . expression_statement
    (180) statement -> . selection_statement
    (181) statement -> . iteration_statement
    (182) statement -> . jump_statement
    (80) declaration -> . declaration_specifiers SEMICOLON
    (81) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (183) labeled_statement -> . ID COLON statement
    (184) labeled_statement -> . CASE constant_expression COLON statement
    (185) labeled_statement -> . DEFAULT COLON statement
    (186) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (187) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (188) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (189) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (194) expression_statement -> . SEMICOLON
    (195) expression_statement -> . expression SEMICOLON
    (196) selection_statement -> . IF LPAREN expression RPAREN statement
    (197) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (198) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (199) iteration_statement -> . WHILE LPAREN expression RPAREN
    (200) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (201) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (202) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (203) jump_statement -> . GOTO ID SEMICOLON
    (204) jump_statement -> . CONTINUE SEMICOLON
    (205) jump_statement -> . BREAK SEMICOLON
    (206) jump_statement -> . RETURN SEMICOLON
    (207) jump_statement -> . RETURN expression SEMICOLON
    (82) declaration_specifiers -> . storage_class_specifier
    (83) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (84) declaration_specifiers -> . type_specifier
    (85) declaration_specifiers -> . type_specifier declaration_specifiers
    (86) declaration_specifiers -> . type_qualifier
    (87) declaration_specifiers -> . type_qualifier declaration_specifiers
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . EXTERN
    (94) storage_class_specifier -> . STATIC
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) type_specifier -> . VOID
    (98) type_specifier -> . CHAR
    (99) type_specifier -> . SHORT
    (100) type_specifier -> . INT
    (101) type_specifier -> . LONG
    (102) type_specifier -> . FLOAT
    (103) type_specifier -> . DOUBLE
    (104) type_specifier -> . SIGNED
    (105) type_specifier -> . UNSIGNED
    (106) type_specifier -> . struct_or_union_specifier
    (107) type_specifier -> . enum_specifier
    (108) type_specifier -> . TYPE_NAME
    (133) type_qualifier -> . CONST
    (134) type_qualifier -> . VOLATILE
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) struct_or_union_specifier -> . struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (110) struct_or_union_specifier -> . struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (111) struct_or_union_specifier -> . struct_or_union ID
    (126) enum_specifier -> . ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET
    (127) enum_specifier -> . ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET
    (128) enum_specifier -> . ENUM ID
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (112) struct_or_union -> . STRUCT
    (113) struct_or_union -> . UNION
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCURLYBRACKET   shift and go to state 69
    ID              shift and go to state 80
    CASE            shift and go to state 81
    DEFAULT         shift and go to state 82
    LCURLYBRACKET   shift and go to state 46
    SEMICOLON       shift and go to state 79
    IF              shift and go to state 84
    SWITCH          shift and go to state 86
    WHILE           shift and go to state 87
    DO              shift and go to state 88
    FOR             shift and go to state 89
    GOTO            shift and go to state 90
    CONTINUE        shift and go to state 91
    BREAK           shift and go to state 92
    RETURN          shift and go to state 93
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    TYPE_NAME       shift and go to state 28
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    ENUM            shift and go to state 35
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    statement_list                 shift and go to state 70
    declaration_list               shift and go to state 71
    statement                      shift and go to state 72
    declaration                    shift and go to state 45
    labeled_statement              shift and go to state 73
    compound_statement             shift and go to state 74
    expression_statement           shift and go to state 75
    selection_statement            shift and go to state 76
    iteration_statement            shift and go to state 77
    jump_statement                 shift and go to state 78
    declaration_specifiers         shift and go to state 47
    expression                     shift and go to state 83
    storage_class_specifier        shift and go to state 7
    type_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 9
    assignment_expression          shift and go to state 94
    struct_or_union_specifier      shift and go to state 26
    enum_specifier                 shift and go to state 27
    conditional_expression         shift and go to state 95
    unary_expression               shift and go to state 96
    struct_or_union                shift and go to state 34
    logical_or_expression          shift and go to state 97
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 47

    (80) declaration -> declaration_specifiers . SEMICOLON
    (81) declaration -> declaration_specifiers . init_declarator_list SEMICOLON
    (88) init_declarator_list -> . init_declarator
    (89) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (90) init_declarator -> . declarator
    (91) init_declarator -> . declarator EQUALS initializer
    (135) declarator -> . pointer direct_declarator
    (136) declarator -> . direct_declarator
    (144) pointer -> . MULTIPLY
    (145) pointer -> . MULTIPLY type_qualifier_list
    (146) pointer -> . MULTIPLY pointer
    (147) pointer -> . MULTIPLY type_qualifier_list pointer
    (137) direct_declarator -> . ID
    (138) direct_declarator -> . LPAREN declarator RPAREN
    (139) direct_declarator -> . direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (140) direct_declarator -> . direct_declarator LSQUAREBRACKET RSQUAREBRACKET
    (141) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (142) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (143) direct_declarator -> . direct_declarator LPAREN RPAREN

    SEMICOLON       shift and go to state 40
    MULTIPLY        shift and go to state 31
    ID              shift and go to state 32
    LPAREN          shift and go to state 33

    init_declarator_list           shift and go to state 41
    init_declarator                shift and go to state 42
    declarator                     shift and go to state 127
    pointer                        shift and go to state 10
    direct_declarator              shift and go to state 11

state 48

    (83) declaration_specifiers -> storage_class_specifier declaration_specifiers .

    SEMICOLON       reduce using rule 83 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    MULTIPLY        reduce using rule 83 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    ID              reduce using rule 83 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    LPAREN          reduce using rule 83 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    LSQUAREBRACKET  reduce using rule 83 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    COMMA           reduce using rule 83 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    RPAREN          reduce using rule 83 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)


state 49

    (85) declaration_specifiers -> type_specifier declaration_specifiers .

    SEMICOLON       reduce using rule 85 (declaration_specifiers -> type_specifier declaration_specifiers .)
    MULTIPLY        reduce using rule 85 (declaration_specifiers -> type_specifier declaration_specifiers .)
    ID              reduce using rule 85 (declaration_specifiers -> type_specifier declaration_specifiers .)
    LPAREN          reduce using rule 85 (declaration_specifiers -> type_specifier declaration_specifiers .)
    LSQUAREBRACKET  reduce using rule 85 (declaration_specifiers -> type_specifier declaration_specifiers .)
    COMMA           reduce using rule 85 (declaration_specifiers -> type_specifier declaration_specifiers .)
    RPAREN          reduce using rule 85 (declaration_specifiers -> type_specifier declaration_specifiers .)


state 50

    (87) declaration_specifiers -> type_qualifier declaration_specifiers .

    SEMICOLON       reduce using rule 87 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    MULTIPLY        reduce using rule 87 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    ID              reduce using rule 87 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    LPAREN          reduce using rule 87 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    LSQUAREBRACKET  reduce using rule 87 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    COMMA           reduce using rule 87 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    RPAREN          reduce using rule 87 (declaration_specifiers -> type_qualifier declaration_specifiers .)


state 51

    (135) declarator -> pointer direct_declarator .
    (139) direct_declarator -> direct_declarator . LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (140) direct_declarator -> direct_declarator . LSQUAREBRACKET RSQUAREBRACKET
    (141) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (142) direct_declarator -> direct_declarator . LPAREN identifier_list RPAREN
    (143) direct_declarator -> direct_declarator . LPAREN RPAREN

    LCURLYBRACKET   reduce using rule 135 (declarator -> pointer direct_declarator .)
    TYPEDEF         reduce using rule 135 (declarator -> pointer direct_declarator .)
    EXTERN          reduce using rule 135 (declarator -> pointer direct_declarator .)
    STATIC          reduce using rule 135 (declarator -> pointer direct_declarator .)
    AUTO            reduce using rule 135 (declarator -> pointer direct_declarator .)
    REGISTER        reduce using rule 135 (declarator -> pointer direct_declarator .)
    VOID            reduce using rule 135 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 135 (declarator -> pointer direct_declarator .)
    SHORT           reduce using rule 135 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 135 (declarator -> pointer direct_declarator .)
    LONG            reduce using rule 135 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 135 (declarator -> pointer direct_declarator .)
    DOUBLE          reduce using rule 135 (declarator -> pointer direct_declarator .)
    SIGNED          reduce using rule 135 (declarator -> pointer direct_declarator .)
    UNSIGNED        reduce using rule 135 (declarator -> pointer direct_declarator .)
    TYPE_NAME       reduce using rule 135 (declarator -> pointer direct_declarator .)
    CONST           reduce using rule 135 (declarator -> pointer direct_declarator .)
    VOLATILE        reduce using rule 135 (declarator -> pointer direct_declarator .)
    ENUM            reduce using rule 135 (declarator -> pointer direct_declarator .)
    STRUCT          reduce using rule 135 (declarator -> pointer direct_declarator .)
    UNION           reduce using rule 135 (declarator -> pointer direct_declarator .)
    EQUALS          reduce using rule 135 (declarator -> pointer direct_declarator .)
    SEMICOLON       reduce using rule 135 (declarator -> pointer direct_declarator .)
    COMMA           reduce using rule 135 (declarator -> pointer direct_declarator .)
    RPAREN          reduce using rule 135 (declarator -> pointer direct_declarator .)
    COLON           reduce using rule 135 (declarator -> pointer direct_declarator .)
    LSQUAREBRACKET  shift and go to state 52
    LPAREN          shift and go to state 53


state 52

    (139) direct_declarator -> direct_declarator LSQUAREBRACKET . constant_expression RSQUAREBRACKET
    (140) direct_declarator -> direct_declarator LSQUAREBRACKET . RSQUAREBRACKET
    (79) constant_expression -> . conditional_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN

    RSQUAREBRACKET  shift and go to state 129
    LPAREN          shift and go to state 132
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119

    constant_expression            shift and go to state 128
    conditional_expression         shift and go to state 130
    logical_or_expression          shift and go to state 97
    logical_and_expression         shift and go to state 104
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126
    cast_expression                shift and go to state 102
    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    primary_expression             shift and go to state 105

state 53

    (141) direct_declarator -> direct_declarator LPAREN . parameter_type_list RPAREN
    (142) direct_declarator -> direct_declarator LPAREN . identifier_list RPAREN
    (143) direct_declarator -> direct_declarator LPAREN . RPAREN
    (150) parameter_type_list -> . parameter_list
    (151) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (157) identifier_list -> . ID
    (158) identifier_list -> . identifier_list COMMA ID
    (152) parameter_list -> . parameter_declaration
    (153) parameter_list -> . parameter_list COMMA parameter_declaration
    (154) parameter_declaration -> . declaration_specifiers declarator
    (155) parameter_declaration -> . declaration_specifiers abstract_declarator
    (156) parameter_declaration -> . declaration_specifiers
    (82) declaration_specifiers -> . storage_class_specifier
    (83) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (84) declaration_specifiers -> . type_specifier
    (85) declaration_specifiers -> . type_specifier declaration_specifiers
    (86) declaration_specifiers -> . type_qualifier
    (87) declaration_specifiers -> . type_qualifier declaration_specifiers
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . EXTERN
    (94) storage_class_specifier -> . STATIC
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) type_specifier -> . VOID
    (98) type_specifier -> . CHAR
    (99) type_specifier -> . SHORT
    (100) type_specifier -> . INT
    (101) type_specifier -> . LONG
    (102) type_specifier -> . FLOAT
    (103) type_specifier -> . DOUBLE
    (104) type_specifier -> . SIGNED
    (105) type_specifier -> . UNSIGNED
    (106) type_specifier -> . struct_or_union_specifier
    (107) type_specifier -> . enum_specifier
    (108) type_specifier -> . TYPE_NAME
    (133) type_qualifier -> . CONST
    (134) type_qualifier -> . VOLATILE
    (109) struct_or_union_specifier -> . struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (110) struct_or_union_specifier -> . struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (111) struct_or_union_specifier -> . struct_or_union ID
    (126) enum_specifier -> . ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET
    (127) enum_specifier -> . ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET
    (128) enum_specifier -> . ENUM ID
    (112) struct_or_union -> . STRUCT
    (113) struct_or_union -> . UNION

    RPAREN          shift and go to state 135
    ID              shift and go to state 138
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    TYPE_NAME       shift and go to state 28
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    parameter_type_list            shift and go to state 134
    identifier_list                shift and go to state 136
    parameter_list                 shift and go to state 137
    parameter_declaration          shift and go to state 139
    declaration_specifiers         shift and go to state 140
    storage_class_specifier        shift and go to state 7
    type_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 9
    struct_or_union_specifier      shift and go to state 26
    enum_specifier                 shift and go to state 27
    struct_or_union                shift and go to state 34

state 54

    (145) pointer -> MULTIPLY type_qualifier_list .
    (147) pointer -> MULTIPLY type_qualifier_list . pointer
    (149) type_qualifier_list -> type_qualifier_list . type_qualifier
    (144) pointer -> . MULTIPLY
    (145) pointer -> . MULTIPLY type_qualifier_list
    (146) pointer -> . MULTIPLY pointer
    (147) pointer -> . MULTIPLY type_qualifier_list pointer
    (133) type_qualifier -> . CONST
    (134) type_qualifier -> . VOLATILE

    ID              reduce using rule 145 (pointer -> MULTIPLY type_qualifier_list .)
    LPAREN          reduce using rule 145 (pointer -> MULTIPLY type_qualifier_list .)
    LSQUAREBRACKET  reduce using rule 145 (pointer -> MULTIPLY type_qualifier_list .)
    COMMA           reduce using rule 145 (pointer -> MULTIPLY type_qualifier_list .)
    RPAREN          reduce using rule 145 (pointer -> MULTIPLY type_qualifier_list .)
    MULTIPLY        shift and go to state 31
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30

    pointer                        shift and go to state 141
    type_qualifier                 shift and go to state 142

state 55

    (146) pointer -> MULTIPLY pointer .

    ID              reduce using rule 146 (pointer -> MULTIPLY pointer .)
    LPAREN          reduce using rule 146 (pointer -> MULTIPLY pointer .)
    LSQUAREBRACKET  reduce using rule 146 (pointer -> MULTIPLY pointer .)
    COMMA           reduce using rule 146 (pointer -> MULTIPLY pointer .)
    RPAREN          reduce using rule 146 (pointer -> MULTIPLY pointer .)


state 56

    (148) type_qualifier_list -> type_qualifier .

    MULTIPLY        reduce using rule 148 (type_qualifier_list -> type_qualifier .)
    CONST           reduce using rule 148 (type_qualifier_list -> type_qualifier .)
    VOLATILE        reduce using rule 148 (type_qualifier_list -> type_qualifier .)
    ID              reduce using rule 148 (type_qualifier_list -> type_qualifier .)
    LPAREN          reduce using rule 148 (type_qualifier_list -> type_qualifier .)
    LSQUAREBRACKET  reduce using rule 148 (type_qualifier_list -> type_qualifier .)
    COMMA           reduce using rule 148 (type_qualifier_list -> type_qualifier .)
    RPAREN          reduce using rule 148 (type_qualifier_list -> type_qualifier .)


state 57

    (138) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 143


state 58

    (109) struct_or_union_specifier -> struct_or_union ID . LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (111) struct_or_union_specifier -> struct_or_union ID .

    LCURLYBRACKET   shift and go to state 144
    TYPEDEF         reduce using rule 111 (struct_or_union_specifier -> struct_or_union ID .)
    EXTERN          reduce using rule 111 (struct_or_union_specifier -> struct_or_union ID .)
    STATIC          reduce using rule 111 (struct_or_union_specifier -> struct_or_union ID .)
    AUTO            reduce using rule 111 (struct_or_union_specifier -> struct_or_union ID .)
    REGISTER        reduce using rule 111 (struct_or_union_specifier -> struct_or_union ID .)
    VOID            reduce using rule 111 (struct_or_union_specifier -> struct_or_union ID .)
    CHAR            reduce using rule 111 (struct_or_union_specifier -> struct_or_union ID .)
    SHORT           reduce using rule 111 (struct_or_union_specifier -> struct_or_union ID .)
    INT             reduce using rule 111 (struct_or_union_specifier -> struct_or_union ID .)
    LONG            reduce using rule 111 (struct_or_union_specifier -> struct_or_union ID .)
    FLOAT           reduce using rule 111 (struct_or_union_specifier -> struct_or_union ID .)
    DOUBLE          reduce using rule 111 (struct_or_union_specifier -> struct_or_union ID .)
    SIGNED          reduce using rule 111 (struct_or_union_specifier -> struct_or_union ID .)
    UNSIGNED        reduce using rule 111 (struct_or_union_specifier -> struct_or_union ID .)
    TYPE_NAME       reduce using rule 111 (struct_or_union_specifier -> struct_or_union ID .)
    CONST           reduce using rule 111 (struct_or_union_specifier -> struct_or_union ID .)
    VOLATILE        reduce using rule 111 (struct_or_union_specifier -> struct_or_union ID .)
    ENUM            reduce using rule 111 (struct_or_union_specifier -> struct_or_union ID .)
    STRUCT          reduce using rule 111 (struct_or_union_specifier -> struct_or_union ID .)
    UNION           reduce using rule 111 (struct_or_union_specifier -> struct_or_union ID .)
    SEMICOLON       reduce using rule 111 (struct_or_union_specifier -> struct_or_union ID .)
    MULTIPLY        reduce using rule 111 (struct_or_union_specifier -> struct_or_union ID .)
    ID              reduce using rule 111 (struct_or_union_specifier -> struct_or_union ID .)
    LPAREN          reduce using rule 111 (struct_or_union_specifier -> struct_or_union ID .)
    LSQUAREBRACKET  reduce using rule 111 (struct_or_union_specifier -> struct_or_union ID .)
    COMMA           reduce using rule 111 (struct_or_union_specifier -> struct_or_union ID .)
    RPAREN          reduce using rule 111 (struct_or_union_specifier -> struct_or_union ID .)
    COLON           reduce using rule 111 (struct_or_union_specifier -> struct_or_union ID .)


state 59

    (110) struct_or_union_specifier -> struct_or_union LCURLYBRACKET . struct_declaration_list RCURLYBRACKET
    (114) struct_declaration_list -> . struct_declaration
    (115) struct_declaration_list -> . struct_declaration_list struct_declaration
    (116) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMICOLON
    (117) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (118) specifier_qualifier_list -> . type_specifier
    (119) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (120) specifier_qualifier_list -> . type_qualifier
    (97) type_specifier -> . VOID
    (98) type_specifier -> . CHAR
    (99) type_specifier -> . SHORT
    (100) type_specifier -> . INT
    (101) type_specifier -> . LONG
    (102) type_specifier -> . FLOAT
    (103) type_specifier -> . DOUBLE
    (104) type_specifier -> . SIGNED
    (105) type_specifier -> . UNSIGNED
    (106) type_specifier -> . struct_or_union_specifier
    (107) type_specifier -> . enum_specifier
    (108) type_specifier -> . TYPE_NAME
    (133) type_qualifier -> . CONST
    (134) type_qualifier -> . VOLATILE
    (109) struct_or_union_specifier -> . struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (110) struct_or_union_specifier -> . struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (111) struct_or_union_specifier -> . struct_or_union ID
    (126) enum_specifier -> . ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET
    (127) enum_specifier -> . ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET
    (128) enum_specifier -> . ENUM ID
    (112) struct_or_union -> . STRUCT
    (113) struct_or_union -> . UNION

    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    TYPE_NAME       shift and go to state 28
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    struct_or_union                shift and go to state 34
    struct_declaration_list        shift and go to state 145
    struct_declaration             shift and go to state 146
    specifier_qualifier_list       shift and go to state 147
    type_specifier                 shift and go to state 148
    type_qualifier                 shift and go to state 149
    struct_or_union_specifier      shift and go to state 26
    enum_specifier                 shift and go to state 27

state 60

    (126) enum_specifier -> ENUM LCURLYBRACKET . enumerator_list RCURLYBRACKET
    (129) enumerator_list -> . enumerator
    (130) enumerator_list -> . enumerator_list COMMA enumerator
    (131) enumerator -> . ID
    (132) enumerator -> . ID EQUALS constant_expression

    ID              shift and go to state 152

    enumerator_list                shift and go to state 150
    enumerator                     shift and go to state 151

state 61

    (127) enum_specifier -> ENUM ID . LCURLYBRACKET enumerator_list RCURLYBRACKET
    (128) enum_specifier -> ENUM ID .

    LCURLYBRACKET   shift and go to state 153
    TYPEDEF         reduce using rule 128 (enum_specifier -> ENUM ID .)
    EXTERN          reduce using rule 128 (enum_specifier -> ENUM ID .)
    STATIC          reduce using rule 128 (enum_specifier -> ENUM ID .)
    AUTO            reduce using rule 128 (enum_specifier -> ENUM ID .)
    REGISTER        reduce using rule 128 (enum_specifier -> ENUM ID .)
    VOID            reduce using rule 128 (enum_specifier -> ENUM ID .)
    CHAR            reduce using rule 128 (enum_specifier -> ENUM ID .)
    SHORT           reduce using rule 128 (enum_specifier -> ENUM ID .)
    INT             reduce using rule 128 (enum_specifier -> ENUM ID .)
    LONG            reduce using rule 128 (enum_specifier -> ENUM ID .)
    FLOAT           reduce using rule 128 (enum_specifier -> ENUM ID .)
    DOUBLE          reduce using rule 128 (enum_specifier -> ENUM ID .)
    SIGNED          reduce using rule 128 (enum_specifier -> ENUM ID .)
    UNSIGNED        reduce using rule 128 (enum_specifier -> ENUM ID .)
    TYPE_NAME       reduce using rule 128 (enum_specifier -> ENUM ID .)
    CONST           reduce using rule 128 (enum_specifier -> ENUM ID .)
    VOLATILE        reduce using rule 128 (enum_specifier -> ENUM ID .)
    ENUM            reduce using rule 128 (enum_specifier -> ENUM ID .)
    STRUCT          reduce using rule 128 (enum_specifier -> ENUM ID .)
    UNION           reduce using rule 128 (enum_specifier -> ENUM ID .)
    SEMICOLON       reduce using rule 128 (enum_specifier -> ENUM ID .)
    MULTIPLY        reduce using rule 128 (enum_specifier -> ENUM ID .)
    ID              reduce using rule 128 (enum_specifier -> ENUM ID .)
    LPAREN          reduce using rule 128 (enum_specifier -> ENUM ID .)
    LSQUAREBRACKET  reduce using rule 128 (enum_specifier -> ENUM ID .)
    COMMA           reduce using rule 128 (enum_specifier -> ENUM ID .)
    RPAREN          reduce using rule 128 (enum_specifier -> ENUM ID .)
    COLON           reduce using rule 128 (enum_specifier -> ENUM ID .)


state 62

    (212) function_definition -> declaration_specifiers declarator declaration_list . compound_statement
    (191) declaration_list -> declaration_list . declaration
    (186) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (187) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (188) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (189) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (80) declaration -> . declaration_specifiers SEMICOLON
    (81) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (82) declaration_specifiers -> . storage_class_specifier
    (83) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (84) declaration_specifiers -> . type_specifier
    (85) declaration_specifiers -> . type_specifier declaration_specifiers
    (86) declaration_specifiers -> . type_qualifier
    (87) declaration_specifiers -> . type_qualifier declaration_specifiers
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . EXTERN
    (94) storage_class_specifier -> . STATIC
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) type_specifier -> . VOID
    (98) type_specifier -> . CHAR
    (99) type_specifier -> . SHORT
    (100) type_specifier -> . INT
    (101) type_specifier -> . LONG
    (102) type_specifier -> . FLOAT
    (103) type_specifier -> . DOUBLE
    (104) type_specifier -> . SIGNED
    (105) type_specifier -> . UNSIGNED
    (106) type_specifier -> . struct_or_union_specifier
    (107) type_specifier -> . enum_specifier
    (108) type_specifier -> . TYPE_NAME
    (133) type_qualifier -> . CONST
    (134) type_qualifier -> . VOLATILE
    (109) struct_or_union_specifier -> . struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (110) struct_or_union_specifier -> . struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (111) struct_or_union_specifier -> . struct_or_union ID
    (126) enum_specifier -> . ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET
    (127) enum_specifier -> . ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET
    (128) enum_specifier -> . ENUM ID
    (112) struct_or_union -> . STRUCT
    (113) struct_or_union -> . UNION

    LCURLYBRACKET   shift and go to state 46
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    TYPE_NAME       shift and go to state 28
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    declaration_specifiers         shift and go to state 47
    compound_statement             shift and go to state 154
    declaration                    shift and go to state 68
    storage_class_specifier        shift and go to state 7
    type_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 9
    struct_or_union_specifier      shift and go to state 26
    enum_specifier                 shift and go to state 27
    struct_or_union                shift and go to state 34

state 63

    (213) function_definition -> declaration_specifiers declarator compound_statement .

    TYPEDEF         reduce using rule 213 (function_definition -> declaration_specifiers declarator compound_statement .)
    EXTERN          reduce using rule 213 (function_definition -> declaration_specifiers declarator compound_statement .)
    STATIC          reduce using rule 213 (function_definition -> declaration_specifiers declarator compound_statement .)
    AUTO            reduce using rule 213 (function_definition -> declaration_specifiers declarator compound_statement .)
    REGISTER        reduce using rule 213 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOID            reduce using rule 213 (function_definition -> declaration_specifiers declarator compound_statement .)
    CHAR            reduce using rule 213 (function_definition -> declaration_specifiers declarator compound_statement .)
    SHORT           reduce using rule 213 (function_definition -> declaration_specifiers declarator compound_statement .)
    INT             reduce using rule 213 (function_definition -> declaration_specifiers declarator compound_statement .)
    LONG            reduce using rule 213 (function_definition -> declaration_specifiers declarator compound_statement .)
    FLOAT           reduce using rule 213 (function_definition -> declaration_specifiers declarator compound_statement .)
    DOUBLE          reduce using rule 213 (function_definition -> declaration_specifiers declarator compound_statement .)
    SIGNED          reduce using rule 213 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNSIGNED        reduce using rule 213 (function_definition -> declaration_specifiers declarator compound_statement .)
    TYPE_NAME       reduce using rule 213 (function_definition -> declaration_specifiers declarator compound_statement .)
    CONST           reduce using rule 213 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOLATILE        reduce using rule 213 (function_definition -> declaration_specifiers declarator compound_statement .)
    MULTIPLY        reduce using rule 213 (function_definition -> declaration_specifiers declarator compound_statement .)
    ID              reduce using rule 213 (function_definition -> declaration_specifiers declarator compound_statement .)
    LPAREN          reduce using rule 213 (function_definition -> declaration_specifiers declarator compound_statement .)
    ENUM            reduce using rule 213 (function_definition -> declaration_specifiers declarator compound_statement .)
    STRUCT          reduce using rule 213 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNION           reduce using rule 213 (function_definition -> declaration_specifiers declarator compound_statement .)
    $end            reduce using rule 213 (function_definition -> declaration_specifiers declarator compound_statement .)


state 64

    (91) init_declarator -> declarator EQUALS . initializer
    (172) initializer -> . assignment_expression
    (173) initializer -> . LCURLYBRACKET initializer_list RCURLYBRACKET
    (174) initializer -> . LCURLYBRACKET initializer_list COMMA RCURLYBRACKET
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LCURLYBRACKET   shift and go to state 157
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    initializer                    shift and go to state 155
    assignment_expression          shift and go to state 156
    conditional_expression         shift and go to state 95
    unary_expression               shift and go to state 96
    logical_or_expression          shift and go to state 97
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 65

    (81) declaration -> declaration_specifiers init_declarator_list SEMICOLON .

    TYPEDEF         reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    EXTERN          reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    STATIC          reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    AUTO            reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    REGISTER        reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    VOID            reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CHAR            reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SHORT           reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    INT             reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    LONG            reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SIGNED          reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    TYPE_NAME       reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CONST           reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    VOLATILE        reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    MULTIPLY        reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    ID              reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    LPAREN          reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    ENUM            reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    UNION           reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    $end            reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    LCURLYBRACKET   reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    RCURLYBRACKET   reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CASE            reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    DEFAULT         reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SEMICOLON       reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    IF              reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SWITCH          reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    WHILE           reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    DO              reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    FOR             reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    GOTO            reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CONTINUE        reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    BREAK           reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    RETURN          reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    INCREMENT       reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    DECREMENT       reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SIZEOF          reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    AND             reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    PLUS            reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    MINUS           reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    NOT             reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    LNOT            reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CHAR_CONST      reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    INT_CONST       reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    FLOAT_CONST     reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    OCTAL_CONST     reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    HEX_CONST       reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    BIN_CONST       reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    STRING_LITERAL  reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)


state 66

    (89) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (90) init_declarator -> . declarator
    (91) init_declarator -> . declarator EQUALS initializer
    (135) declarator -> . pointer direct_declarator
    (136) declarator -> . direct_declarator
    (144) pointer -> . MULTIPLY
    (145) pointer -> . MULTIPLY type_qualifier_list
    (146) pointer -> . MULTIPLY pointer
    (147) pointer -> . MULTIPLY type_qualifier_list pointer
    (137) direct_declarator -> . ID
    (138) direct_declarator -> . LPAREN declarator RPAREN
    (139) direct_declarator -> . direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (140) direct_declarator -> . direct_declarator LSQUAREBRACKET RSQUAREBRACKET
    (141) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (142) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (143) direct_declarator -> . direct_declarator LPAREN RPAREN

    MULTIPLY        shift and go to state 31
    ID              shift and go to state 32
    LPAREN          shift and go to state 33

    init_declarator                shift and go to state 158
    declarator                     shift and go to state 127
    pointer                        shift and go to state 10
    direct_declarator              shift and go to state 11

state 67

    (214) function_definition -> declarator declaration_list compound_statement .

    TYPEDEF         reduce using rule 214 (function_definition -> declarator declaration_list compound_statement .)
    EXTERN          reduce using rule 214 (function_definition -> declarator declaration_list compound_statement .)
    STATIC          reduce using rule 214 (function_definition -> declarator declaration_list compound_statement .)
    AUTO            reduce using rule 214 (function_definition -> declarator declaration_list compound_statement .)
    REGISTER        reduce using rule 214 (function_definition -> declarator declaration_list compound_statement .)
    VOID            reduce using rule 214 (function_definition -> declarator declaration_list compound_statement .)
    CHAR            reduce using rule 214 (function_definition -> declarator declaration_list compound_statement .)
    SHORT           reduce using rule 214 (function_definition -> declarator declaration_list compound_statement .)
    INT             reduce using rule 214 (function_definition -> declarator declaration_list compound_statement .)
    LONG            reduce using rule 214 (function_definition -> declarator declaration_list compound_statement .)
    FLOAT           reduce using rule 214 (function_definition -> declarator declaration_list compound_statement .)
    DOUBLE          reduce using rule 214 (function_definition -> declarator declaration_list compound_statement .)
    SIGNED          reduce using rule 214 (function_definition -> declarator declaration_list compound_statement .)
    UNSIGNED        reduce using rule 214 (function_definition -> declarator declaration_list compound_statement .)
    TYPE_NAME       reduce using rule 214 (function_definition -> declarator declaration_list compound_statement .)
    CONST           reduce using rule 214 (function_definition -> declarator declaration_list compound_statement .)
    VOLATILE        reduce using rule 214 (function_definition -> declarator declaration_list compound_statement .)
    MULTIPLY        reduce using rule 214 (function_definition -> declarator declaration_list compound_statement .)
    ID              reduce using rule 214 (function_definition -> declarator declaration_list compound_statement .)
    LPAREN          reduce using rule 214 (function_definition -> declarator declaration_list compound_statement .)
    ENUM            reduce using rule 214 (function_definition -> declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 214 (function_definition -> declarator declaration_list compound_statement .)
    UNION           reduce using rule 214 (function_definition -> declarator declaration_list compound_statement .)
    $end            reduce using rule 214 (function_definition -> declarator declaration_list compound_statement .)


state 68

    (191) declaration_list -> declaration_list declaration .

    LCURLYBRACKET   reduce using rule 191 (declaration_list -> declaration_list declaration .)
    TYPEDEF         reduce using rule 191 (declaration_list -> declaration_list declaration .)
    EXTERN          reduce using rule 191 (declaration_list -> declaration_list declaration .)
    STATIC          reduce using rule 191 (declaration_list -> declaration_list declaration .)
    AUTO            reduce using rule 191 (declaration_list -> declaration_list declaration .)
    REGISTER        reduce using rule 191 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 191 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 191 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 191 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 191 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 191 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 191 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 191 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 191 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 191 (declaration_list -> declaration_list declaration .)
    TYPE_NAME       reduce using rule 191 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 191 (declaration_list -> declaration_list declaration .)
    VOLATILE        reduce using rule 191 (declaration_list -> declaration_list declaration .)
    ENUM            reduce using rule 191 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 191 (declaration_list -> declaration_list declaration .)
    UNION           reduce using rule 191 (declaration_list -> declaration_list declaration .)
    RCURLYBRACKET   reduce using rule 191 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 191 (declaration_list -> declaration_list declaration .)
    CASE            reduce using rule 191 (declaration_list -> declaration_list declaration .)
    DEFAULT         reduce using rule 191 (declaration_list -> declaration_list declaration .)
    SEMICOLON       reduce using rule 191 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 191 (declaration_list -> declaration_list declaration .)
    SWITCH          reduce using rule 191 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 191 (declaration_list -> declaration_list declaration .)
    DO              reduce using rule 191 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 191 (declaration_list -> declaration_list declaration .)
    GOTO            reduce using rule 191 (declaration_list -> declaration_list declaration .)
    CONTINUE        reduce using rule 191 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 191 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 191 (declaration_list -> declaration_list declaration .)
    INCREMENT       reduce using rule 191 (declaration_list -> declaration_list declaration .)
    DECREMENT       reduce using rule 191 (declaration_list -> declaration_list declaration .)
    SIZEOF          reduce using rule 191 (declaration_list -> declaration_list declaration .)
    AND             reduce using rule 191 (declaration_list -> declaration_list declaration .)
    MULTIPLY        reduce using rule 191 (declaration_list -> declaration_list declaration .)
    PLUS            reduce using rule 191 (declaration_list -> declaration_list declaration .)
    MINUS           reduce using rule 191 (declaration_list -> declaration_list declaration .)
    NOT             reduce using rule 191 (declaration_list -> declaration_list declaration .)
    LNOT            reduce using rule 191 (declaration_list -> declaration_list declaration .)
    CHAR_CONST      reduce using rule 191 (declaration_list -> declaration_list declaration .)
    INT_CONST       reduce using rule 191 (declaration_list -> declaration_list declaration .)
    FLOAT_CONST     reduce using rule 191 (declaration_list -> declaration_list declaration .)
    OCTAL_CONST     reduce using rule 191 (declaration_list -> declaration_list declaration .)
    HEX_CONST       reduce using rule 191 (declaration_list -> declaration_list declaration .)
    BIN_CONST       reduce using rule 191 (declaration_list -> declaration_list declaration .)
    STRING_LITERAL  reduce using rule 191 (declaration_list -> declaration_list declaration .)
    LPAREN          reduce using rule 191 (declaration_list -> declaration_list declaration .)


state 69

    (186) compound_statement -> LCURLYBRACKET RCURLYBRACKET .

    TYPEDEF         reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    EXTERN          reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    STATIC          reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    AUTO            reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    REGISTER        reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    VOID            reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    CHAR            reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    SHORT           reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    INT             reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    LONG            reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    FLOAT           reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    DOUBLE          reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    SIGNED          reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    UNSIGNED        reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    TYPE_NAME       reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    CONST           reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    VOLATILE        reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    MULTIPLY        reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    ID              reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    LPAREN          reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    ENUM            reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    STRUCT          reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    UNION           reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    $end            reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    RCURLYBRACKET   reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    CASE            reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    DEFAULT         reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    LCURLYBRACKET   reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    SEMICOLON       reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    IF              reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    SWITCH          reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    WHILE           reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    DO              reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    FOR             reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    GOTO            reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    CONTINUE        reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    BREAK           reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    RETURN          reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    INCREMENT       reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    DECREMENT       reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    SIZEOF          reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    AND             reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    PLUS            reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    MINUS           reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    NOT             reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    LNOT            reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    CHAR_CONST      reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    INT_CONST       reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    FLOAT_CONST     reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    OCTAL_CONST     reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    HEX_CONST       reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    BIN_CONST       reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    STRING_LITERAL  reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)
    ELSE            reduce using rule 186 (compound_statement -> LCURLYBRACKET RCURLYBRACKET .)


state 70

    (187) compound_statement -> LCURLYBRACKET statement_list . RCURLYBRACKET
    (193) statement_list -> statement_list . statement
    (177) statement -> . labeled_statement
    (178) statement -> . compound_statement
    (179) statement -> . expression_statement
    (180) statement -> . selection_statement
    (181) statement -> . iteration_statement
    (182) statement -> . jump_statement
    (183) labeled_statement -> . ID COLON statement
    (184) labeled_statement -> . CASE constant_expression COLON statement
    (185) labeled_statement -> . DEFAULT COLON statement
    (186) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (187) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (188) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (189) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (194) expression_statement -> . SEMICOLON
    (195) expression_statement -> . expression SEMICOLON
    (196) selection_statement -> . IF LPAREN expression RPAREN statement
    (197) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (198) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (199) iteration_statement -> . WHILE LPAREN expression RPAREN
    (200) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (201) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (202) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (203) jump_statement -> . GOTO ID SEMICOLON
    (204) jump_statement -> . CONTINUE SEMICOLON
    (205) jump_statement -> . BREAK SEMICOLON
    (206) jump_statement -> . RETURN SEMICOLON
    (207) jump_statement -> . RETURN expression SEMICOLON
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCURLYBRACKET   shift and go to state 159
    ID              shift and go to state 80
    CASE            shift and go to state 81
    DEFAULT         shift and go to state 82
    LCURLYBRACKET   shift and go to state 46
    SEMICOLON       shift and go to state 79
    IF              shift and go to state 84
    SWITCH          shift and go to state 86
    WHILE           shift and go to state 87
    DO              shift and go to state 88
    FOR             shift and go to state 89
    GOTO            shift and go to state 90
    CONTINUE        shift and go to state 91
    BREAK           shift and go to state 92
    RETURN          shift and go to state 93
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    statement                      shift and go to state 160
    labeled_statement              shift and go to state 73
    compound_statement             shift and go to state 74
    expression_statement           shift and go to state 75
    selection_statement            shift and go to state 76
    iteration_statement            shift and go to state 77
    jump_statement                 shift and go to state 78
    expression                     shift and go to state 83
    assignment_expression          shift and go to state 94
    conditional_expression         shift and go to state 95
    unary_expression               shift and go to state 96
    logical_or_expression          shift and go to state 97
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 71

    (188) compound_statement -> LCURLYBRACKET declaration_list . RCURLYBRACKET
    (189) compound_statement -> LCURLYBRACKET declaration_list . statement_list RCURLYBRACKET
    (191) declaration_list -> declaration_list . declaration
    (192) statement_list -> . statement
    (193) statement_list -> . statement_list statement
    (80) declaration -> . declaration_specifiers SEMICOLON
    (81) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (177) statement -> . labeled_statement
    (178) statement -> . compound_statement
    (179) statement -> . expression_statement
    (180) statement -> . selection_statement
    (181) statement -> . iteration_statement
    (182) statement -> . jump_statement
    (82) declaration_specifiers -> . storage_class_specifier
    (83) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (84) declaration_specifiers -> . type_specifier
    (85) declaration_specifiers -> . type_specifier declaration_specifiers
    (86) declaration_specifiers -> . type_qualifier
    (87) declaration_specifiers -> . type_qualifier declaration_specifiers
    (183) labeled_statement -> . ID COLON statement
    (184) labeled_statement -> . CASE constant_expression COLON statement
    (185) labeled_statement -> . DEFAULT COLON statement
    (186) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (187) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (188) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (189) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (194) expression_statement -> . SEMICOLON
    (195) expression_statement -> . expression SEMICOLON
    (196) selection_statement -> . IF LPAREN expression RPAREN statement
    (197) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (198) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (199) iteration_statement -> . WHILE LPAREN expression RPAREN
    (200) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (201) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (202) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (203) jump_statement -> . GOTO ID SEMICOLON
    (204) jump_statement -> . CONTINUE SEMICOLON
    (205) jump_statement -> . BREAK SEMICOLON
    (206) jump_statement -> . RETURN SEMICOLON
    (207) jump_statement -> . RETURN expression SEMICOLON
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . EXTERN
    (94) storage_class_specifier -> . STATIC
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) type_specifier -> . VOID
    (98) type_specifier -> . CHAR
    (99) type_specifier -> . SHORT
    (100) type_specifier -> . INT
    (101) type_specifier -> . LONG
    (102) type_specifier -> . FLOAT
    (103) type_specifier -> . DOUBLE
    (104) type_specifier -> . SIGNED
    (105) type_specifier -> . UNSIGNED
    (106) type_specifier -> . struct_or_union_specifier
    (107) type_specifier -> . enum_specifier
    (108) type_specifier -> . TYPE_NAME
    (133) type_qualifier -> . CONST
    (134) type_qualifier -> . VOLATILE
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (109) struct_or_union_specifier -> . struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (110) struct_or_union_specifier -> . struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (111) struct_or_union_specifier -> . struct_or_union ID
    (126) enum_specifier -> . ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET
    (127) enum_specifier -> . ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET
    (128) enum_specifier -> . ENUM ID
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (112) struct_or_union -> . STRUCT
    (113) struct_or_union -> . UNION
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCURLYBRACKET   shift and go to state 161
    ID              shift and go to state 80
    CASE            shift and go to state 81
    DEFAULT         shift and go to state 82
    LCURLYBRACKET   shift and go to state 46
    SEMICOLON       shift and go to state 79
    IF              shift and go to state 84
    SWITCH          shift and go to state 86
    WHILE           shift and go to state 87
    DO              shift and go to state 88
    FOR             shift and go to state 89
    GOTO            shift and go to state 90
    CONTINUE        shift and go to state 91
    BREAK           shift and go to state 92
    RETURN          shift and go to state 93
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    TYPE_NAME       shift and go to state 28
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    statement_list                 shift and go to state 162
    declaration                    shift and go to state 68
    statement                      shift and go to state 72
    declaration_specifiers         shift and go to state 47
    labeled_statement              shift and go to state 73
    compound_statement             shift and go to state 74
    expression_statement           shift and go to state 75
    selection_statement            shift and go to state 76
    iteration_statement            shift and go to state 77
    jump_statement                 shift and go to state 78
    storage_class_specifier        shift and go to state 7
    type_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 9
    expression                     shift and go to state 83
    struct_or_union_specifier      shift and go to state 26
    enum_specifier                 shift and go to state 27
    assignment_expression          shift and go to state 94
    struct_or_union                shift and go to state 34
    conditional_expression         shift and go to state 95
    unary_expression               shift and go to state 96
    logical_or_expression          shift and go to state 97
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 72

    (192) statement_list -> statement .

    RCURLYBRACKET   reduce using rule 192 (statement_list -> statement .)
    ID              reduce using rule 192 (statement_list -> statement .)
    CASE            reduce using rule 192 (statement_list -> statement .)
    DEFAULT         reduce using rule 192 (statement_list -> statement .)
    LCURLYBRACKET   reduce using rule 192 (statement_list -> statement .)
    SEMICOLON       reduce using rule 192 (statement_list -> statement .)
    IF              reduce using rule 192 (statement_list -> statement .)
    SWITCH          reduce using rule 192 (statement_list -> statement .)
    WHILE           reduce using rule 192 (statement_list -> statement .)
    DO              reduce using rule 192 (statement_list -> statement .)
    FOR             reduce using rule 192 (statement_list -> statement .)
    GOTO            reduce using rule 192 (statement_list -> statement .)
    CONTINUE        reduce using rule 192 (statement_list -> statement .)
    BREAK           reduce using rule 192 (statement_list -> statement .)
    RETURN          reduce using rule 192 (statement_list -> statement .)
    INCREMENT       reduce using rule 192 (statement_list -> statement .)
    DECREMENT       reduce using rule 192 (statement_list -> statement .)
    SIZEOF          reduce using rule 192 (statement_list -> statement .)
    AND             reduce using rule 192 (statement_list -> statement .)
    MULTIPLY        reduce using rule 192 (statement_list -> statement .)
    PLUS            reduce using rule 192 (statement_list -> statement .)
    MINUS           reduce using rule 192 (statement_list -> statement .)
    NOT             reduce using rule 192 (statement_list -> statement .)
    LNOT            reduce using rule 192 (statement_list -> statement .)
    CHAR_CONST      reduce using rule 192 (statement_list -> statement .)
    INT_CONST       reduce using rule 192 (statement_list -> statement .)
    FLOAT_CONST     reduce using rule 192 (statement_list -> statement .)
    OCTAL_CONST     reduce using rule 192 (statement_list -> statement .)
    HEX_CONST       reduce using rule 192 (statement_list -> statement .)
    BIN_CONST       reduce using rule 192 (statement_list -> statement .)
    STRING_LITERAL  reduce using rule 192 (statement_list -> statement .)
    LPAREN          reduce using rule 192 (statement_list -> statement .)


state 73

    (177) statement -> labeled_statement .

    RCURLYBRACKET   reduce using rule 177 (statement -> labeled_statement .)
    ID              reduce using rule 177 (statement -> labeled_statement .)
    CASE            reduce using rule 177 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 177 (statement -> labeled_statement .)
    LCURLYBRACKET   reduce using rule 177 (statement -> labeled_statement .)
    SEMICOLON       reduce using rule 177 (statement -> labeled_statement .)
    IF              reduce using rule 177 (statement -> labeled_statement .)
    SWITCH          reduce using rule 177 (statement -> labeled_statement .)
    WHILE           reduce using rule 177 (statement -> labeled_statement .)
    DO              reduce using rule 177 (statement -> labeled_statement .)
    FOR             reduce using rule 177 (statement -> labeled_statement .)
    GOTO            reduce using rule 177 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 177 (statement -> labeled_statement .)
    BREAK           reduce using rule 177 (statement -> labeled_statement .)
    RETURN          reduce using rule 177 (statement -> labeled_statement .)
    INCREMENT       reduce using rule 177 (statement -> labeled_statement .)
    DECREMENT       reduce using rule 177 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 177 (statement -> labeled_statement .)
    AND             reduce using rule 177 (statement -> labeled_statement .)
    MULTIPLY        reduce using rule 177 (statement -> labeled_statement .)
    PLUS            reduce using rule 177 (statement -> labeled_statement .)
    MINUS           reduce using rule 177 (statement -> labeled_statement .)
    NOT             reduce using rule 177 (statement -> labeled_statement .)
    LNOT            reduce using rule 177 (statement -> labeled_statement .)
    CHAR_CONST      reduce using rule 177 (statement -> labeled_statement .)
    INT_CONST       reduce using rule 177 (statement -> labeled_statement .)
    FLOAT_CONST     reduce using rule 177 (statement -> labeled_statement .)
    OCTAL_CONST     reduce using rule 177 (statement -> labeled_statement .)
    HEX_CONST       reduce using rule 177 (statement -> labeled_statement .)
    BIN_CONST       reduce using rule 177 (statement -> labeled_statement .)
    STRING_LITERAL  reduce using rule 177 (statement -> labeled_statement .)
    LPAREN          reduce using rule 177 (statement -> labeled_statement .)
    ELSE            reduce using rule 177 (statement -> labeled_statement .)


state 74

    (178) statement -> compound_statement .

    RCURLYBRACKET   reduce using rule 178 (statement -> compound_statement .)
    ID              reduce using rule 178 (statement -> compound_statement .)
    CASE            reduce using rule 178 (statement -> compound_statement .)
    DEFAULT         reduce using rule 178 (statement -> compound_statement .)
    LCURLYBRACKET   reduce using rule 178 (statement -> compound_statement .)
    SEMICOLON       reduce using rule 178 (statement -> compound_statement .)
    IF              reduce using rule 178 (statement -> compound_statement .)
    SWITCH          reduce using rule 178 (statement -> compound_statement .)
    WHILE           reduce using rule 178 (statement -> compound_statement .)
    DO              reduce using rule 178 (statement -> compound_statement .)
    FOR             reduce using rule 178 (statement -> compound_statement .)
    GOTO            reduce using rule 178 (statement -> compound_statement .)
    CONTINUE        reduce using rule 178 (statement -> compound_statement .)
    BREAK           reduce using rule 178 (statement -> compound_statement .)
    RETURN          reduce using rule 178 (statement -> compound_statement .)
    INCREMENT       reduce using rule 178 (statement -> compound_statement .)
    DECREMENT       reduce using rule 178 (statement -> compound_statement .)
    SIZEOF          reduce using rule 178 (statement -> compound_statement .)
    AND             reduce using rule 178 (statement -> compound_statement .)
    MULTIPLY        reduce using rule 178 (statement -> compound_statement .)
    PLUS            reduce using rule 178 (statement -> compound_statement .)
    MINUS           reduce using rule 178 (statement -> compound_statement .)
    NOT             reduce using rule 178 (statement -> compound_statement .)
    LNOT            reduce using rule 178 (statement -> compound_statement .)
    CHAR_CONST      reduce using rule 178 (statement -> compound_statement .)
    INT_CONST       reduce using rule 178 (statement -> compound_statement .)
    FLOAT_CONST     reduce using rule 178 (statement -> compound_statement .)
    OCTAL_CONST     reduce using rule 178 (statement -> compound_statement .)
    HEX_CONST       reduce using rule 178 (statement -> compound_statement .)
    BIN_CONST       reduce using rule 178 (statement -> compound_statement .)
    STRING_LITERAL  reduce using rule 178 (statement -> compound_statement .)
    LPAREN          reduce using rule 178 (statement -> compound_statement .)
    ELSE            reduce using rule 178 (statement -> compound_statement .)


state 75

    (179) statement -> expression_statement .

    RCURLYBRACKET   reduce using rule 179 (statement -> expression_statement .)
    ID              reduce using rule 179 (statement -> expression_statement .)
    CASE            reduce using rule 179 (statement -> expression_statement .)
    DEFAULT         reduce using rule 179 (statement -> expression_statement .)
    LCURLYBRACKET   reduce using rule 179 (statement -> expression_statement .)
    SEMICOLON       reduce using rule 179 (statement -> expression_statement .)
    IF              reduce using rule 179 (statement -> expression_statement .)
    SWITCH          reduce using rule 179 (statement -> expression_statement .)
    WHILE           reduce using rule 179 (statement -> expression_statement .)
    DO              reduce using rule 179 (statement -> expression_statement .)
    FOR             reduce using rule 179 (statement -> expression_statement .)
    GOTO            reduce using rule 179 (statement -> expression_statement .)
    CONTINUE        reduce using rule 179 (statement -> expression_statement .)
    BREAK           reduce using rule 179 (statement -> expression_statement .)
    RETURN          reduce using rule 179 (statement -> expression_statement .)
    INCREMENT       reduce using rule 179 (statement -> expression_statement .)
    DECREMENT       reduce using rule 179 (statement -> expression_statement .)
    SIZEOF          reduce using rule 179 (statement -> expression_statement .)
    AND             reduce using rule 179 (statement -> expression_statement .)
    MULTIPLY        reduce using rule 179 (statement -> expression_statement .)
    PLUS            reduce using rule 179 (statement -> expression_statement .)
    MINUS           reduce using rule 179 (statement -> expression_statement .)
    NOT             reduce using rule 179 (statement -> expression_statement .)
    LNOT            reduce using rule 179 (statement -> expression_statement .)
    CHAR_CONST      reduce using rule 179 (statement -> expression_statement .)
    INT_CONST       reduce using rule 179 (statement -> expression_statement .)
    FLOAT_CONST     reduce using rule 179 (statement -> expression_statement .)
    OCTAL_CONST     reduce using rule 179 (statement -> expression_statement .)
    HEX_CONST       reduce using rule 179 (statement -> expression_statement .)
    BIN_CONST       reduce using rule 179 (statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 179 (statement -> expression_statement .)
    LPAREN          reduce using rule 179 (statement -> expression_statement .)
    ELSE            reduce using rule 179 (statement -> expression_statement .)


state 76

    (180) statement -> selection_statement .

    RCURLYBRACKET   reduce using rule 180 (statement -> selection_statement .)
    ID              reduce using rule 180 (statement -> selection_statement .)
    CASE            reduce using rule 180 (statement -> selection_statement .)
    DEFAULT         reduce using rule 180 (statement -> selection_statement .)
    LCURLYBRACKET   reduce using rule 180 (statement -> selection_statement .)
    SEMICOLON       reduce using rule 180 (statement -> selection_statement .)
    IF              reduce using rule 180 (statement -> selection_statement .)
    SWITCH          reduce using rule 180 (statement -> selection_statement .)
    WHILE           reduce using rule 180 (statement -> selection_statement .)
    DO              reduce using rule 180 (statement -> selection_statement .)
    FOR             reduce using rule 180 (statement -> selection_statement .)
    GOTO            reduce using rule 180 (statement -> selection_statement .)
    CONTINUE        reduce using rule 180 (statement -> selection_statement .)
    BREAK           reduce using rule 180 (statement -> selection_statement .)
    RETURN          reduce using rule 180 (statement -> selection_statement .)
    INCREMENT       reduce using rule 180 (statement -> selection_statement .)
    DECREMENT       reduce using rule 180 (statement -> selection_statement .)
    SIZEOF          reduce using rule 180 (statement -> selection_statement .)
    AND             reduce using rule 180 (statement -> selection_statement .)
    MULTIPLY        reduce using rule 180 (statement -> selection_statement .)
    PLUS            reduce using rule 180 (statement -> selection_statement .)
    MINUS           reduce using rule 180 (statement -> selection_statement .)
    NOT             reduce using rule 180 (statement -> selection_statement .)
    LNOT            reduce using rule 180 (statement -> selection_statement .)
    CHAR_CONST      reduce using rule 180 (statement -> selection_statement .)
    INT_CONST       reduce using rule 180 (statement -> selection_statement .)
    FLOAT_CONST     reduce using rule 180 (statement -> selection_statement .)
    OCTAL_CONST     reduce using rule 180 (statement -> selection_statement .)
    HEX_CONST       reduce using rule 180 (statement -> selection_statement .)
    BIN_CONST       reduce using rule 180 (statement -> selection_statement .)
    STRING_LITERAL  reduce using rule 180 (statement -> selection_statement .)
    LPAREN          reduce using rule 180 (statement -> selection_statement .)
    ELSE            reduce using rule 180 (statement -> selection_statement .)


state 77

    (181) statement -> iteration_statement .

    RCURLYBRACKET   reduce using rule 181 (statement -> iteration_statement .)
    ID              reduce using rule 181 (statement -> iteration_statement .)
    CASE            reduce using rule 181 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 181 (statement -> iteration_statement .)
    LCURLYBRACKET   reduce using rule 181 (statement -> iteration_statement .)
    SEMICOLON       reduce using rule 181 (statement -> iteration_statement .)
    IF              reduce using rule 181 (statement -> iteration_statement .)
    SWITCH          reduce using rule 181 (statement -> iteration_statement .)
    WHILE           reduce using rule 181 (statement -> iteration_statement .)
    DO              reduce using rule 181 (statement -> iteration_statement .)
    FOR             reduce using rule 181 (statement -> iteration_statement .)
    GOTO            reduce using rule 181 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 181 (statement -> iteration_statement .)
    BREAK           reduce using rule 181 (statement -> iteration_statement .)
    RETURN          reduce using rule 181 (statement -> iteration_statement .)
    INCREMENT       reduce using rule 181 (statement -> iteration_statement .)
    DECREMENT       reduce using rule 181 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 181 (statement -> iteration_statement .)
    AND             reduce using rule 181 (statement -> iteration_statement .)
    MULTIPLY        reduce using rule 181 (statement -> iteration_statement .)
    PLUS            reduce using rule 181 (statement -> iteration_statement .)
    MINUS           reduce using rule 181 (statement -> iteration_statement .)
    NOT             reduce using rule 181 (statement -> iteration_statement .)
    LNOT            reduce using rule 181 (statement -> iteration_statement .)
    CHAR_CONST      reduce using rule 181 (statement -> iteration_statement .)
    INT_CONST       reduce using rule 181 (statement -> iteration_statement .)
    FLOAT_CONST     reduce using rule 181 (statement -> iteration_statement .)
    OCTAL_CONST     reduce using rule 181 (statement -> iteration_statement .)
    HEX_CONST       reduce using rule 181 (statement -> iteration_statement .)
    BIN_CONST       reduce using rule 181 (statement -> iteration_statement .)
    STRING_LITERAL  reduce using rule 181 (statement -> iteration_statement .)
    LPAREN          reduce using rule 181 (statement -> iteration_statement .)
    ELSE            reduce using rule 181 (statement -> iteration_statement .)


state 78

    (182) statement -> jump_statement .

    RCURLYBRACKET   reduce using rule 182 (statement -> jump_statement .)
    ID              reduce using rule 182 (statement -> jump_statement .)
    CASE            reduce using rule 182 (statement -> jump_statement .)
    DEFAULT         reduce using rule 182 (statement -> jump_statement .)
    LCURLYBRACKET   reduce using rule 182 (statement -> jump_statement .)
    SEMICOLON       reduce using rule 182 (statement -> jump_statement .)
    IF              reduce using rule 182 (statement -> jump_statement .)
    SWITCH          reduce using rule 182 (statement -> jump_statement .)
    WHILE           reduce using rule 182 (statement -> jump_statement .)
    DO              reduce using rule 182 (statement -> jump_statement .)
    FOR             reduce using rule 182 (statement -> jump_statement .)
    GOTO            reduce using rule 182 (statement -> jump_statement .)
    CONTINUE        reduce using rule 182 (statement -> jump_statement .)
    BREAK           reduce using rule 182 (statement -> jump_statement .)
    RETURN          reduce using rule 182 (statement -> jump_statement .)
    INCREMENT       reduce using rule 182 (statement -> jump_statement .)
    DECREMENT       reduce using rule 182 (statement -> jump_statement .)
    SIZEOF          reduce using rule 182 (statement -> jump_statement .)
    AND             reduce using rule 182 (statement -> jump_statement .)
    MULTIPLY        reduce using rule 182 (statement -> jump_statement .)
    PLUS            reduce using rule 182 (statement -> jump_statement .)
    MINUS           reduce using rule 182 (statement -> jump_statement .)
    NOT             reduce using rule 182 (statement -> jump_statement .)
    LNOT            reduce using rule 182 (statement -> jump_statement .)
    CHAR_CONST      reduce using rule 182 (statement -> jump_statement .)
    INT_CONST       reduce using rule 182 (statement -> jump_statement .)
    FLOAT_CONST     reduce using rule 182 (statement -> jump_statement .)
    OCTAL_CONST     reduce using rule 182 (statement -> jump_statement .)
    HEX_CONST       reduce using rule 182 (statement -> jump_statement .)
    BIN_CONST       reduce using rule 182 (statement -> jump_statement .)
    STRING_LITERAL  reduce using rule 182 (statement -> jump_statement .)
    LPAREN          reduce using rule 182 (statement -> jump_statement .)
    ELSE            reduce using rule 182 (statement -> jump_statement .)


state 79

    (194) expression_statement -> SEMICOLON .

    RCURLYBRACKET   reduce using rule 194 (expression_statement -> SEMICOLON .)
    ID              reduce using rule 194 (expression_statement -> SEMICOLON .)
    CASE            reduce using rule 194 (expression_statement -> SEMICOLON .)
    DEFAULT         reduce using rule 194 (expression_statement -> SEMICOLON .)
    LCURLYBRACKET   reduce using rule 194 (expression_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 194 (expression_statement -> SEMICOLON .)
    IF              reduce using rule 194 (expression_statement -> SEMICOLON .)
    SWITCH          reduce using rule 194 (expression_statement -> SEMICOLON .)
    WHILE           reduce using rule 194 (expression_statement -> SEMICOLON .)
    DO              reduce using rule 194 (expression_statement -> SEMICOLON .)
    FOR             reduce using rule 194 (expression_statement -> SEMICOLON .)
    GOTO            reduce using rule 194 (expression_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 194 (expression_statement -> SEMICOLON .)
    BREAK           reduce using rule 194 (expression_statement -> SEMICOLON .)
    RETURN          reduce using rule 194 (expression_statement -> SEMICOLON .)
    INCREMENT       reduce using rule 194 (expression_statement -> SEMICOLON .)
    DECREMENT       reduce using rule 194 (expression_statement -> SEMICOLON .)
    SIZEOF          reduce using rule 194 (expression_statement -> SEMICOLON .)
    AND             reduce using rule 194 (expression_statement -> SEMICOLON .)
    MULTIPLY        reduce using rule 194 (expression_statement -> SEMICOLON .)
    PLUS            reduce using rule 194 (expression_statement -> SEMICOLON .)
    MINUS           reduce using rule 194 (expression_statement -> SEMICOLON .)
    NOT             reduce using rule 194 (expression_statement -> SEMICOLON .)
    LNOT            reduce using rule 194 (expression_statement -> SEMICOLON .)
    CHAR_CONST      reduce using rule 194 (expression_statement -> SEMICOLON .)
    INT_CONST       reduce using rule 194 (expression_statement -> SEMICOLON .)
    FLOAT_CONST     reduce using rule 194 (expression_statement -> SEMICOLON .)
    OCTAL_CONST     reduce using rule 194 (expression_statement -> SEMICOLON .)
    HEX_CONST       reduce using rule 194 (expression_statement -> SEMICOLON .)
    BIN_CONST       reduce using rule 194 (expression_statement -> SEMICOLON .)
    STRING_LITERAL  reduce using rule 194 (expression_statement -> SEMICOLON .)
    LPAREN          reduce using rule 194 (expression_statement -> SEMICOLON .)
    ELSE            reduce using rule 194 (expression_statement -> SEMICOLON .)
    RPAREN          reduce using rule 194 (expression_statement -> SEMICOLON .)


state 80

    (183) labeled_statement -> ID . COLON statement
    (1) primary_expression -> ID .

    COLON           shift and go to state 163
    LSQUAREBRACKET  reduce using rule 1 (primary_expression -> ID .)
    LPAREN          reduce using rule 1 (primary_expression -> ID .)
    PERIOD          reduce using rule 1 (primary_expression -> ID .)
    ARROW           reduce using rule 1 (primary_expression -> ID .)
    INCREMENT       reduce using rule 1 (primary_expression -> ID .)
    DECREMENT       reduce using rule 1 (primary_expression -> ID .)
    EQUALS          reduce using rule 1 (primary_expression -> ID .)
    MULTIPLYEQUAL   reduce using rule 1 (primary_expression -> ID .)
    DIVIDEEQUAL     reduce using rule 1 (primary_expression -> ID .)
    MODEQUAL        reduce using rule 1 (primary_expression -> ID .)
    PLUSEQUAL       reduce using rule 1 (primary_expression -> ID .)
    MINUSEQUAL      reduce using rule 1 (primary_expression -> ID .)
    LSHIFTEQUAL     reduce using rule 1 (primary_expression -> ID .)
    RSHIFTEQUAL     reduce using rule 1 (primary_expression -> ID .)
    ANDEQUAL        reduce using rule 1 (primary_expression -> ID .)
    XOREQUAL        reduce using rule 1 (primary_expression -> ID .)
    OREQUAL         reduce using rule 1 (primary_expression -> ID .)
    MULTIPLY        reduce using rule 1 (primary_expression -> ID .)
    DIVIDE          reduce using rule 1 (primary_expression -> ID .)
    MOD             reduce using rule 1 (primary_expression -> ID .)
    PLUS            reduce using rule 1 (primary_expression -> ID .)
    MINUS           reduce using rule 1 (primary_expression -> ID .)
    LSHIFT          reduce using rule 1 (primary_expression -> ID .)
    RSHIFT          reduce using rule 1 (primary_expression -> ID .)
    LESS            reduce using rule 1 (primary_expression -> ID .)
    GREATER         reduce using rule 1 (primary_expression -> ID .)
    LESSEQUAL       reduce using rule 1 (primary_expression -> ID .)
    GREATEREQUAL    reduce using rule 1 (primary_expression -> ID .)
    EQUAL           reduce using rule 1 (primary_expression -> ID .)
    NOTEQUAL        reduce using rule 1 (primary_expression -> ID .)
    AND             reduce using rule 1 (primary_expression -> ID .)
    XOR             reduce using rule 1 (primary_expression -> ID .)
    OR              reduce using rule 1 (primary_expression -> ID .)
    LAND            reduce using rule 1 (primary_expression -> ID .)
    CONDOP          reduce using rule 1 (primary_expression -> ID .)
    LOR             reduce using rule 1 (primary_expression -> ID .)
    SEMICOLON       reduce using rule 1 (primary_expression -> ID .)
    COMMA           reduce using rule 1 (primary_expression -> ID .)


state 81

    (184) labeled_statement -> CASE . constant_expression COLON statement
    (79) constant_expression -> . conditional_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 132
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119

    constant_expression            shift and go to state 164
    conditional_expression         shift and go to state 130
    logical_or_expression          shift and go to state 97
    logical_and_expression         shift and go to state 104
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126
    cast_expression                shift and go to state 102
    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    primary_expression             shift and go to state 105

state 82

    (185) labeled_statement -> DEFAULT . COLON statement

    COLON           shift and go to state 165


state 83

    (195) expression_statement -> expression . SEMICOLON
    (78) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 166
    COMMA           shift and go to state 167


state 84

    (196) selection_statement -> IF . LPAREN expression RPAREN statement
    (197) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 168


state 85

    (9) primary_expression -> LPAREN . expression RPAREN
    (33) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (159) type_name -> . specifier_qualifier_list
    (160) type_name -> . specifier_qualifier_list abstract_declarator
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (117) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (118) specifier_qualifier_list -> . type_specifier
    (119) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (120) specifier_qualifier_list -> . type_qualifier
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (97) type_specifier -> . VOID
    (98) type_specifier -> . CHAR
    (99) type_specifier -> . SHORT
    (100) type_specifier -> . INT
    (101) type_specifier -> . LONG
    (102) type_specifier -> . FLOAT
    (103) type_specifier -> . DOUBLE
    (104) type_specifier -> . SIGNED
    (105) type_specifier -> . UNSIGNED
    (106) type_specifier -> . struct_or_union_specifier
    (107) type_specifier -> . enum_specifier
    (108) type_specifier -> . TYPE_NAME
    (133) type_qualifier -> . CONST
    (134) type_qualifier -> . VOLATILE
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (109) struct_or_union_specifier -> . struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (110) struct_or_union_specifier -> . struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (111) struct_or_union_specifier -> . struct_or_union ID
    (126) enum_specifier -> . ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET
    (127) enum_specifier -> . ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET
    (128) enum_specifier -> . ENUM ID
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (112) struct_or_union -> . STRUCT
    (113) struct_or_union -> . UNION
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    TYPE_NAME       shift and go to state 28
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ENUM            shift and go to state 35
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    expression                     shift and go to state 169
    type_name                      shift and go to state 170
    cast_expression                shift and go to state 102
    assignment_expression          shift and go to state 94
    specifier_qualifier_list       shift and go to state 171
    conditional_expression         shift and go to state 95
    unary_expression               shift and go to state 96
    type_specifier                 shift and go to state 148
    type_qualifier                 shift and go to state 149
    logical_or_expression          shift and go to state 97
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    struct_or_union_specifier      shift and go to state 26
    enum_specifier                 shift and go to state 27
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    struct_or_union                shift and go to state 34
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 86

    (198) selection_statement -> SWITCH . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 172


state 87

    (199) iteration_statement -> WHILE . LPAREN expression RPAREN

    LPAREN          shift and go to state 173


state 88

    (200) iteration_statement -> DO . statement WHILE LPAREN expression RPAREN SEMICOLON
    (177) statement -> . labeled_statement
    (178) statement -> . compound_statement
    (179) statement -> . expression_statement
    (180) statement -> . selection_statement
    (181) statement -> . iteration_statement
    (182) statement -> . jump_statement
    (183) labeled_statement -> . ID COLON statement
    (184) labeled_statement -> . CASE constant_expression COLON statement
    (185) labeled_statement -> . DEFAULT COLON statement
    (186) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (187) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (188) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (189) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (194) expression_statement -> . SEMICOLON
    (195) expression_statement -> . expression SEMICOLON
    (196) selection_statement -> . IF LPAREN expression RPAREN statement
    (197) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (198) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (199) iteration_statement -> . WHILE LPAREN expression RPAREN
    (200) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (201) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (202) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (203) jump_statement -> . GOTO ID SEMICOLON
    (204) jump_statement -> . CONTINUE SEMICOLON
    (205) jump_statement -> . BREAK SEMICOLON
    (206) jump_statement -> . RETURN SEMICOLON
    (207) jump_statement -> . RETURN expression SEMICOLON
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    ID              shift and go to state 80
    CASE            shift and go to state 81
    DEFAULT         shift and go to state 82
    LCURLYBRACKET   shift and go to state 46
    SEMICOLON       shift and go to state 79
    IF              shift and go to state 84
    SWITCH          shift and go to state 86
    WHILE           shift and go to state 87
    DO              shift and go to state 88
    FOR             shift and go to state 89
    GOTO            shift and go to state 90
    CONTINUE        shift and go to state 91
    BREAK           shift and go to state 92
    RETURN          shift and go to state 93
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    statement                      shift and go to state 174
    expression                     shift and go to state 83
    labeled_statement              shift and go to state 73
    compound_statement             shift and go to state 74
    expression_statement           shift and go to state 75
    selection_statement            shift and go to state 76
    iteration_statement            shift and go to state 77
    jump_statement                 shift and go to state 78
    assignment_expression          shift and go to state 94
    conditional_expression         shift and go to state 95
    unary_expression               shift and go to state 96
    logical_or_expression          shift and go to state 97
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 89

    (201) iteration_statement -> FOR . LPAREN expression_statement expression_statement RPAREN statement
    (202) iteration_statement -> FOR . LPAREN expression_statement expression_statement expression RPAREN statement

    LPAREN          shift and go to state 175


state 90

    (203) jump_statement -> GOTO . ID SEMICOLON

    ID              shift and go to state 176


state 91

    (204) jump_statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 177


state 92

    (205) jump_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 178


state 93

    (206) jump_statement -> RETURN . SEMICOLON
    (207) jump_statement -> RETURN . expression SEMICOLON
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 179
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    expression                     shift and go to state 180
    assignment_expression          shift and go to state 94
    conditional_expression         shift and go to state 95
    unary_expression               shift and go to state 96
    logical_or_expression          shift and go to state 97
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 94

    (77) expression -> assignment_expression .

    SEMICOLON       reduce using rule 77 (expression -> assignment_expression .)
    COMMA           reduce using rule 77 (expression -> assignment_expression .)
    RPAREN          reduce using rule 77 (expression -> assignment_expression .)
    COLON           reduce using rule 77 (expression -> assignment_expression .)
    RSQUAREBRACKET  reduce using rule 77 (expression -> assignment_expression .)


state 95

    (64) assignment_expression -> conditional_expression .

    SEMICOLON       reduce using rule 64 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 64 (assignment_expression -> conditional_expression .)
    RPAREN          reduce using rule 64 (assignment_expression -> conditional_expression .)
    RCURLYBRACKET   reduce using rule 64 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 64 (assignment_expression -> conditional_expression .)
    RSQUAREBRACKET  reduce using rule 64 (assignment_expression -> conditional_expression .)


state 96

    (65) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (32) cast_expression -> unary_expression .
    (66) assignment_operator -> . EQUALS
    (67) assignment_operator -> . MULTIPLYEQUAL
    (68) assignment_operator -> . DIVIDEEQUAL
    (69) assignment_operator -> . MODEQUAL
    (70) assignment_operator -> . PLUSEQUAL
    (71) assignment_operator -> . MINUSEQUAL
    (72) assignment_operator -> . LSHIFTEQUAL
    (73) assignment_operator -> . RSHIFTEQUAL
    (74) assignment_operator -> . ANDEQUAL
    (75) assignment_operator -> . XOREQUAL
    (76) assignment_operator -> . OREQUAL

    MULTIPLY        reduce using rule 32 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 32 (cast_expression -> unary_expression .)
    MOD             reduce using rule 32 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 32 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 32 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 32 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 32 (cast_expression -> unary_expression .)
    LESS            reduce using rule 32 (cast_expression -> unary_expression .)
    GREATER         reduce using rule 32 (cast_expression -> unary_expression .)
    LESSEQUAL       reduce using rule 32 (cast_expression -> unary_expression .)
    GREATEREQUAL    reduce using rule 32 (cast_expression -> unary_expression .)
    EQUAL           reduce using rule 32 (cast_expression -> unary_expression .)
    NOTEQUAL        reduce using rule 32 (cast_expression -> unary_expression .)
    AND             reduce using rule 32 (cast_expression -> unary_expression .)
    XOR             reduce using rule 32 (cast_expression -> unary_expression .)
    OR              reduce using rule 32 (cast_expression -> unary_expression .)
    LAND            reduce using rule 32 (cast_expression -> unary_expression .)
    CONDOP          reduce using rule 32 (cast_expression -> unary_expression .)
    LOR             reduce using rule 32 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 32 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 32 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 32 (cast_expression -> unary_expression .)
    RCURLYBRACKET   reduce using rule 32 (cast_expression -> unary_expression .)
    COLON           reduce using rule 32 (cast_expression -> unary_expression .)
    RSQUAREBRACKET  reduce using rule 32 (cast_expression -> unary_expression .)
    EQUALS          shift and go to state 182
    MULTIPLYEQUAL   shift and go to state 183
    DIVIDEEQUAL     shift and go to state 184
    MODEQUAL        shift and go to state 185
    PLUSEQUAL       shift and go to state 186
    MINUSEQUAL      shift and go to state 187
    LSHIFTEQUAL     shift and go to state 188
    RSHIFTEQUAL     shift and go to state 189
    ANDEQUAL        shift and go to state 190
    XOREQUAL        shift and go to state 191
    OREQUAL         shift and go to state 192

    assignment_operator            shift and go to state 181

state 97

    (62) conditional_expression -> logical_or_expression .
    (63) conditional_expression -> logical_or_expression . CONDOP expression COLON conditional_expression
    (61) logical_or_expression -> logical_or_expression . LOR logical_and_expression

    SEMICOLON       reduce using rule 62 (conditional_expression -> logical_or_expression .)
    COMMA           reduce using rule 62 (conditional_expression -> logical_or_expression .)
    RSQUAREBRACKET  reduce using rule 62 (conditional_expression -> logical_or_expression .)
    COLON           reduce using rule 62 (conditional_expression -> logical_or_expression .)
    RPAREN          reduce using rule 62 (conditional_expression -> logical_or_expression .)
    RCURLYBRACKET   reduce using rule 62 (conditional_expression -> logical_or_expression .)
    CONDOP          shift and go to state 193
    LOR             shift and go to state 194


state 98

    (20) unary_expression -> postfix_expression .
    (11) postfix_expression -> postfix_expression . LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> postfix_expression . LPAREN RPAREN
    (13) postfix_expression -> postfix_expression . LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> postfix_expression . PERIOD ID
    (15) postfix_expression -> postfix_expression . ARROW ID
    (16) postfix_expression -> postfix_expression . INCREMENT
    (17) postfix_expression -> postfix_expression . DECREMENT

    EQUALS          reduce using rule 20 (unary_expression -> postfix_expression .)
    MULTIPLYEQUAL   reduce using rule 20 (unary_expression -> postfix_expression .)
    DIVIDEEQUAL     reduce using rule 20 (unary_expression -> postfix_expression .)
    MODEQUAL        reduce using rule 20 (unary_expression -> postfix_expression .)
    PLUSEQUAL       reduce using rule 20 (unary_expression -> postfix_expression .)
    MINUSEQUAL      reduce using rule 20 (unary_expression -> postfix_expression .)
    LSHIFTEQUAL     reduce using rule 20 (unary_expression -> postfix_expression .)
    RSHIFTEQUAL     reduce using rule 20 (unary_expression -> postfix_expression .)
    ANDEQUAL        reduce using rule 20 (unary_expression -> postfix_expression .)
    XOREQUAL        reduce using rule 20 (unary_expression -> postfix_expression .)
    OREQUAL         reduce using rule 20 (unary_expression -> postfix_expression .)
    MULTIPLY        reduce using rule 20 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 20 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 20 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 20 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 20 (unary_expression -> postfix_expression .)
    LSHIFT          reduce using rule 20 (unary_expression -> postfix_expression .)
    RSHIFT          reduce using rule 20 (unary_expression -> postfix_expression .)
    LESS            reduce using rule 20 (unary_expression -> postfix_expression .)
    GREATER         reduce using rule 20 (unary_expression -> postfix_expression .)
    LESSEQUAL       reduce using rule 20 (unary_expression -> postfix_expression .)
    GREATEREQUAL    reduce using rule 20 (unary_expression -> postfix_expression .)
    EQUAL           reduce using rule 20 (unary_expression -> postfix_expression .)
    NOTEQUAL        reduce using rule 20 (unary_expression -> postfix_expression .)
    AND             reduce using rule 20 (unary_expression -> postfix_expression .)
    XOR             reduce using rule 20 (unary_expression -> postfix_expression .)
    OR              reduce using rule 20 (unary_expression -> postfix_expression .)
    LAND            reduce using rule 20 (unary_expression -> postfix_expression .)
    CONDOP          reduce using rule 20 (unary_expression -> postfix_expression .)
    LOR             reduce using rule 20 (unary_expression -> postfix_expression .)
    SEMICOLON       reduce using rule 20 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 20 (unary_expression -> postfix_expression .)
    RSQUAREBRACKET  reduce using rule 20 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 20 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 20 (unary_expression -> postfix_expression .)
    RCURLYBRACKET   reduce using rule 20 (unary_expression -> postfix_expression .)
    LSQUAREBRACKET  shift and go to state 195
    LPAREN          shift and go to state 196
    PERIOD          shift and go to state 197
    ARROW           shift and go to state 198
    INCREMENT       shift and go to state 199
    DECREMENT       shift and go to state 200


state 99

    (21) unary_expression -> INCREMENT . unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 202

    unary_expression               shift and go to state 201
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    primary_expression             shift and go to state 105

state 100

    (22) unary_expression -> DECREMENT . unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN

    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 202

    unary_expression               shift and go to state 203
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    primary_expression             shift and go to state 105

state 101

    (23) unary_expression -> unary_operator . cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 132
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119

    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 204
    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 98
    primary_expression             shift and go to state 105

state 102

    (34) multiplicative_expression -> cast_expression .

    MULTIPLY        reduce using rule 34 (multiplicative_expression -> cast_expression .)
    DIVIDE          reduce using rule 34 (multiplicative_expression -> cast_expression .)
    MOD             reduce using rule 34 (multiplicative_expression -> cast_expression .)
    PLUS            reduce using rule 34 (multiplicative_expression -> cast_expression .)
    MINUS           reduce using rule 34 (multiplicative_expression -> cast_expression .)
    LSHIFT          reduce using rule 34 (multiplicative_expression -> cast_expression .)
    RSHIFT          reduce using rule 34 (multiplicative_expression -> cast_expression .)
    LESS            reduce using rule 34 (multiplicative_expression -> cast_expression .)
    GREATER         reduce using rule 34 (multiplicative_expression -> cast_expression .)
    LESSEQUAL       reduce using rule 34 (multiplicative_expression -> cast_expression .)
    GREATEREQUAL    reduce using rule 34 (multiplicative_expression -> cast_expression .)
    EQUAL           reduce using rule 34 (multiplicative_expression -> cast_expression .)
    NOTEQUAL        reduce using rule 34 (multiplicative_expression -> cast_expression .)
    AND             reduce using rule 34 (multiplicative_expression -> cast_expression .)
    XOR             reduce using rule 34 (multiplicative_expression -> cast_expression .)
    OR              reduce using rule 34 (multiplicative_expression -> cast_expression .)
    LAND            reduce using rule 34 (multiplicative_expression -> cast_expression .)
    CONDOP          reduce using rule 34 (multiplicative_expression -> cast_expression .)
    LOR             reduce using rule 34 (multiplicative_expression -> cast_expression .)
    SEMICOLON       reduce using rule 34 (multiplicative_expression -> cast_expression .)
    COMMA           reduce using rule 34 (multiplicative_expression -> cast_expression .)
    RSQUAREBRACKET  reduce using rule 34 (multiplicative_expression -> cast_expression .)
    COLON           reduce using rule 34 (multiplicative_expression -> cast_expression .)
    RPAREN          reduce using rule 34 (multiplicative_expression -> cast_expression .)
    RCURLYBRACKET   reduce using rule 34 (multiplicative_expression -> cast_expression .)


state 103

    (24) unary_expression -> SIZEOF . unary_expression
    (25) unary_expression -> SIZEOF . LPAREN type_name RPAREN
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 206
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119

    unary_expression               shift and go to state 205
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    primary_expression             shift and go to state 105

state 104

    (60) logical_or_expression -> logical_and_expression .
    (59) logical_and_expression -> logical_and_expression . LAND inclusive_or_expression

    CONDOP          reduce using rule 60 (logical_or_expression -> logical_and_expression .)
    LOR             reduce using rule 60 (logical_or_expression -> logical_and_expression .)
    SEMICOLON       reduce using rule 60 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 60 (logical_or_expression -> logical_and_expression .)
    RSQUAREBRACKET  reduce using rule 60 (logical_or_expression -> logical_and_expression .)
    COLON           reduce using rule 60 (logical_or_expression -> logical_and_expression .)
    RPAREN          reduce using rule 60 (logical_or_expression -> logical_and_expression .)
    RCURLYBRACKET   reduce using rule 60 (logical_or_expression -> logical_and_expression .)
    LAND            shift and go to state 207


state 105

    (10) postfix_expression -> primary_expression .

    LSQUAREBRACKET  reduce using rule 10 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 10 (postfix_expression -> primary_expression .)
    PERIOD          reduce using rule 10 (postfix_expression -> primary_expression .)
    ARROW           reduce using rule 10 (postfix_expression -> primary_expression .)
    INCREMENT       reduce using rule 10 (postfix_expression -> primary_expression .)
    DECREMENT       reduce using rule 10 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 10 (postfix_expression -> primary_expression .)
    MULTIPLYEQUAL   reduce using rule 10 (postfix_expression -> primary_expression .)
    DIVIDEEQUAL     reduce using rule 10 (postfix_expression -> primary_expression .)
    MODEQUAL        reduce using rule 10 (postfix_expression -> primary_expression .)
    PLUSEQUAL       reduce using rule 10 (postfix_expression -> primary_expression .)
    MINUSEQUAL      reduce using rule 10 (postfix_expression -> primary_expression .)
    LSHIFTEQUAL     reduce using rule 10 (postfix_expression -> primary_expression .)
    RSHIFTEQUAL     reduce using rule 10 (postfix_expression -> primary_expression .)
    ANDEQUAL        reduce using rule 10 (postfix_expression -> primary_expression .)
    XOREQUAL        reduce using rule 10 (postfix_expression -> primary_expression .)
    OREQUAL         reduce using rule 10 (postfix_expression -> primary_expression .)
    MULTIPLY        reduce using rule 10 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 10 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 10 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 10 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 10 (postfix_expression -> primary_expression .)
    LSHIFT          reduce using rule 10 (postfix_expression -> primary_expression .)
    RSHIFT          reduce using rule 10 (postfix_expression -> primary_expression .)
    LESS            reduce using rule 10 (postfix_expression -> primary_expression .)
    GREATER         reduce using rule 10 (postfix_expression -> primary_expression .)
    LESSEQUAL       reduce using rule 10 (postfix_expression -> primary_expression .)
    GREATEREQUAL    reduce using rule 10 (postfix_expression -> primary_expression .)
    EQUAL           reduce using rule 10 (postfix_expression -> primary_expression .)
    NOTEQUAL        reduce using rule 10 (postfix_expression -> primary_expression .)
    AND             reduce using rule 10 (postfix_expression -> primary_expression .)
    XOR             reduce using rule 10 (postfix_expression -> primary_expression .)
    OR              reduce using rule 10 (postfix_expression -> primary_expression .)
    LAND            reduce using rule 10 (postfix_expression -> primary_expression .)
    CONDOP          reduce using rule 10 (postfix_expression -> primary_expression .)
    LOR             reduce using rule 10 (postfix_expression -> primary_expression .)
    SEMICOLON       reduce using rule 10 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 10 (postfix_expression -> primary_expression .)
    RSQUAREBRACKET  reduce using rule 10 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 10 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 10 (postfix_expression -> primary_expression .)
    RCURLYBRACKET   reduce using rule 10 (postfix_expression -> primary_expression .)


state 106

    (26) unary_operator -> AND .

    LPAREN          reduce using rule 26 (unary_operator -> AND .)
    INCREMENT       reduce using rule 26 (unary_operator -> AND .)
    DECREMENT       reduce using rule 26 (unary_operator -> AND .)
    SIZEOF          reduce using rule 26 (unary_operator -> AND .)
    AND             reduce using rule 26 (unary_operator -> AND .)
    MULTIPLY        reduce using rule 26 (unary_operator -> AND .)
    PLUS            reduce using rule 26 (unary_operator -> AND .)
    MINUS           reduce using rule 26 (unary_operator -> AND .)
    NOT             reduce using rule 26 (unary_operator -> AND .)
    LNOT            reduce using rule 26 (unary_operator -> AND .)
    ID              reduce using rule 26 (unary_operator -> AND .)
    CHAR_CONST      reduce using rule 26 (unary_operator -> AND .)
    INT_CONST       reduce using rule 26 (unary_operator -> AND .)
    FLOAT_CONST     reduce using rule 26 (unary_operator -> AND .)
    OCTAL_CONST     reduce using rule 26 (unary_operator -> AND .)
    HEX_CONST       reduce using rule 26 (unary_operator -> AND .)
    BIN_CONST       reduce using rule 26 (unary_operator -> AND .)
    STRING_LITERAL  reduce using rule 26 (unary_operator -> AND .)


state 107

    (27) unary_operator -> MULTIPLY .

    LPAREN          reduce using rule 27 (unary_operator -> MULTIPLY .)
    INCREMENT       reduce using rule 27 (unary_operator -> MULTIPLY .)
    DECREMENT       reduce using rule 27 (unary_operator -> MULTIPLY .)
    SIZEOF          reduce using rule 27 (unary_operator -> MULTIPLY .)
    AND             reduce using rule 27 (unary_operator -> MULTIPLY .)
    MULTIPLY        reduce using rule 27 (unary_operator -> MULTIPLY .)
    PLUS            reduce using rule 27 (unary_operator -> MULTIPLY .)
    MINUS           reduce using rule 27 (unary_operator -> MULTIPLY .)
    NOT             reduce using rule 27 (unary_operator -> MULTIPLY .)
    LNOT            reduce using rule 27 (unary_operator -> MULTIPLY .)
    ID              reduce using rule 27 (unary_operator -> MULTIPLY .)
    CHAR_CONST      reduce using rule 27 (unary_operator -> MULTIPLY .)
    INT_CONST       reduce using rule 27 (unary_operator -> MULTIPLY .)
    FLOAT_CONST     reduce using rule 27 (unary_operator -> MULTIPLY .)
    OCTAL_CONST     reduce using rule 27 (unary_operator -> MULTIPLY .)
    HEX_CONST       reduce using rule 27 (unary_operator -> MULTIPLY .)
    BIN_CONST       reduce using rule 27 (unary_operator -> MULTIPLY .)
    STRING_LITERAL  reduce using rule 27 (unary_operator -> MULTIPLY .)


state 108

    (28) unary_operator -> PLUS .

    LPAREN          reduce using rule 28 (unary_operator -> PLUS .)
    INCREMENT       reduce using rule 28 (unary_operator -> PLUS .)
    DECREMENT       reduce using rule 28 (unary_operator -> PLUS .)
    SIZEOF          reduce using rule 28 (unary_operator -> PLUS .)
    AND             reduce using rule 28 (unary_operator -> PLUS .)
    MULTIPLY        reduce using rule 28 (unary_operator -> PLUS .)
    PLUS            reduce using rule 28 (unary_operator -> PLUS .)
    MINUS           reduce using rule 28 (unary_operator -> PLUS .)
    NOT             reduce using rule 28 (unary_operator -> PLUS .)
    LNOT            reduce using rule 28 (unary_operator -> PLUS .)
    ID              reduce using rule 28 (unary_operator -> PLUS .)
    CHAR_CONST      reduce using rule 28 (unary_operator -> PLUS .)
    INT_CONST       reduce using rule 28 (unary_operator -> PLUS .)
    FLOAT_CONST     reduce using rule 28 (unary_operator -> PLUS .)
    OCTAL_CONST     reduce using rule 28 (unary_operator -> PLUS .)
    HEX_CONST       reduce using rule 28 (unary_operator -> PLUS .)
    BIN_CONST       reduce using rule 28 (unary_operator -> PLUS .)
    STRING_LITERAL  reduce using rule 28 (unary_operator -> PLUS .)


state 109

    (29) unary_operator -> MINUS .

    LPAREN          reduce using rule 29 (unary_operator -> MINUS .)
    INCREMENT       reduce using rule 29 (unary_operator -> MINUS .)
    DECREMENT       reduce using rule 29 (unary_operator -> MINUS .)
    SIZEOF          reduce using rule 29 (unary_operator -> MINUS .)
    AND             reduce using rule 29 (unary_operator -> MINUS .)
    MULTIPLY        reduce using rule 29 (unary_operator -> MINUS .)
    PLUS            reduce using rule 29 (unary_operator -> MINUS .)
    MINUS           reduce using rule 29 (unary_operator -> MINUS .)
    NOT             reduce using rule 29 (unary_operator -> MINUS .)
    LNOT            reduce using rule 29 (unary_operator -> MINUS .)
    ID              reduce using rule 29 (unary_operator -> MINUS .)
    CHAR_CONST      reduce using rule 29 (unary_operator -> MINUS .)
    INT_CONST       reduce using rule 29 (unary_operator -> MINUS .)
    FLOAT_CONST     reduce using rule 29 (unary_operator -> MINUS .)
    OCTAL_CONST     reduce using rule 29 (unary_operator -> MINUS .)
    HEX_CONST       reduce using rule 29 (unary_operator -> MINUS .)
    BIN_CONST       reduce using rule 29 (unary_operator -> MINUS .)
    STRING_LITERAL  reduce using rule 29 (unary_operator -> MINUS .)


state 110

    (30) unary_operator -> NOT .

    LPAREN          reduce using rule 30 (unary_operator -> NOT .)
    INCREMENT       reduce using rule 30 (unary_operator -> NOT .)
    DECREMENT       reduce using rule 30 (unary_operator -> NOT .)
    SIZEOF          reduce using rule 30 (unary_operator -> NOT .)
    AND             reduce using rule 30 (unary_operator -> NOT .)
    MULTIPLY        reduce using rule 30 (unary_operator -> NOT .)
    PLUS            reduce using rule 30 (unary_operator -> NOT .)
    MINUS           reduce using rule 30 (unary_operator -> NOT .)
    NOT             reduce using rule 30 (unary_operator -> NOT .)
    LNOT            reduce using rule 30 (unary_operator -> NOT .)
    ID              reduce using rule 30 (unary_operator -> NOT .)
    CHAR_CONST      reduce using rule 30 (unary_operator -> NOT .)
    INT_CONST       reduce using rule 30 (unary_operator -> NOT .)
    FLOAT_CONST     reduce using rule 30 (unary_operator -> NOT .)
    OCTAL_CONST     reduce using rule 30 (unary_operator -> NOT .)
    HEX_CONST       reduce using rule 30 (unary_operator -> NOT .)
    BIN_CONST       reduce using rule 30 (unary_operator -> NOT .)
    STRING_LITERAL  reduce using rule 30 (unary_operator -> NOT .)


state 111

    (31) unary_operator -> LNOT .

    LPAREN          reduce using rule 31 (unary_operator -> LNOT .)
    INCREMENT       reduce using rule 31 (unary_operator -> LNOT .)
    DECREMENT       reduce using rule 31 (unary_operator -> LNOT .)
    SIZEOF          reduce using rule 31 (unary_operator -> LNOT .)
    AND             reduce using rule 31 (unary_operator -> LNOT .)
    MULTIPLY        reduce using rule 31 (unary_operator -> LNOT .)
    PLUS            reduce using rule 31 (unary_operator -> LNOT .)
    MINUS           reduce using rule 31 (unary_operator -> LNOT .)
    NOT             reduce using rule 31 (unary_operator -> LNOT .)
    LNOT            reduce using rule 31 (unary_operator -> LNOT .)
    ID              reduce using rule 31 (unary_operator -> LNOT .)
    CHAR_CONST      reduce using rule 31 (unary_operator -> LNOT .)
    INT_CONST       reduce using rule 31 (unary_operator -> LNOT .)
    FLOAT_CONST     reduce using rule 31 (unary_operator -> LNOT .)
    OCTAL_CONST     reduce using rule 31 (unary_operator -> LNOT .)
    HEX_CONST       reduce using rule 31 (unary_operator -> LNOT .)
    BIN_CONST       reduce using rule 31 (unary_operator -> LNOT .)
    STRING_LITERAL  reduce using rule 31 (unary_operator -> LNOT .)


state 112

    (58) logical_and_expression -> inclusive_or_expression .
    (57) inclusive_or_expression -> inclusive_or_expression . OR exclusive_or_expression

    LAND            reduce using rule 58 (logical_and_expression -> inclusive_or_expression .)
    CONDOP          reduce using rule 58 (logical_and_expression -> inclusive_or_expression .)
    LOR             reduce using rule 58 (logical_and_expression -> inclusive_or_expression .)
    SEMICOLON       reduce using rule 58 (logical_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 58 (logical_and_expression -> inclusive_or_expression .)
    RSQUAREBRACKET  reduce using rule 58 (logical_and_expression -> inclusive_or_expression .)
    COLON           reduce using rule 58 (logical_and_expression -> inclusive_or_expression .)
    RPAREN          reduce using rule 58 (logical_and_expression -> inclusive_or_expression .)
    RCURLYBRACKET   reduce using rule 58 (logical_and_expression -> inclusive_or_expression .)
    OR              shift and go to state 208


state 113

    (2) primary_expression -> CHAR_CONST .

    LSQUAREBRACKET  reduce using rule 2 (primary_expression -> CHAR_CONST .)
    LPAREN          reduce using rule 2 (primary_expression -> CHAR_CONST .)
    PERIOD          reduce using rule 2 (primary_expression -> CHAR_CONST .)
    ARROW           reduce using rule 2 (primary_expression -> CHAR_CONST .)
    INCREMENT       reduce using rule 2 (primary_expression -> CHAR_CONST .)
    DECREMENT       reduce using rule 2 (primary_expression -> CHAR_CONST .)
    EQUALS          reduce using rule 2 (primary_expression -> CHAR_CONST .)
    MULTIPLYEQUAL   reduce using rule 2 (primary_expression -> CHAR_CONST .)
    DIVIDEEQUAL     reduce using rule 2 (primary_expression -> CHAR_CONST .)
    MODEQUAL        reduce using rule 2 (primary_expression -> CHAR_CONST .)
    PLUSEQUAL       reduce using rule 2 (primary_expression -> CHAR_CONST .)
    MINUSEQUAL      reduce using rule 2 (primary_expression -> CHAR_CONST .)
    LSHIFTEQUAL     reduce using rule 2 (primary_expression -> CHAR_CONST .)
    RSHIFTEQUAL     reduce using rule 2 (primary_expression -> CHAR_CONST .)
    ANDEQUAL        reduce using rule 2 (primary_expression -> CHAR_CONST .)
    XOREQUAL        reduce using rule 2 (primary_expression -> CHAR_CONST .)
    OREQUAL         reduce using rule 2 (primary_expression -> CHAR_CONST .)
    MULTIPLY        reduce using rule 2 (primary_expression -> CHAR_CONST .)
    DIVIDE          reduce using rule 2 (primary_expression -> CHAR_CONST .)
    MOD             reduce using rule 2 (primary_expression -> CHAR_CONST .)
    PLUS            reduce using rule 2 (primary_expression -> CHAR_CONST .)
    MINUS           reduce using rule 2 (primary_expression -> CHAR_CONST .)
    LSHIFT          reduce using rule 2 (primary_expression -> CHAR_CONST .)
    RSHIFT          reduce using rule 2 (primary_expression -> CHAR_CONST .)
    LESS            reduce using rule 2 (primary_expression -> CHAR_CONST .)
    GREATER         reduce using rule 2 (primary_expression -> CHAR_CONST .)
    LESSEQUAL       reduce using rule 2 (primary_expression -> CHAR_CONST .)
    GREATEREQUAL    reduce using rule 2 (primary_expression -> CHAR_CONST .)
    EQUAL           reduce using rule 2 (primary_expression -> CHAR_CONST .)
    NOTEQUAL        reduce using rule 2 (primary_expression -> CHAR_CONST .)
    AND             reduce using rule 2 (primary_expression -> CHAR_CONST .)
    XOR             reduce using rule 2 (primary_expression -> CHAR_CONST .)
    OR              reduce using rule 2 (primary_expression -> CHAR_CONST .)
    LAND            reduce using rule 2 (primary_expression -> CHAR_CONST .)
    CONDOP          reduce using rule 2 (primary_expression -> CHAR_CONST .)
    LOR             reduce using rule 2 (primary_expression -> CHAR_CONST .)
    SEMICOLON       reduce using rule 2 (primary_expression -> CHAR_CONST .)
    COMMA           reduce using rule 2 (primary_expression -> CHAR_CONST .)
    RSQUAREBRACKET  reduce using rule 2 (primary_expression -> CHAR_CONST .)
    COLON           reduce using rule 2 (primary_expression -> CHAR_CONST .)
    RPAREN          reduce using rule 2 (primary_expression -> CHAR_CONST .)
    RCURLYBRACKET   reduce using rule 2 (primary_expression -> CHAR_CONST .)


state 114

    (3) primary_expression -> INT_CONST .

    LSQUAREBRACKET  reduce using rule 3 (primary_expression -> INT_CONST .)
    LPAREN          reduce using rule 3 (primary_expression -> INT_CONST .)
    PERIOD          reduce using rule 3 (primary_expression -> INT_CONST .)
    ARROW           reduce using rule 3 (primary_expression -> INT_CONST .)
    INCREMENT       reduce using rule 3 (primary_expression -> INT_CONST .)
    DECREMENT       reduce using rule 3 (primary_expression -> INT_CONST .)
    EQUALS          reduce using rule 3 (primary_expression -> INT_CONST .)
    MULTIPLYEQUAL   reduce using rule 3 (primary_expression -> INT_CONST .)
    DIVIDEEQUAL     reduce using rule 3 (primary_expression -> INT_CONST .)
    MODEQUAL        reduce using rule 3 (primary_expression -> INT_CONST .)
    PLUSEQUAL       reduce using rule 3 (primary_expression -> INT_CONST .)
    MINUSEQUAL      reduce using rule 3 (primary_expression -> INT_CONST .)
    LSHIFTEQUAL     reduce using rule 3 (primary_expression -> INT_CONST .)
    RSHIFTEQUAL     reduce using rule 3 (primary_expression -> INT_CONST .)
    ANDEQUAL        reduce using rule 3 (primary_expression -> INT_CONST .)
    XOREQUAL        reduce using rule 3 (primary_expression -> INT_CONST .)
    OREQUAL         reduce using rule 3 (primary_expression -> INT_CONST .)
    MULTIPLY        reduce using rule 3 (primary_expression -> INT_CONST .)
    DIVIDE          reduce using rule 3 (primary_expression -> INT_CONST .)
    MOD             reduce using rule 3 (primary_expression -> INT_CONST .)
    PLUS            reduce using rule 3 (primary_expression -> INT_CONST .)
    MINUS           reduce using rule 3 (primary_expression -> INT_CONST .)
    LSHIFT          reduce using rule 3 (primary_expression -> INT_CONST .)
    RSHIFT          reduce using rule 3 (primary_expression -> INT_CONST .)
    LESS            reduce using rule 3 (primary_expression -> INT_CONST .)
    GREATER         reduce using rule 3 (primary_expression -> INT_CONST .)
    LESSEQUAL       reduce using rule 3 (primary_expression -> INT_CONST .)
    GREATEREQUAL    reduce using rule 3 (primary_expression -> INT_CONST .)
    EQUAL           reduce using rule 3 (primary_expression -> INT_CONST .)
    NOTEQUAL        reduce using rule 3 (primary_expression -> INT_CONST .)
    AND             reduce using rule 3 (primary_expression -> INT_CONST .)
    XOR             reduce using rule 3 (primary_expression -> INT_CONST .)
    OR              reduce using rule 3 (primary_expression -> INT_CONST .)
    LAND            reduce using rule 3 (primary_expression -> INT_CONST .)
    CONDOP          reduce using rule 3 (primary_expression -> INT_CONST .)
    LOR             reduce using rule 3 (primary_expression -> INT_CONST .)
    SEMICOLON       reduce using rule 3 (primary_expression -> INT_CONST .)
    COMMA           reduce using rule 3 (primary_expression -> INT_CONST .)
    RSQUAREBRACKET  reduce using rule 3 (primary_expression -> INT_CONST .)
    COLON           reduce using rule 3 (primary_expression -> INT_CONST .)
    RPAREN          reduce using rule 3 (primary_expression -> INT_CONST .)
    RCURLYBRACKET   reduce using rule 3 (primary_expression -> INT_CONST .)


state 115

    (4) primary_expression -> FLOAT_CONST .

    LSQUAREBRACKET  reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    LPAREN          reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    PERIOD          reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    ARROW           reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    INCREMENT       reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    DECREMENT       reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    EQUALS          reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    MULTIPLYEQUAL   reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    DIVIDEEQUAL     reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    MODEQUAL        reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    PLUSEQUAL       reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    MINUSEQUAL      reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    LSHIFTEQUAL     reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    RSHIFTEQUAL     reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    ANDEQUAL        reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    XOREQUAL        reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    OREQUAL         reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    MULTIPLY        reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    DIVIDE          reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    MOD             reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    PLUS            reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    MINUS           reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    LSHIFT          reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    RSHIFT          reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    LESS            reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    GREATER         reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    LESSEQUAL       reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    GREATEREQUAL    reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    EQUAL           reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    NOTEQUAL        reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    AND             reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    XOR             reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    OR              reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    LAND            reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    CONDOP          reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    LOR             reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    SEMICOLON       reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    COMMA           reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    RSQUAREBRACKET  reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    COLON           reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    RPAREN          reduce using rule 4 (primary_expression -> FLOAT_CONST .)
    RCURLYBRACKET   reduce using rule 4 (primary_expression -> FLOAT_CONST .)


state 116

    (5) primary_expression -> OCTAL_CONST .

    LSQUAREBRACKET  reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    LPAREN          reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    PERIOD          reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    ARROW           reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    INCREMENT       reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    DECREMENT       reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    EQUALS          reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    MULTIPLYEQUAL   reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    DIVIDEEQUAL     reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    MODEQUAL        reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    PLUSEQUAL       reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    MINUSEQUAL      reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    LSHIFTEQUAL     reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    RSHIFTEQUAL     reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    ANDEQUAL        reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    XOREQUAL        reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    OREQUAL         reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    MULTIPLY        reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    DIVIDE          reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    MOD             reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    PLUS            reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    MINUS           reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    LSHIFT          reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    RSHIFT          reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    LESS            reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    GREATER         reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    LESSEQUAL       reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    GREATEREQUAL    reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    EQUAL           reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    NOTEQUAL        reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    AND             reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    XOR             reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    OR              reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    LAND            reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    CONDOP          reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    LOR             reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    SEMICOLON       reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    COMMA           reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    RSQUAREBRACKET  reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    COLON           reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    RPAREN          reduce using rule 5 (primary_expression -> OCTAL_CONST .)
    RCURLYBRACKET   reduce using rule 5 (primary_expression -> OCTAL_CONST .)


state 117

    (6) primary_expression -> HEX_CONST .

    LSQUAREBRACKET  reduce using rule 6 (primary_expression -> HEX_CONST .)
    LPAREN          reduce using rule 6 (primary_expression -> HEX_CONST .)
    PERIOD          reduce using rule 6 (primary_expression -> HEX_CONST .)
    ARROW           reduce using rule 6 (primary_expression -> HEX_CONST .)
    INCREMENT       reduce using rule 6 (primary_expression -> HEX_CONST .)
    DECREMENT       reduce using rule 6 (primary_expression -> HEX_CONST .)
    EQUALS          reduce using rule 6 (primary_expression -> HEX_CONST .)
    MULTIPLYEQUAL   reduce using rule 6 (primary_expression -> HEX_CONST .)
    DIVIDEEQUAL     reduce using rule 6 (primary_expression -> HEX_CONST .)
    MODEQUAL        reduce using rule 6 (primary_expression -> HEX_CONST .)
    PLUSEQUAL       reduce using rule 6 (primary_expression -> HEX_CONST .)
    MINUSEQUAL      reduce using rule 6 (primary_expression -> HEX_CONST .)
    LSHIFTEQUAL     reduce using rule 6 (primary_expression -> HEX_CONST .)
    RSHIFTEQUAL     reduce using rule 6 (primary_expression -> HEX_CONST .)
    ANDEQUAL        reduce using rule 6 (primary_expression -> HEX_CONST .)
    XOREQUAL        reduce using rule 6 (primary_expression -> HEX_CONST .)
    OREQUAL         reduce using rule 6 (primary_expression -> HEX_CONST .)
    MULTIPLY        reduce using rule 6 (primary_expression -> HEX_CONST .)
    DIVIDE          reduce using rule 6 (primary_expression -> HEX_CONST .)
    MOD             reduce using rule 6 (primary_expression -> HEX_CONST .)
    PLUS            reduce using rule 6 (primary_expression -> HEX_CONST .)
    MINUS           reduce using rule 6 (primary_expression -> HEX_CONST .)
    LSHIFT          reduce using rule 6 (primary_expression -> HEX_CONST .)
    RSHIFT          reduce using rule 6 (primary_expression -> HEX_CONST .)
    LESS            reduce using rule 6 (primary_expression -> HEX_CONST .)
    GREATER         reduce using rule 6 (primary_expression -> HEX_CONST .)
    LESSEQUAL       reduce using rule 6 (primary_expression -> HEX_CONST .)
    GREATEREQUAL    reduce using rule 6 (primary_expression -> HEX_CONST .)
    EQUAL           reduce using rule 6 (primary_expression -> HEX_CONST .)
    NOTEQUAL        reduce using rule 6 (primary_expression -> HEX_CONST .)
    AND             reduce using rule 6 (primary_expression -> HEX_CONST .)
    XOR             reduce using rule 6 (primary_expression -> HEX_CONST .)
    OR              reduce using rule 6 (primary_expression -> HEX_CONST .)
    LAND            reduce using rule 6 (primary_expression -> HEX_CONST .)
    CONDOP          reduce using rule 6 (primary_expression -> HEX_CONST .)
    LOR             reduce using rule 6 (primary_expression -> HEX_CONST .)
    SEMICOLON       reduce using rule 6 (primary_expression -> HEX_CONST .)
    COMMA           reduce using rule 6 (primary_expression -> HEX_CONST .)
    RSQUAREBRACKET  reduce using rule 6 (primary_expression -> HEX_CONST .)
    COLON           reduce using rule 6 (primary_expression -> HEX_CONST .)
    RPAREN          reduce using rule 6 (primary_expression -> HEX_CONST .)
    RCURLYBRACKET   reduce using rule 6 (primary_expression -> HEX_CONST .)


state 118

    (7) primary_expression -> BIN_CONST .

    LSQUAREBRACKET  reduce using rule 7 (primary_expression -> BIN_CONST .)
    LPAREN          reduce using rule 7 (primary_expression -> BIN_CONST .)
    PERIOD          reduce using rule 7 (primary_expression -> BIN_CONST .)
    ARROW           reduce using rule 7 (primary_expression -> BIN_CONST .)
    INCREMENT       reduce using rule 7 (primary_expression -> BIN_CONST .)
    DECREMENT       reduce using rule 7 (primary_expression -> BIN_CONST .)
    EQUALS          reduce using rule 7 (primary_expression -> BIN_CONST .)
    MULTIPLYEQUAL   reduce using rule 7 (primary_expression -> BIN_CONST .)
    DIVIDEEQUAL     reduce using rule 7 (primary_expression -> BIN_CONST .)
    MODEQUAL        reduce using rule 7 (primary_expression -> BIN_CONST .)
    PLUSEQUAL       reduce using rule 7 (primary_expression -> BIN_CONST .)
    MINUSEQUAL      reduce using rule 7 (primary_expression -> BIN_CONST .)
    LSHIFTEQUAL     reduce using rule 7 (primary_expression -> BIN_CONST .)
    RSHIFTEQUAL     reduce using rule 7 (primary_expression -> BIN_CONST .)
    ANDEQUAL        reduce using rule 7 (primary_expression -> BIN_CONST .)
    XOREQUAL        reduce using rule 7 (primary_expression -> BIN_CONST .)
    OREQUAL         reduce using rule 7 (primary_expression -> BIN_CONST .)
    MULTIPLY        reduce using rule 7 (primary_expression -> BIN_CONST .)
    DIVIDE          reduce using rule 7 (primary_expression -> BIN_CONST .)
    MOD             reduce using rule 7 (primary_expression -> BIN_CONST .)
    PLUS            reduce using rule 7 (primary_expression -> BIN_CONST .)
    MINUS           reduce using rule 7 (primary_expression -> BIN_CONST .)
    LSHIFT          reduce using rule 7 (primary_expression -> BIN_CONST .)
    RSHIFT          reduce using rule 7 (primary_expression -> BIN_CONST .)
    LESS            reduce using rule 7 (primary_expression -> BIN_CONST .)
    GREATER         reduce using rule 7 (primary_expression -> BIN_CONST .)
    LESSEQUAL       reduce using rule 7 (primary_expression -> BIN_CONST .)
    GREATEREQUAL    reduce using rule 7 (primary_expression -> BIN_CONST .)
    EQUAL           reduce using rule 7 (primary_expression -> BIN_CONST .)
    NOTEQUAL        reduce using rule 7 (primary_expression -> BIN_CONST .)
    AND             reduce using rule 7 (primary_expression -> BIN_CONST .)
    XOR             reduce using rule 7 (primary_expression -> BIN_CONST .)
    OR              reduce using rule 7 (primary_expression -> BIN_CONST .)
    LAND            reduce using rule 7 (primary_expression -> BIN_CONST .)
    CONDOP          reduce using rule 7 (primary_expression -> BIN_CONST .)
    LOR             reduce using rule 7 (primary_expression -> BIN_CONST .)
    SEMICOLON       reduce using rule 7 (primary_expression -> BIN_CONST .)
    COMMA           reduce using rule 7 (primary_expression -> BIN_CONST .)
    RSQUAREBRACKET  reduce using rule 7 (primary_expression -> BIN_CONST .)
    COLON           reduce using rule 7 (primary_expression -> BIN_CONST .)
    RPAREN          reduce using rule 7 (primary_expression -> BIN_CONST .)
    RCURLYBRACKET   reduce using rule 7 (primary_expression -> BIN_CONST .)


state 119

    (8) primary_expression -> STRING_LITERAL .

    LSQUAREBRACKET  reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    LPAREN          reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    PERIOD          reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    ARROW           reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    INCREMENT       reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    DECREMENT       reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    EQUALS          reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    MULTIPLYEQUAL   reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    DIVIDEEQUAL     reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    MODEQUAL        reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    PLUSEQUAL       reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    MINUSEQUAL      reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    ANDEQUAL        reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    XOREQUAL        reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    OREQUAL         reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    MULTIPLY        reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    DIVIDE          reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    MOD             reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    PLUS            reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    MINUS           reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    LSHIFT          reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    RSHIFT          reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    LESS            reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    GREATER         reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    LESSEQUAL       reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    GREATEREQUAL    reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    EQUAL           reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    NOTEQUAL        reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    AND             reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    XOR             reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    OR              reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    LAND            reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    CONDOP          reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    LOR             reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    COMMA           reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    RSQUAREBRACKET  reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    COLON           reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    RPAREN          reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    RCURLYBRACKET   reduce using rule 8 (primary_expression -> STRING_LITERAL .)


state 120

    (56) inclusive_or_expression -> exclusive_or_expression .
    (55) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR              reduce using rule 56 (inclusive_or_expression -> exclusive_or_expression .)
    LAND            reduce using rule 56 (inclusive_or_expression -> exclusive_or_expression .)
    CONDOP          reduce using rule 56 (inclusive_or_expression -> exclusive_or_expression .)
    LOR             reduce using rule 56 (inclusive_or_expression -> exclusive_or_expression .)
    SEMICOLON       reduce using rule 56 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 56 (inclusive_or_expression -> exclusive_or_expression .)
    RSQUAREBRACKET  reduce using rule 56 (inclusive_or_expression -> exclusive_or_expression .)
    COLON           reduce using rule 56 (inclusive_or_expression -> exclusive_or_expression .)
    RPAREN          reduce using rule 56 (inclusive_or_expression -> exclusive_or_expression .)
    RCURLYBRACKET   reduce using rule 56 (inclusive_or_expression -> exclusive_or_expression .)
    XOR             shift and go to state 209


state 121

    (54) exclusive_or_expression -> and_expression .
    (53) and_expression -> and_expression . AND equality_expression

    XOR             reduce using rule 54 (exclusive_or_expression -> and_expression .)
    OR              reduce using rule 54 (exclusive_or_expression -> and_expression .)
    LAND            reduce using rule 54 (exclusive_or_expression -> and_expression .)
    CONDOP          reduce using rule 54 (exclusive_or_expression -> and_expression .)
    LOR             reduce using rule 54 (exclusive_or_expression -> and_expression .)
    SEMICOLON       reduce using rule 54 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 54 (exclusive_or_expression -> and_expression .)
    RSQUAREBRACKET  reduce using rule 54 (exclusive_or_expression -> and_expression .)
    COLON           reduce using rule 54 (exclusive_or_expression -> and_expression .)
    RPAREN          reduce using rule 54 (exclusive_or_expression -> and_expression .)
    RCURLYBRACKET   reduce using rule 54 (exclusive_or_expression -> and_expression .)
    AND             shift and go to state 210


state 122

    (52) and_expression -> equality_expression .
    (50) equality_expression -> equality_expression . EQUAL relational_expression
    (51) equality_expression -> equality_expression . NOTEQUAL relational_expression

    AND             reduce using rule 52 (and_expression -> equality_expression .)
    XOR             reduce using rule 52 (and_expression -> equality_expression .)
    OR              reduce using rule 52 (and_expression -> equality_expression .)
    LAND            reduce using rule 52 (and_expression -> equality_expression .)
    CONDOP          reduce using rule 52 (and_expression -> equality_expression .)
    LOR             reduce using rule 52 (and_expression -> equality_expression .)
    SEMICOLON       reduce using rule 52 (and_expression -> equality_expression .)
    COMMA           reduce using rule 52 (and_expression -> equality_expression .)
    RSQUAREBRACKET  reduce using rule 52 (and_expression -> equality_expression .)
    COLON           reduce using rule 52 (and_expression -> equality_expression .)
    RPAREN          reduce using rule 52 (and_expression -> equality_expression .)
    RCURLYBRACKET   reduce using rule 52 (and_expression -> equality_expression .)
    EQUAL           shift and go to state 211
    NOTEQUAL        shift and go to state 212


state 123

    (49) equality_expression -> relational_expression .
    (45) relational_expression -> relational_expression . LESS shift_expression
    (46) relational_expression -> relational_expression . GREATER shift_expression
    (47) relational_expression -> relational_expression . LESSEQUAL shift_expression
    (48) relational_expression -> relational_expression . GREATEREQUAL shift_expression

    EQUAL           reduce using rule 49 (equality_expression -> relational_expression .)
    NOTEQUAL        reduce using rule 49 (equality_expression -> relational_expression .)
    AND             reduce using rule 49 (equality_expression -> relational_expression .)
    XOR             reduce using rule 49 (equality_expression -> relational_expression .)
    OR              reduce using rule 49 (equality_expression -> relational_expression .)
    LAND            reduce using rule 49 (equality_expression -> relational_expression .)
    CONDOP          reduce using rule 49 (equality_expression -> relational_expression .)
    LOR             reduce using rule 49 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 49 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 49 (equality_expression -> relational_expression .)
    RSQUAREBRACKET  reduce using rule 49 (equality_expression -> relational_expression .)
    COLON           reduce using rule 49 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 49 (equality_expression -> relational_expression .)
    RCURLYBRACKET   reduce using rule 49 (equality_expression -> relational_expression .)
    LESS            shift and go to state 213
    GREATER         shift and go to state 214
    LESSEQUAL       shift and go to state 215
    GREATEREQUAL    shift and go to state 216


state 124

    (44) relational_expression -> shift_expression .
    (42) shift_expression -> shift_expression . LSHIFT additive_expression
    (43) shift_expression -> shift_expression . RSHIFT additive_expression

    LESS            reduce using rule 44 (relational_expression -> shift_expression .)
    GREATER         reduce using rule 44 (relational_expression -> shift_expression .)
    LESSEQUAL       reduce using rule 44 (relational_expression -> shift_expression .)
    GREATEREQUAL    reduce using rule 44 (relational_expression -> shift_expression .)
    EQUAL           reduce using rule 44 (relational_expression -> shift_expression .)
    NOTEQUAL        reduce using rule 44 (relational_expression -> shift_expression .)
    AND             reduce using rule 44 (relational_expression -> shift_expression .)
    XOR             reduce using rule 44 (relational_expression -> shift_expression .)
    OR              reduce using rule 44 (relational_expression -> shift_expression .)
    LAND            reduce using rule 44 (relational_expression -> shift_expression .)
    CONDOP          reduce using rule 44 (relational_expression -> shift_expression .)
    LOR             reduce using rule 44 (relational_expression -> shift_expression .)
    SEMICOLON       reduce using rule 44 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 44 (relational_expression -> shift_expression .)
    RSQUAREBRACKET  reduce using rule 44 (relational_expression -> shift_expression .)
    COLON           reduce using rule 44 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 44 (relational_expression -> shift_expression .)
    RCURLYBRACKET   reduce using rule 44 (relational_expression -> shift_expression .)
    LSHIFT          shift and go to state 217
    RSHIFT          shift and go to state 218


state 125

    (41) shift_expression -> additive_expression .
    (39) additive_expression -> additive_expression . PLUS multiplicative_expression
    (40) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 41 (shift_expression -> additive_expression .)
    RSHIFT          reduce using rule 41 (shift_expression -> additive_expression .)
    LESS            reduce using rule 41 (shift_expression -> additive_expression .)
    GREATER         reduce using rule 41 (shift_expression -> additive_expression .)
    LESSEQUAL       reduce using rule 41 (shift_expression -> additive_expression .)
    GREATEREQUAL    reduce using rule 41 (shift_expression -> additive_expression .)
    EQUAL           reduce using rule 41 (shift_expression -> additive_expression .)
    NOTEQUAL        reduce using rule 41 (shift_expression -> additive_expression .)
    AND             reduce using rule 41 (shift_expression -> additive_expression .)
    XOR             reduce using rule 41 (shift_expression -> additive_expression .)
    OR              reduce using rule 41 (shift_expression -> additive_expression .)
    LAND            reduce using rule 41 (shift_expression -> additive_expression .)
    CONDOP          reduce using rule 41 (shift_expression -> additive_expression .)
    LOR             reduce using rule 41 (shift_expression -> additive_expression .)
    SEMICOLON       reduce using rule 41 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 41 (shift_expression -> additive_expression .)
    RSQUAREBRACKET  reduce using rule 41 (shift_expression -> additive_expression .)
    COLON           reduce using rule 41 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 41 (shift_expression -> additive_expression .)
    RCURLYBRACKET   reduce using rule 41 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 219
    MINUS           shift and go to state 220


state 126

    (38) additive_expression -> multiplicative_expression .
    (35) multiplicative_expression -> multiplicative_expression . MULTIPLY cast_expression
    (36) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (37) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 38 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 38 (additive_expression -> multiplicative_expression .)
    LSHIFT          reduce using rule 38 (additive_expression -> multiplicative_expression .)
    RSHIFT          reduce using rule 38 (additive_expression -> multiplicative_expression .)
    LESS            reduce using rule 38 (additive_expression -> multiplicative_expression .)
    GREATER         reduce using rule 38 (additive_expression -> multiplicative_expression .)
    LESSEQUAL       reduce using rule 38 (additive_expression -> multiplicative_expression .)
    GREATEREQUAL    reduce using rule 38 (additive_expression -> multiplicative_expression .)
    EQUAL           reduce using rule 38 (additive_expression -> multiplicative_expression .)
    NOTEQUAL        reduce using rule 38 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 38 (additive_expression -> multiplicative_expression .)
    XOR             reduce using rule 38 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 38 (additive_expression -> multiplicative_expression .)
    LAND            reduce using rule 38 (additive_expression -> multiplicative_expression .)
    CONDOP          reduce using rule 38 (additive_expression -> multiplicative_expression .)
    LOR             reduce using rule 38 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 38 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 38 (additive_expression -> multiplicative_expression .)
    RSQUAREBRACKET  reduce using rule 38 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 38 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 38 (additive_expression -> multiplicative_expression .)
    RCURLYBRACKET   reduce using rule 38 (additive_expression -> multiplicative_expression .)
    MULTIPLY        shift and go to state 221
    DIVIDE          shift and go to state 222
    MOD             shift and go to state 223


state 127

    (90) init_declarator -> declarator .
    (91) init_declarator -> declarator . EQUALS initializer

    SEMICOLON       reduce using rule 90 (init_declarator -> declarator .)
    COMMA           reduce using rule 90 (init_declarator -> declarator .)
    EQUALS          shift and go to state 64


state 128

    (139) direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression . RSQUAREBRACKET

    RSQUAREBRACKET  shift and go to state 224


state 129

    (140) direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .

    LSQUAREBRACKET  reduce using rule 140 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    LPAREN          reduce using rule 140 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    LCURLYBRACKET   reduce using rule 140 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    TYPEDEF         reduce using rule 140 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    EXTERN          reduce using rule 140 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    STATIC          reduce using rule 140 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    AUTO            reduce using rule 140 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    REGISTER        reduce using rule 140 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    VOID            reduce using rule 140 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    CHAR            reduce using rule 140 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    SHORT           reduce using rule 140 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    INT             reduce using rule 140 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    LONG            reduce using rule 140 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    FLOAT           reduce using rule 140 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    DOUBLE          reduce using rule 140 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    SIGNED          reduce using rule 140 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    UNSIGNED        reduce using rule 140 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    TYPE_NAME       reduce using rule 140 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    CONST           reduce using rule 140 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    VOLATILE        reduce using rule 140 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    ENUM            reduce using rule 140 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    STRUCT          reduce using rule 140 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    UNION           reduce using rule 140 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    EQUALS          reduce using rule 140 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    SEMICOLON       reduce using rule 140 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    COMMA           reduce using rule 140 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    RPAREN          reduce using rule 140 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)
    COLON           reduce using rule 140 (direct_declarator -> direct_declarator LSQUAREBRACKET RSQUAREBRACKET .)


state 130

    (79) constant_expression -> conditional_expression .

    RSQUAREBRACKET  reduce using rule 79 (constant_expression -> conditional_expression .)
    COLON           reduce using rule 79 (constant_expression -> conditional_expression .)
    SEMICOLON       reduce using rule 79 (constant_expression -> conditional_expression .)
    COMMA           reduce using rule 79 (constant_expression -> conditional_expression .)
    RCURLYBRACKET   reduce using rule 79 (constant_expression -> conditional_expression .)
    RPAREN          reduce using rule 79 (constant_expression -> conditional_expression .)


state 131

    (32) cast_expression -> unary_expression .

    MULTIPLY        reduce using rule 32 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 32 (cast_expression -> unary_expression .)
    MOD             reduce using rule 32 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 32 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 32 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 32 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 32 (cast_expression -> unary_expression .)
    LESS            reduce using rule 32 (cast_expression -> unary_expression .)
    GREATER         reduce using rule 32 (cast_expression -> unary_expression .)
    LESSEQUAL       reduce using rule 32 (cast_expression -> unary_expression .)
    GREATEREQUAL    reduce using rule 32 (cast_expression -> unary_expression .)
    EQUAL           reduce using rule 32 (cast_expression -> unary_expression .)
    NOTEQUAL        reduce using rule 32 (cast_expression -> unary_expression .)
    AND             reduce using rule 32 (cast_expression -> unary_expression .)
    XOR             reduce using rule 32 (cast_expression -> unary_expression .)
    OR              reduce using rule 32 (cast_expression -> unary_expression .)
    LAND            reduce using rule 32 (cast_expression -> unary_expression .)
    CONDOP          reduce using rule 32 (cast_expression -> unary_expression .)
    LOR             reduce using rule 32 (cast_expression -> unary_expression .)
    RSQUAREBRACKET  reduce using rule 32 (cast_expression -> unary_expression .)
    COLON           reduce using rule 32 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 32 (cast_expression -> unary_expression .)
    MULTIPLYEQUAL   reduce using rule 32 (cast_expression -> unary_expression .)
    DIVIDEEQUAL     reduce using rule 32 (cast_expression -> unary_expression .)
    MODEQUAL        reduce using rule 32 (cast_expression -> unary_expression .)
    PLUSEQUAL       reduce using rule 32 (cast_expression -> unary_expression .)
    MINUSEQUAL      reduce using rule 32 (cast_expression -> unary_expression .)
    LSHIFTEQUAL     reduce using rule 32 (cast_expression -> unary_expression .)
    RSHIFTEQUAL     reduce using rule 32 (cast_expression -> unary_expression .)
    ANDEQUAL        reduce using rule 32 (cast_expression -> unary_expression .)
    XOREQUAL        reduce using rule 32 (cast_expression -> unary_expression .)
    OREQUAL         reduce using rule 32 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 32 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 32 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 32 (cast_expression -> unary_expression .)
    RCURLYBRACKET   reduce using rule 32 (cast_expression -> unary_expression .)


state 132

    (33) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (9) primary_expression -> LPAREN . expression RPAREN
    (159) type_name -> . specifier_qualifier_list
    (160) type_name -> . specifier_qualifier_list abstract_declarator
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (117) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (118) specifier_qualifier_list -> . type_specifier
    (119) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (120) specifier_qualifier_list -> . type_qualifier
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (97) type_specifier -> . VOID
    (98) type_specifier -> . CHAR
    (99) type_specifier -> . SHORT
    (100) type_specifier -> . INT
    (101) type_specifier -> . LONG
    (102) type_specifier -> . FLOAT
    (103) type_specifier -> . DOUBLE
    (104) type_specifier -> . SIGNED
    (105) type_specifier -> . UNSIGNED
    (106) type_specifier -> . struct_or_union_specifier
    (107) type_specifier -> . enum_specifier
    (108) type_specifier -> . TYPE_NAME
    (133) type_qualifier -> . CONST
    (134) type_qualifier -> . VOLATILE
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (109) struct_or_union_specifier -> . struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (110) struct_or_union_specifier -> . struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (111) struct_or_union_specifier -> . struct_or_union ID
    (126) enum_specifier -> . ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET
    (127) enum_specifier -> . ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET
    (128) enum_specifier -> . ENUM ID
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (112) struct_or_union -> . STRUCT
    (113) struct_or_union -> . UNION
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    TYPE_NAME       shift and go to state 28
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    ENUM            shift and go to state 35
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    type_name                      shift and go to state 170
    cast_expression                shift and go to state 102
    expression                     shift and go to state 169
    specifier_qualifier_list       shift and go to state 171
    assignment_expression          shift and go to state 94
    type_specifier                 shift and go to state 148
    type_qualifier                 shift and go to state 149
    conditional_expression         shift and go to state 95
    unary_expression               shift and go to state 96
    struct_or_union_specifier      shift and go to state 26
    enum_specifier                 shift and go to state 27
    logical_or_expression          shift and go to state 97
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    struct_or_union                shift and go to state 34
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 133

    (1) primary_expression -> ID .

    LSQUAREBRACKET  reduce using rule 1 (primary_expression -> ID .)
    LPAREN          reduce using rule 1 (primary_expression -> ID .)
    PERIOD          reduce using rule 1 (primary_expression -> ID .)
    ARROW           reduce using rule 1 (primary_expression -> ID .)
    INCREMENT       reduce using rule 1 (primary_expression -> ID .)
    DECREMENT       reduce using rule 1 (primary_expression -> ID .)
    MULTIPLY        reduce using rule 1 (primary_expression -> ID .)
    DIVIDE          reduce using rule 1 (primary_expression -> ID .)
    MOD             reduce using rule 1 (primary_expression -> ID .)
    PLUS            reduce using rule 1 (primary_expression -> ID .)
    MINUS           reduce using rule 1 (primary_expression -> ID .)
    LSHIFT          reduce using rule 1 (primary_expression -> ID .)
    RSHIFT          reduce using rule 1 (primary_expression -> ID .)
    LESS            reduce using rule 1 (primary_expression -> ID .)
    GREATER         reduce using rule 1 (primary_expression -> ID .)
    LESSEQUAL       reduce using rule 1 (primary_expression -> ID .)
    GREATEREQUAL    reduce using rule 1 (primary_expression -> ID .)
    EQUAL           reduce using rule 1 (primary_expression -> ID .)
    NOTEQUAL        reduce using rule 1 (primary_expression -> ID .)
    AND             reduce using rule 1 (primary_expression -> ID .)
    XOR             reduce using rule 1 (primary_expression -> ID .)
    OR              reduce using rule 1 (primary_expression -> ID .)
    LAND            reduce using rule 1 (primary_expression -> ID .)
    CONDOP          reduce using rule 1 (primary_expression -> ID .)
    LOR             reduce using rule 1 (primary_expression -> ID .)
    RSQUAREBRACKET  reduce using rule 1 (primary_expression -> ID .)
    EQUALS          reduce using rule 1 (primary_expression -> ID .)
    MULTIPLYEQUAL   reduce using rule 1 (primary_expression -> ID .)
    DIVIDEEQUAL     reduce using rule 1 (primary_expression -> ID .)
    MODEQUAL        reduce using rule 1 (primary_expression -> ID .)
    PLUSEQUAL       reduce using rule 1 (primary_expression -> ID .)
    MINUSEQUAL      reduce using rule 1 (primary_expression -> ID .)
    LSHIFTEQUAL     reduce using rule 1 (primary_expression -> ID .)
    RSHIFTEQUAL     reduce using rule 1 (primary_expression -> ID .)
    ANDEQUAL        reduce using rule 1 (primary_expression -> ID .)
    XOREQUAL        reduce using rule 1 (primary_expression -> ID .)
    OREQUAL         reduce using rule 1 (primary_expression -> ID .)
    SEMICOLON       reduce using rule 1 (primary_expression -> ID .)
    COMMA           reduce using rule 1 (primary_expression -> ID .)
    COLON           reduce using rule 1 (primary_expression -> ID .)
    RPAREN          reduce using rule 1 (primary_expression -> ID .)
    RCURLYBRACKET   reduce using rule 1 (primary_expression -> ID .)


state 134

    (141) direct_declarator -> direct_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 225


state 135

    (143) direct_declarator -> direct_declarator LPAREN RPAREN .

    LSQUAREBRACKET  reduce using rule 143 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LPAREN          reduce using rule 143 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LCURLYBRACKET   reduce using rule 143 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    TYPEDEF         reduce using rule 143 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    EXTERN          reduce using rule 143 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    STATIC          reduce using rule 143 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    AUTO            reduce using rule 143 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    REGISTER        reduce using rule 143 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    VOID            reduce using rule 143 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    CHAR            reduce using rule 143 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SHORT           reduce using rule 143 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    INT             reduce using rule 143 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LONG            reduce using rule 143 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    FLOAT           reduce using rule 143 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    DOUBLE          reduce using rule 143 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SIGNED          reduce using rule 143 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    UNSIGNED        reduce using rule 143 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    TYPE_NAME       reduce using rule 143 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    CONST           reduce using rule 143 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    VOLATILE        reduce using rule 143 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    ENUM            reduce using rule 143 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    STRUCT          reduce using rule 143 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    UNION           reduce using rule 143 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    EQUALS          reduce using rule 143 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SEMICOLON       reduce using rule 143 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    COMMA           reduce using rule 143 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    RPAREN          reduce using rule 143 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    COLON           reduce using rule 143 (direct_declarator -> direct_declarator LPAREN RPAREN .)


state 136

    (142) direct_declarator -> direct_declarator LPAREN identifier_list . RPAREN
    (158) identifier_list -> identifier_list . COMMA ID

    RPAREN          shift and go to state 226
    COMMA           shift and go to state 227


state 137

    (150) parameter_type_list -> parameter_list .
    (151) parameter_type_list -> parameter_list . COMMA ELLIPSIS
    (153) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          reduce using rule 150 (parameter_type_list -> parameter_list .)
    COMMA           shift and go to state 228


state 138

    (157) identifier_list -> ID .

    RPAREN          reduce using rule 157 (identifier_list -> ID .)
    COMMA           reduce using rule 157 (identifier_list -> ID .)


state 139

    (152) parameter_list -> parameter_declaration .

    COMMA           reduce using rule 152 (parameter_list -> parameter_declaration .)
    RPAREN          reduce using rule 152 (parameter_list -> parameter_declaration .)


state 140

    (154) parameter_declaration -> declaration_specifiers . declarator
    (155) parameter_declaration -> declaration_specifiers . abstract_declarator
    (156) parameter_declaration -> declaration_specifiers .
    (135) declarator -> . pointer direct_declarator
    (136) declarator -> . direct_declarator
    (161) abstract_declarator -> . pointer
    (162) abstract_declarator -> . direct_abstract_declarator
    (163) abstract_declarator -> . pointer direct_abstract_declarator
    (144) pointer -> . MULTIPLY
    (145) pointer -> . MULTIPLY type_qualifier_list
    (146) pointer -> . MULTIPLY pointer
    (147) pointer -> . MULTIPLY type_qualifier_list pointer
    (137) direct_declarator -> . ID
    (138) direct_declarator -> . LPAREN declarator RPAREN
    (139) direct_declarator -> . direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (140) direct_declarator -> . direct_declarator LSQUAREBRACKET RSQUAREBRACKET
    (141) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (142) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (143) direct_declarator -> . direct_declarator LPAREN RPAREN
    (164) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (165) direct_abstract_declarator -> . LSQUAREBRACKET RSQUAREBRACKET
    (166) direct_abstract_declarator -> . LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (167) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (168) direct_abstract_declarator -> . direct_abstract_declarator LPAREN constant_expression RPAREN
    (169) direct_abstract_declarator -> . LPAREN RPAREN
    (170) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (171) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

    COMMA           reduce using rule 156 (parameter_declaration -> declaration_specifiers .)
    RPAREN          reduce using rule 156 (parameter_declaration -> declaration_specifiers .)
    MULTIPLY        shift and go to state 31
    ID              shift and go to state 32
    LPAREN          shift and go to state 233
    LSQUAREBRACKET  shift and go to state 234

    declarator                     shift and go to state 229
    abstract_declarator            shift and go to state 230
    pointer                        shift and go to state 231
    direct_declarator              shift and go to state 11
    direct_abstract_declarator     shift and go to state 232

state 141

    (147) pointer -> MULTIPLY type_qualifier_list pointer .

    ID              reduce using rule 147 (pointer -> MULTIPLY type_qualifier_list pointer .)
    LPAREN          reduce using rule 147 (pointer -> MULTIPLY type_qualifier_list pointer .)
    LSQUAREBRACKET  reduce using rule 147 (pointer -> MULTIPLY type_qualifier_list pointer .)
    COMMA           reduce using rule 147 (pointer -> MULTIPLY type_qualifier_list pointer .)
    RPAREN          reduce using rule 147 (pointer -> MULTIPLY type_qualifier_list pointer .)


state 142

    (149) type_qualifier_list -> type_qualifier_list type_qualifier .

    MULTIPLY        reduce using rule 149 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CONST           reduce using rule 149 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 149 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ID              reduce using rule 149 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LPAREN          reduce using rule 149 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LSQUAREBRACKET  reduce using rule 149 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    COMMA           reduce using rule 149 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RPAREN          reduce using rule 149 (type_qualifier_list -> type_qualifier_list type_qualifier .)


state 143

    (138) direct_declarator -> LPAREN declarator RPAREN .

    LSQUAREBRACKET  reduce using rule 138 (direct_declarator -> LPAREN declarator RPAREN .)
    LPAREN          reduce using rule 138 (direct_declarator -> LPAREN declarator RPAREN .)
    LCURLYBRACKET   reduce using rule 138 (direct_declarator -> LPAREN declarator RPAREN .)
    TYPEDEF         reduce using rule 138 (direct_declarator -> LPAREN declarator RPAREN .)
    EXTERN          reduce using rule 138 (direct_declarator -> LPAREN declarator RPAREN .)
    STATIC          reduce using rule 138 (direct_declarator -> LPAREN declarator RPAREN .)
    AUTO            reduce using rule 138 (direct_declarator -> LPAREN declarator RPAREN .)
    REGISTER        reduce using rule 138 (direct_declarator -> LPAREN declarator RPAREN .)
    VOID            reduce using rule 138 (direct_declarator -> LPAREN declarator RPAREN .)
    CHAR            reduce using rule 138 (direct_declarator -> LPAREN declarator RPAREN .)
    SHORT           reduce using rule 138 (direct_declarator -> LPAREN declarator RPAREN .)
    INT             reduce using rule 138 (direct_declarator -> LPAREN declarator RPAREN .)
    LONG            reduce using rule 138 (direct_declarator -> LPAREN declarator RPAREN .)
    FLOAT           reduce using rule 138 (direct_declarator -> LPAREN declarator RPAREN .)
    DOUBLE          reduce using rule 138 (direct_declarator -> LPAREN declarator RPAREN .)
    SIGNED          reduce using rule 138 (direct_declarator -> LPAREN declarator RPAREN .)
    UNSIGNED        reduce using rule 138 (direct_declarator -> LPAREN declarator RPAREN .)
    TYPE_NAME       reduce using rule 138 (direct_declarator -> LPAREN declarator RPAREN .)
    CONST           reduce using rule 138 (direct_declarator -> LPAREN declarator RPAREN .)
    VOLATILE        reduce using rule 138 (direct_declarator -> LPAREN declarator RPAREN .)
    ENUM            reduce using rule 138 (direct_declarator -> LPAREN declarator RPAREN .)
    STRUCT          reduce using rule 138 (direct_declarator -> LPAREN declarator RPAREN .)
    UNION           reduce using rule 138 (direct_declarator -> LPAREN declarator RPAREN .)
    EQUALS          reduce using rule 138 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMICOLON       reduce using rule 138 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 138 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 138 (direct_declarator -> LPAREN declarator RPAREN .)
    COLON           reduce using rule 138 (direct_declarator -> LPAREN declarator RPAREN .)


state 144

    (109) struct_or_union_specifier -> struct_or_union ID LCURLYBRACKET . struct_declaration_list RCURLYBRACKET
    (114) struct_declaration_list -> . struct_declaration
    (115) struct_declaration_list -> . struct_declaration_list struct_declaration
    (116) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMICOLON
    (117) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (118) specifier_qualifier_list -> . type_specifier
    (119) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (120) specifier_qualifier_list -> . type_qualifier
    (97) type_specifier -> . VOID
    (98) type_specifier -> . CHAR
    (99) type_specifier -> . SHORT
    (100) type_specifier -> . INT
    (101) type_specifier -> . LONG
    (102) type_specifier -> . FLOAT
    (103) type_specifier -> . DOUBLE
    (104) type_specifier -> . SIGNED
    (105) type_specifier -> . UNSIGNED
    (106) type_specifier -> . struct_or_union_specifier
    (107) type_specifier -> . enum_specifier
    (108) type_specifier -> . TYPE_NAME
    (133) type_qualifier -> . CONST
    (134) type_qualifier -> . VOLATILE
    (109) struct_or_union_specifier -> . struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (110) struct_or_union_specifier -> . struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (111) struct_or_union_specifier -> . struct_or_union ID
    (126) enum_specifier -> . ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET
    (127) enum_specifier -> . ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET
    (128) enum_specifier -> . ENUM ID
    (112) struct_or_union -> . STRUCT
    (113) struct_or_union -> . UNION

    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    TYPE_NAME       shift and go to state 28
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    struct_or_union                shift and go to state 34
    struct_declaration_list        shift and go to state 235
    struct_declaration             shift and go to state 146
    specifier_qualifier_list       shift and go to state 147
    type_specifier                 shift and go to state 148
    type_qualifier                 shift and go to state 149
    struct_or_union_specifier      shift and go to state 26
    enum_specifier                 shift and go to state 27

state 145

    (110) struct_or_union_specifier -> struct_or_union LCURLYBRACKET struct_declaration_list . RCURLYBRACKET
    (115) struct_declaration_list -> struct_declaration_list . struct_declaration
    (116) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMICOLON
    (117) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (118) specifier_qualifier_list -> . type_specifier
    (119) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (120) specifier_qualifier_list -> . type_qualifier
    (97) type_specifier -> . VOID
    (98) type_specifier -> . CHAR
    (99) type_specifier -> . SHORT
    (100) type_specifier -> . INT
    (101) type_specifier -> . LONG
    (102) type_specifier -> . FLOAT
    (103) type_specifier -> . DOUBLE
    (104) type_specifier -> . SIGNED
    (105) type_specifier -> . UNSIGNED
    (106) type_specifier -> . struct_or_union_specifier
    (107) type_specifier -> . enum_specifier
    (108) type_specifier -> . TYPE_NAME
    (133) type_qualifier -> . CONST
    (134) type_qualifier -> . VOLATILE
    (109) struct_or_union_specifier -> . struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (110) struct_or_union_specifier -> . struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (111) struct_or_union_specifier -> . struct_or_union ID
    (126) enum_specifier -> . ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET
    (127) enum_specifier -> . ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET
    (128) enum_specifier -> . ENUM ID
    (112) struct_or_union -> . STRUCT
    (113) struct_or_union -> . UNION

    RCURLYBRACKET   shift and go to state 236
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    TYPE_NAME       shift and go to state 28
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    struct_or_union                shift and go to state 34
    struct_declaration             shift and go to state 237
    specifier_qualifier_list       shift and go to state 147
    type_specifier                 shift and go to state 148
    type_qualifier                 shift and go to state 149
    struct_or_union_specifier      shift and go to state 26
    enum_specifier                 shift and go to state 27

state 146

    (114) struct_declaration_list -> struct_declaration .

    RCURLYBRACKET   reduce using rule 114 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 114 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 114 (struct_declaration_list -> struct_declaration .)
    SHORT           reduce using rule 114 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 114 (struct_declaration_list -> struct_declaration .)
    LONG            reduce using rule 114 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 114 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 114 (struct_declaration_list -> struct_declaration .)
    SIGNED          reduce using rule 114 (struct_declaration_list -> struct_declaration .)
    UNSIGNED        reduce using rule 114 (struct_declaration_list -> struct_declaration .)
    TYPE_NAME       reduce using rule 114 (struct_declaration_list -> struct_declaration .)
    CONST           reduce using rule 114 (struct_declaration_list -> struct_declaration .)
    VOLATILE        reduce using rule 114 (struct_declaration_list -> struct_declaration .)
    ENUM            reduce using rule 114 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 114 (struct_declaration_list -> struct_declaration .)
    UNION           reduce using rule 114 (struct_declaration_list -> struct_declaration .)


state 147

    (116) struct_declaration -> specifier_qualifier_list . struct_declarator_list SEMICOLON
    (121) struct_declarator_list -> . struct_declarator
    (122) struct_declarator_list -> . struct_declarator_list COMMA struct_declarator
    (123) struct_declarator -> . declarator
    (124) struct_declarator -> . COLON constant_expression
    (125) struct_declarator -> . declarator COLON constant_expression
    (135) declarator -> . pointer direct_declarator
    (136) declarator -> . direct_declarator
    (144) pointer -> . MULTIPLY
    (145) pointer -> . MULTIPLY type_qualifier_list
    (146) pointer -> . MULTIPLY pointer
    (147) pointer -> . MULTIPLY type_qualifier_list pointer
    (137) direct_declarator -> . ID
    (138) direct_declarator -> . LPAREN declarator RPAREN
    (139) direct_declarator -> . direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (140) direct_declarator -> . direct_declarator LSQUAREBRACKET RSQUAREBRACKET
    (141) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (142) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (143) direct_declarator -> . direct_declarator LPAREN RPAREN

    COLON           shift and go to state 241
    MULTIPLY        shift and go to state 31
    ID              shift and go to state 32
    LPAREN          shift and go to state 33

    struct_declarator_list         shift and go to state 238
    struct_declarator              shift and go to state 239
    declarator                     shift and go to state 240
    pointer                        shift and go to state 10
    direct_declarator              shift and go to state 11

state 148

    (117) specifier_qualifier_list -> type_specifier . specifier_qualifier_list
    (118) specifier_qualifier_list -> type_specifier .
    (117) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (118) specifier_qualifier_list -> . type_specifier
    (119) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (120) specifier_qualifier_list -> . type_qualifier
    (97) type_specifier -> . VOID
    (98) type_specifier -> . CHAR
    (99) type_specifier -> . SHORT
    (100) type_specifier -> . INT
    (101) type_specifier -> . LONG
    (102) type_specifier -> . FLOAT
    (103) type_specifier -> . DOUBLE
    (104) type_specifier -> . SIGNED
    (105) type_specifier -> . UNSIGNED
    (106) type_specifier -> . struct_or_union_specifier
    (107) type_specifier -> . enum_specifier
    (108) type_specifier -> . TYPE_NAME
    (133) type_qualifier -> . CONST
    (134) type_qualifier -> . VOLATILE
    (109) struct_or_union_specifier -> . struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (110) struct_or_union_specifier -> . struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (111) struct_or_union_specifier -> . struct_or_union ID
    (126) enum_specifier -> . ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET
    (127) enum_specifier -> . ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET
    (128) enum_specifier -> . ENUM ID
    (112) struct_or_union -> . STRUCT
    (113) struct_or_union -> . UNION

    COLON           reduce using rule 118 (specifier_qualifier_list -> type_specifier .)
    MULTIPLY        reduce using rule 118 (specifier_qualifier_list -> type_specifier .)
    ID              reduce using rule 118 (specifier_qualifier_list -> type_specifier .)
    LPAREN          reduce using rule 118 (specifier_qualifier_list -> type_specifier .)
    LSQUAREBRACKET  reduce using rule 118 (specifier_qualifier_list -> type_specifier .)
    RPAREN          reduce using rule 118 (specifier_qualifier_list -> type_specifier .)
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    TYPE_NAME       shift and go to state 28
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    type_specifier                 shift and go to state 148
    specifier_qualifier_list       shift and go to state 242
    type_qualifier                 shift and go to state 149
    struct_or_union_specifier      shift and go to state 26
    enum_specifier                 shift and go to state 27
    struct_or_union                shift and go to state 34

state 149

    (119) specifier_qualifier_list -> type_qualifier . specifier_qualifier_list
    (120) specifier_qualifier_list -> type_qualifier .
    (117) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (118) specifier_qualifier_list -> . type_specifier
    (119) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (120) specifier_qualifier_list -> . type_qualifier
    (97) type_specifier -> . VOID
    (98) type_specifier -> . CHAR
    (99) type_specifier -> . SHORT
    (100) type_specifier -> . INT
    (101) type_specifier -> . LONG
    (102) type_specifier -> . FLOAT
    (103) type_specifier -> . DOUBLE
    (104) type_specifier -> . SIGNED
    (105) type_specifier -> . UNSIGNED
    (106) type_specifier -> . struct_or_union_specifier
    (107) type_specifier -> . enum_specifier
    (108) type_specifier -> . TYPE_NAME
    (133) type_qualifier -> . CONST
    (134) type_qualifier -> . VOLATILE
    (109) struct_or_union_specifier -> . struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (110) struct_or_union_specifier -> . struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (111) struct_or_union_specifier -> . struct_or_union ID
    (126) enum_specifier -> . ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET
    (127) enum_specifier -> . ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET
    (128) enum_specifier -> . ENUM ID
    (112) struct_or_union -> . STRUCT
    (113) struct_or_union -> . UNION

    COLON           reduce using rule 120 (specifier_qualifier_list -> type_qualifier .)
    MULTIPLY        reduce using rule 120 (specifier_qualifier_list -> type_qualifier .)
    ID              reduce using rule 120 (specifier_qualifier_list -> type_qualifier .)
    LPAREN          reduce using rule 120 (specifier_qualifier_list -> type_qualifier .)
    LSQUAREBRACKET  reduce using rule 120 (specifier_qualifier_list -> type_qualifier .)
    RPAREN          reduce using rule 120 (specifier_qualifier_list -> type_qualifier .)
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    TYPE_NAME       shift and go to state 28
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    type_qualifier                 shift and go to state 149
    specifier_qualifier_list       shift and go to state 243
    type_specifier                 shift and go to state 148
    struct_or_union_specifier      shift and go to state 26
    enum_specifier                 shift and go to state 27
    struct_or_union                shift and go to state 34

state 150

    (126) enum_specifier -> ENUM LCURLYBRACKET enumerator_list . RCURLYBRACKET
    (130) enumerator_list -> enumerator_list . COMMA enumerator

    RCURLYBRACKET   shift and go to state 244
    COMMA           shift and go to state 245


state 151

    (129) enumerator_list -> enumerator .

    RCURLYBRACKET   reduce using rule 129 (enumerator_list -> enumerator .)
    COMMA           reduce using rule 129 (enumerator_list -> enumerator .)


state 152

    (131) enumerator -> ID .
    (132) enumerator -> ID . EQUALS constant_expression

    RCURLYBRACKET   reduce using rule 131 (enumerator -> ID .)
    COMMA           reduce using rule 131 (enumerator -> ID .)
    EQUALS          shift and go to state 246


state 153

    (127) enum_specifier -> ENUM ID LCURLYBRACKET . enumerator_list RCURLYBRACKET
    (129) enumerator_list -> . enumerator
    (130) enumerator_list -> . enumerator_list COMMA enumerator
    (131) enumerator -> . ID
    (132) enumerator -> . ID EQUALS constant_expression

    ID              shift and go to state 152

    enumerator_list                shift and go to state 247
    enumerator                     shift and go to state 151

state 154

    (212) function_definition -> declaration_specifiers declarator declaration_list compound_statement .

    TYPEDEF         reduce using rule 212 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    EXTERN          reduce using rule 212 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STATIC          reduce using rule 212 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    AUTO            reduce using rule 212 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    REGISTER        reduce using rule 212 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOID            reduce using rule 212 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CHAR            reduce using rule 212 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SHORT           reduce using rule 212 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    INT             reduce using rule 212 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    LONG            reduce using rule 212 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    FLOAT           reduce using rule 212 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    DOUBLE          reduce using rule 212 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SIGNED          reduce using rule 212 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNSIGNED        reduce using rule 212 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    TYPE_NAME       reduce using rule 212 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CONST           reduce using rule 212 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOLATILE        reduce using rule 212 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    MULTIPLY        reduce using rule 212 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    ID              reduce using rule 212 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    LPAREN          reduce using rule 212 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    ENUM            reduce using rule 212 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 212 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNION           reduce using rule 212 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    $end            reduce using rule 212 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)


state 155

    (91) init_declarator -> declarator EQUALS initializer .

    SEMICOLON       reduce using rule 91 (init_declarator -> declarator EQUALS initializer .)
    COMMA           reduce using rule 91 (init_declarator -> declarator EQUALS initializer .)


state 156

    (172) initializer -> assignment_expression .

    SEMICOLON       reduce using rule 172 (initializer -> assignment_expression .)
    COMMA           reduce using rule 172 (initializer -> assignment_expression .)
    RCURLYBRACKET   reduce using rule 172 (initializer -> assignment_expression .)


state 157

    (173) initializer -> LCURLYBRACKET . initializer_list RCURLYBRACKET
    (174) initializer -> LCURLYBRACKET . initializer_list COMMA RCURLYBRACKET
    (175) initializer_list -> . initializer
    (176) initializer_list -> . initializer_list COMMA initializer
    (172) initializer -> . assignment_expression
    (173) initializer -> . LCURLYBRACKET initializer_list RCURLYBRACKET
    (174) initializer -> . LCURLYBRACKET initializer_list COMMA RCURLYBRACKET
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LCURLYBRACKET   shift and go to state 157
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    initializer_list               shift and go to state 248
    initializer                    shift and go to state 249
    assignment_expression          shift and go to state 156
    conditional_expression         shift and go to state 95
    unary_expression               shift and go to state 96
    logical_or_expression          shift and go to state 97
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 158

    (89) init_declarator_list -> init_declarator_list COMMA init_declarator .

    SEMICOLON       reduce using rule 89 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 89 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 159

    (187) compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .

    TYPEDEF         reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    EXTERN          reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    STATIC          reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    AUTO            reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    REGISTER        reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    VOID            reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    CHAR            reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    SHORT           reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    INT             reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    LONG            reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    FLOAT           reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    DOUBLE          reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    SIGNED          reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    UNSIGNED        reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    TYPE_NAME       reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    CONST           reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    VOLATILE        reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    MULTIPLY        reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    ID              reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    LPAREN          reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    ENUM            reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    STRUCT          reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    UNION           reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    $end            reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    RCURLYBRACKET   reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    CASE            reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    DEFAULT         reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    LCURLYBRACKET   reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    SEMICOLON       reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    IF              reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    SWITCH          reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    WHILE           reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    DO              reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    FOR             reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    GOTO            reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    CONTINUE        reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    BREAK           reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    RETURN          reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    INCREMENT       reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    DECREMENT       reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    SIZEOF          reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    AND             reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    PLUS            reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    MINUS           reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    NOT             reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    LNOT            reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    CHAR_CONST      reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    INT_CONST       reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    FLOAT_CONST     reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    OCTAL_CONST     reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    HEX_CONST       reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    BIN_CONST       reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    STRING_LITERAL  reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)
    ELSE            reduce using rule 187 (compound_statement -> LCURLYBRACKET statement_list RCURLYBRACKET .)


state 160

    (193) statement_list -> statement_list statement .

    RCURLYBRACKET   reduce using rule 193 (statement_list -> statement_list statement .)
    ID              reduce using rule 193 (statement_list -> statement_list statement .)
    CASE            reduce using rule 193 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 193 (statement_list -> statement_list statement .)
    LCURLYBRACKET   reduce using rule 193 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 193 (statement_list -> statement_list statement .)
    IF              reduce using rule 193 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 193 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 193 (statement_list -> statement_list statement .)
    DO              reduce using rule 193 (statement_list -> statement_list statement .)
    FOR             reduce using rule 193 (statement_list -> statement_list statement .)
    GOTO            reduce using rule 193 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 193 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 193 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 193 (statement_list -> statement_list statement .)
    INCREMENT       reduce using rule 193 (statement_list -> statement_list statement .)
    DECREMENT       reduce using rule 193 (statement_list -> statement_list statement .)
    SIZEOF          reduce using rule 193 (statement_list -> statement_list statement .)
    AND             reduce using rule 193 (statement_list -> statement_list statement .)
    MULTIPLY        reduce using rule 193 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 193 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 193 (statement_list -> statement_list statement .)
    NOT             reduce using rule 193 (statement_list -> statement_list statement .)
    LNOT            reduce using rule 193 (statement_list -> statement_list statement .)
    CHAR_CONST      reduce using rule 193 (statement_list -> statement_list statement .)
    INT_CONST       reduce using rule 193 (statement_list -> statement_list statement .)
    FLOAT_CONST     reduce using rule 193 (statement_list -> statement_list statement .)
    OCTAL_CONST     reduce using rule 193 (statement_list -> statement_list statement .)
    HEX_CONST       reduce using rule 193 (statement_list -> statement_list statement .)
    BIN_CONST       reduce using rule 193 (statement_list -> statement_list statement .)
    STRING_LITERAL  reduce using rule 193 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 193 (statement_list -> statement_list statement .)


state 161

    (188) compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .

    TYPEDEF         reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    EXTERN          reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    STATIC          reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    AUTO            reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    REGISTER        reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    VOID            reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    CHAR            reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    SHORT           reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    INT             reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    LONG            reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    FLOAT           reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    DOUBLE          reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    SIGNED          reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    UNSIGNED        reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    TYPE_NAME       reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    CONST           reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    VOLATILE        reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    MULTIPLY        reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    ID              reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    LPAREN          reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    ENUM            reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    STRUCT          reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    UNION           reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    $end            reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    RCURLYBRACKET   reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    CASE            reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    DEFAULT         reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    LCURLYBRACKET   reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    SEMICOLON       reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    IF              reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    SWITCH          reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    WHILE           reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    DO              reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    FOR             reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    GOTO            reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    CONTINUE        reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    BREAK           reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    RETURN          reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    INCREMENT       reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    DECREMENT       reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    SIZEOF          reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    AND             reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    PLUS            reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    MINUS           reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    NOT             reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    LNOT            reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    CHAR_CONST      reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    INT_CONST       reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    FLOAT_CONST     reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    OCTAL_CONST     reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    HEX_CONST       reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    BIN_CONST       reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    STRING_LITERAL  reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)
    ELSE            reduce using rule 188 (compound_statement -> LCURLYBRACKET declaration_list RCURLYBRACKET .)


state 162

    (189) compound_statement -> LCURLYBRACKET declaration_list statement_list . RCURLYBRACKET
    (193) statement_list -> statement_list . statement
    (177) statement -> . labeled_statement
    (178) statement -> . compound_statement
    (179) statement -> . expression_statement
    (180) statement -> . selection_statement
    (181) statement -> . iteration_statement
    (182) statement -> . jump_statement
    (183) labeled_statement -> . ID COLON statement
    (184) labeled_statement -> . CASE constant_expression COLON statement
    (185) labeled_statement -> . DEFAULT COLON statement
    (186) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (187) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (188) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (189) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (194) expression_statement -> . SEMICOLON
    (195) expression_statement -> . expression SEMICOLON
    (196) selection_statement -> . IF LPAREN expression RPAREN statement
    (197) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (198) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (199) iteration_statement -> . WHILE LPAREN expression RPAREN
    (200) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (201) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (202) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (203) jump_statement -> . GOTO ID SEMICOLON
    (204) jump_statement -> . CONTINUE SEMICOLON
    (205) jump_statement -> . BREAK SEMICOLON
    (206) jump_statement -> . RETURN SEMICOLON
    (207) jump_statement -> . RETURN expression SEMICOLON
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCURLYBRACKET   shift and go to state 250
    ID              shift and go to state 80
    CASE            shift and go to state 81
    DEFAULT         shift and go to state 82
    LCURLYBRACKET   shift and go to state 46
    SEMICOLON       shift and go to state 79
    IF              shift and go to state 84
    SWITCH          shift and go to state 86
    WHILE           shift and go to state 87
    DO              shift and go to state 88
    FOR             shift and go to state 89
    GOTO            shift and go to state 90
    CONTINUE        shift and go to state 91
    BREAK           shift and go to state 92
    RETURN          shift and go to state 93
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    statement                      shift and go to state 160
    labeled_statement              shift and go to state 73
    compound_statement             shift and go to state 74
    expression_statement           shift and go to state 75
    selection_statement            shift and go to state 76
    iteration_statement            shift and go to state 77
    jump_statement                 shift and go to state 78
    expression                     shift and go to state 83
    assignment_expression          shift and go to state 94
    conditional_expression         shift and go to state 95
    unary_expression               shift and go to state 96
    logical_or_expression          shift and go to state 97
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 163

    (183) labeled_statement -> ID COLON . statement
    (177) statement -> . labeled_statement
    (178) statement -> . compound_statement
    (179) statement -> . expression_statement
    (180) statement -> . selection_statement
    (181) statement -> . iteration_statement
    (182) statement -> . jump_statement
    (183) labeled_statement -> . ID COLON statement
    (184) labeled_statement -> . CASE constant_expression COLON statement
    (185) labeled_statement -> . DEFAULT COLON statement
    (186) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (187) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (188) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (189) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (194) expression_statement -> . SEMICOLON
    (195) expression_statement -> . expression SEMICOLON
    (196) selection_statement -> . IF LPAREN expression RPAREN statement
    (197) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (198) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (199) iteration_statement -> . WHILE LPAREN expression RPAREN
    (200) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (201) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (202) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (203) jump_statement -> . GOTO ID SEMICOLON
    (204) jump_statement -> . CONTINUE SEMICOLON
    (205) jump_statement -> . BREAK SEMICOLON
    (206) jump_statement -> . RETURN SEMICOLON
    (207) jump_statement -> . RETURN expression SEMICOLON
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    ID              shift and go to state 80
    CASE            shift and go to state 81
    DEFAULT         shift and go to state 82
    LCURLYBRACKET   shift and go to state 46
    SEMICOLON       shift and go to state 79
    IF              shift and go to state 84
    SWITCH          shift and go to state 86
    WHILE           shift and go to state 87
    DO              shift and go to state 88
    FOR             shift and go to state 89
    GOTO            shift and go to state 90
    CONTINUE        shift and go to state 91
    BREAK           shift and go to state 92
    RETURN          shift and go to state 93
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    statement                      shift and go to state 251
    labeled_statement              shift and go to state 73
    compound_statement             shift and go to state 74
    expression_statement           shift and go to state 75
    selection_statement            shift and go to state 76
    iteration_statement            shift and go to state 77
    jump_statement                 shift and go to state 78
    expression                     shift and go to state 83
    assignment_expression          shift and go to state 94
    conditional_expression         shift and go to state 95
    unary_expression               shift and go to state 96
    logical_or_expression          shift and go to state 97
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 164

    (184) labeled_statement -> CASE constant_expression . COLON statement

    COLON           shift and go to state 252


state 165

    (185) labeled_statement -> DEFAULT COLON . statement
    (177) statement -> . labeled_statement
    (178) statement -> . compound_statement
    (179) statement -> . expression_statement
    (180) statement -> . selection_statement
    (181) statement -> . iteration_statement
    (182) statement -> . jump_statement
    (183) labeled_statement -> . ID COLON statement
    (184) labeled_statement -> . CASE constant_expression COLON statement
    (185) labeled_statement -> . DEFAULT COLON statement
    (186) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (187) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (188) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (189) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (194) expression_statement -> . SEMICOLON
    (195) expression_statement -> . expression SEMICOLON
    (196) selection_statement -> . IF LPAREN expression RPAREN statement
    (197) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (198) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (199) iteration_statement -> . WHILE LPAREN expression RPAREN
    (200) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (201) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (202) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (203) jump_statement -> . GOTO ID SEMICOLON
    (204) jump_statement -> . CONTINUE SEMICOLON
    (205) jump_statement -> . BREAK SEMICOLON
    (206) jump_statement -> . RETURN SEMICOLON
    (207) jump_statement -> . RETURN expression SEMICOLON
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    ID              shift and go to state 80
    CASE            shift and go to state 81
    DEFAULT         shift and go to state 82
    LCURLYBRACKET   shift and go to state 46
    SEMICOLON       shift and go to state 79
    IF              shift and go to state 84
    SWITCH          shift and go to state 86
    WHILE           shift and go to state 87
    DO              shift and go to state 88
    FOR             shift and go to state 89
    GOTO            shift and go to state 90
    CONTINUE        shift and go to state 91
    BREAK           shift and go to state 92
    RETURN          shift and go to state 93
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    statement                      shift and go to state 253
    labeled_statement              shift and go to state 73
    compound_statement             shift and go to state 74
    expression_statement           shift and go to state 75
    selection_statement            shift and go to state 76
    iteration_statement            shift and go to state 77
    jump_statement                 shift and go to state 78
    expression                     shift and go to state 83
    assignment_expression          shift and go to state 94
    conditional_expression         shift and go to state 95
    unary_expression               shift and go to state 96
    logical_or_expression          shift and go to state 97
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 166

    (195) expression_statement -> expression SEMICOLON .

    RCURLYBRACKET   reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    ID              reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    CASE            reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    DEFAULT         reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    LCURLYBRACKET   reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    SWITCH          reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    DO              reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    GOTO            reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    INCREMENT       reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    DECREMENT       reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    SIZEOF          reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    AND             reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    MULTIPLY        reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    PLUS            reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    MINUS           reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    NOT             reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    LNOT            reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    CHAR_CONST      reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    INT_CONST       reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    FLOAT_CONST     reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    OCTAL_CONST     reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    HEX_CONST       reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    BIN_CONST       reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    ELSE            reduce using rule 195 (expression_statement -> expression SEMICOLON .)
    RPAREN          reduce using rule 195 (expression_statement -> expression SEMICOLON .)


state 167

    (78) expression -> expression COMMA . assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    assignment_expression          shift and go to state 254
    conditional_expression         shift and go to state 95
    unary_expression               shift and go to state 96
    logical_or_expression          shift and go to state 97
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 168

    (196) selection_statement -> IF LPAREN . expression RPAREN statement
    (197) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    expression                     shift and go to state 255
    assignment_expression          shift and go to state 94
    conditional_expression         shift and go to state 95
    unary_expression               shift and go to state 96
    logical_or_expression          shift and go to state 97
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 169

    (9) primary_expression -> LPAREN expression . RPAREN
    (78) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 256
    COMMA           shift and go to state 167


state 170

    (33) cast_expression -> LPAREN type_name . RPAREN cast_expression

    RPAREN          shift and go to state 257


state 171

    (159) type_name -> specifier_qualifier_list .
    (160) type_name -> specifier_qualifier_list . abstract_declarator
    (161) abstract_declarator -> . pointer
    (162) abstract_declarator -> . direct_abstract_declarator
    (163) abstract_declarator -> . pointer direct_abstract_declarator
    (144) pointer -> . MULTIPLY
    (145) pointer -> . MULTIPLY type_qualifier_list
    (146) pointer -> . MULTIPLY pointer
    (147) pointer -> . MULTIPLY type_qualifier_list pointer
    (164) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (165) direct_abstract_declarator -> . LSQUAREBRACKET RSQUAREBRACKET
    (166) direct_abstract_declarator -> . LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (167) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (168) direct_abstract_declarator -> . direct_abstract_declarator LPAREN constant_expression RPAREN
    (169) direct_abstract_declarator -> . LPAREN RPAREN
    (170) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (171) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

    RPAREN          reduce using rule 159 (type_name -> specifier_qualifier_list .)
    MULTIPLY        shift and go to state 31
    LPAREN          shift and go to state 260
    LSQUAREBRACKET  shift and go to state 234

    abstract_declarator            shift and go to state 258
    pointer                        shift and go to state 259
    direct_abstract_declarator     shift and go to state 232

state 172

    (198) selection_statement -> SWITCH LPAREN . expression RPAREN statement
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    expression                     shift and go to state 261
    assignment_expression          shift and go to state 94
    conditional_expression         shift and go to state 95
    unary_expression               shift and go to state 96
    logical_or_expression          shift and go to state 97
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 173

    (199) iteration_statement -> WHILE LPAREN . expression RPAREN
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    expression                     shift and go to state 262
    assignment_expression          shift and go to state 94
    conditional_expression         shift and go to state 95
    unary_expression               shift and go to state 96
    logical_or_expression          shift and go to state 97
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 174

    (200) iteration_statement -> DO statement . WHILE LPAREN expression RPAREN SEMICOLON

    WHILE           shift and go to state 263


state 175

    (201) iteration_statement -> FOR LPAREN . expression_statement expression_statement RPAREN statement
    (202) iteration_statement -> FOR LPAREN . expression_statement expression_statement expression RPAREN statement
    (194) expression_statement -> . SEMICOLON
    (195) expression_statement -> . expression SEMICOLON
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 79
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    expression_statement           shift and go to state 264
    expression                     shift and go to state 83
    assignment_expression          shift and go to state 94
    conditional_expression         shift and go to state 95
    unary_expression               shift and go to state 96
    logical_or_expression          shift and go to state 97
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 176

    (203) jump_statement -> GOTO ID . SEMICOLON

    SEMICOLON       shift and go to state 265


state 177

    (204) jump_statement -> CONTINUE SEMICOLON .

    RCURLYBRACKET   reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)
    ID              reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)
    CASE            reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)
    DEFAULT         reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)
    LCURLYBRACKET   reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)
    GOTO            reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)
    INCREMENT       reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)
    DECREMENT       reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)
    SIZEOF          reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)
    AND             reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)
    MULTIPLY        reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)
    PLUS            reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)
    NOT             reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)
    LNOT            reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)
    CHAR_CONST      reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)
    INT_CONST       reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)
    FLOAT_CONST     reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)
    OCTAL_CONST     reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)
    HEX_CONST       reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)
    BIN_CONST       reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)
    STRING_LITERAL  reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 204 (jump_statement -> CONTINUE SEMICOLON .)


state 178

    (205) jump_statement -> BREAK SEMICOLON .

    RCURLYBRACKET   reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)
    ID              reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)
    CASE            reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)
    DEFAULT         reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)
    LCURLYBRACKET   reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)
    SWITCH          reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)
    DO              reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)
    GOTO            reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)
    INCREMENT       reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)
    DECREMENT       reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)
    SIZEOF          reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)
    AND             reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)
    MULTIPLY        reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)
    PLUS            reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)
    NOT             reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)
    LNOT            reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)
    CHAR_CONST      reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)
    INT_CONST       reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)
    FLOAT_CONST     reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)
    OCTAL_CONST     reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)
    HEX_CONST       reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)
    BIN_CONST       reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)
    STRING_LITERAL  reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 205 (jump_statement -> BREAK SEMICOLON .)


state 179

    (206) jump_statement -> RETURN SEMICOLON .

    RCURLYBRACKET   reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)
    ID              reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)
    CASE            reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)
    LCURLYBRACKET   reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)
    DO              reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)
    GOTO            reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)
    INCREMENT       reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)
    DECREMENT       reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)
    SIZEOF          reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)
    AND             reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)
    MULTIPLY        reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)
    PLUS            reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)
    NOT             reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)
    LNOT            reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)
    CHAR_CONST      reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)
    INT_CONST       reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)
    FLOAT_CONST     reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)
    OCTAL_CONST     reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)
    HEX_CONST       reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)
    BIN_CONST       reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)
    STRING_LITERAL  reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 206 (jump_statement -> RETURN SEMICOLON .)


state 180

    (207) jump_statement -> RETURN expression . SEMICOLON
    (78) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 266
    COMMA           shift and go to state 167


state 181

    (65) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    unary_expression               shift and go to state 96
    assignment_expression          shift and go to state 267
    conditional_expression         shift and go to state 95
    logical_or_expression          shift and go to state 97
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 182

    (66) assignment_operator -> EQUALS .

    INCREMENT       reduce using rule 66 (assignment_operator -> EQUALS .)
    DECREMENT       reduce using rule 66 (assignment_operator -> EQUALS .)
    SIZEOF          reduce using rule 66 (assignment_operator -> EQUALS .)
    AND             reduce using rule 66 (assignment_operator -> EQUALS .)
    MULTIPLY        reduce using rule 66 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 66 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 66 (assignment_operator -> EQUALS .)
    NOT             reduce using rule 66 (assignment_operator -> EQUALS .)
    LNOT            reduce using rule 66 (assignment_operator -> EQUALS .)
    ID              reduce using rule 66 (assignment_operator -> EQUALS .)
    CHAR_CONST      reduce using rule 66 (assignment_operator -> EQUALS .)
    INT_CONST       reduce using rule 66 (assignment_operator -> EQUALS .)
    FLOAT_CONST     reduce using rule 66 (assignment_operator -> EQUALS .)
    OCTAL_CONST     reduce using rule 66 (assignment_operator -> EQUALS .)
    HEX_CONST       reduce using rule 66 (assignment_operator -> EQUALS .)
    BIN_CONST       reduce using rule 66 (assignment_operator -> EQUALS .)
    STRING_LITERAL  reduce using rule 66 (assignment_operator -> EQUALS .)
    LPAREN          reduce using rule 66 (assignment_operator -> EQUALS .)


state 183

    (67) assignment_operator -> MULTIPLYEQUAL .

    INCREMENT       reduce using rule 67 (assignment_operator -> MULTIPLYEQUAL .)
    DECREMENT       reduce using rule 67 (assignment_operator -> MULTIPLYEQUAL .)
    SIZEOF          reduce using rule 67 (assignment_operator -> MULTIPLYEQUAL .)
    AND             reduce using rule 67 (assignment_operator -> MULTIPLYEQUAL .)
    MULTIPLY        reduce using rule 67 (assignment_operator -> MULTIPLYEQUAL .)
    PLUS            reduce using rule 67 (assignment_operator -> MULTIPLYEQUAL .)
    MINUS           reduce using rule 67 (assignment_operator -> MULTIPLYEQUAL .)
    NOT             reduce using rule 67 (assignment_operator -> MULTIPLYEQUAL .)
    LNOT            reduce using rule 67 (assignment_operator -> MULTIPLYEQUAL .)
    ID              reduce using rule 67 (assignment_operator -> MULTIPLYEQUAL .)
    CHAR_CONST      reduce using rule 67 (assignment_operator -> MULTIPLYEQUAL .)
    INT_CONST       reduce using rule 67 (assignment_operator -> MULTIPLYEQUAL .)
    FLOAT_CONST     reduce using rule 67 (assignment_operator -> MULTIPLYEQUAL .)
    OCTAL_CONST     reduce using rule 67 (assignment_operator -> MULTIPLYEQUAL .)
    HEX_CONST       reduce using rule 67 (assignment_operator -> MULTIPLYEQUAL .)
    BIN_CONST       reduce using rule 67 (assignment_operator -> MULTIPLYEQUAL .)
    STRING_LITERAL  reduce using rule 67 (assignment_operator -> MULTIPLYEQUAL .)
    LPAREN          reduce using rule 67 (assignment_operator -> MULTIPLYEQUAL .)


state 184

    (68) assignment_operator -> DIVIDEEQUAL .

    INCREMENT       reduce using rule 68 (assignment_operator -> DIVIDEEQUAL .)
    DECREMENT       reduce using rule 68 (assignment_operator -> DIVIDEEQUAL .)
    SIZEOF          reduce using rule 68 (assignment_operator -> DIVIDEEQUAL .)
    AND             reduce using rule 68 (assignment_operator -> DIVIDEEQUAL .)
    MULTIPLY        reduce using rule 68 (assignment_operator -> DIVIDEEQUAL .)
    PLUS            reduce using rule 68 (assignment_operator -> DIVIDEEQUAL .)
    MINUS           reduce using rule 68 (assignment_operator -> DIVIDEEQUAL .)
    NOT             reduce using rule 68 (assignment_operator -> DIVIDEEQUAL .)
    LNOT            reduce using rule 68 (assignment_operator -> DIVIDEEQUAL .)
    ID              reduce using rule 68 (assignment_operator -> DIVIDEEQUAL .)
    CHAR_CONST      reduce using rule 68 (assignment_operator -> DIVIDEEQUAL .)
    INT_CONST       reduce using rule 68 (assignment_operator -> DIVIDEEQUAL .)
    FLOAT_CONST     reduce using rule 68 (assignment_operator -> DIVIDEEQUAL .)
    OCTAL_CONST     reduce using rule 68 (assignment_operator -> DIVIDEEQUAL .)
    HEX_CONST       reduce using rule 68 (assignment_operator -> DIVIDEEQUAL .)
    BIN_CONST       reduce using rule 68 (assignment_operator -> DIVIDEEQUAL .)
    STRING_LITERAL  reduce using rule 68 (assignment_operator -> DIVIDEEQUAL .)
    LPAREN          reduce using rule 68 (assignment_operator -> DIVIDEEQUAL .)


state 185

    (69) assignment_operator -> MODEQUAL .

    INCREMENT       reduce using rule 69 (assignment_operator -> MODEQUAL .)
    DECREMENT       reduce using rule 69 (assignment_operator -> MODEQUAL .)
    SIZEOF          reduce using rule 69 (assignment_operator -> MODEQUAL .)
    AND             reduce using rule 69 (assignment_operator -> MODEQUAL .)
    MULTIPLY        reduce using rule 69 (assignment_operator -> MODEQUAL .)
    PLUS            reduce using rule 69 (assignment_operator -> MODEQUAL .)
    MINUS           reduce using rule 69 (assignment_operator -> MODEQUAL .)
    NOT             reduce using rule 69 (assignment_operator -> MODEQUAL .)
    LNOT            reduce using rule 69 (assignment_operator -> MODEQUAL .)
    ID              reduce using rule 69 (assignment_operator -> MODEQUAL .)
    CHAR_CONST      reduce using rule 69 (assignment_operator -> MODEQUAL .)
    INT_CONST       reduce using rule 69 (assignment_operator -> MODEQUAL .)
    FLOAT_CONST     reduce using rule 69 (assignment_operator -> MODEQUAL .)
    OCTAL_CONST     reduce using rule 69 (assignment_operator -> MODEQUAL .)
    HEX_CONST       reduce using rule 69 (assignment_operator -> MODEQUAL .)
    BIN_CONST       reduce using rule 69 (assignment_operator -> MODEQUAL .)
    STRING_LITERAL  reduce using rule 69 (assignment_operator -> MODEQUAL .)
    LPAREN          reduce using rule 69 (assignment_operator -> MODEQUAL .)


state 186

    (70) assignment_operator -> PLUSEQUAL .

    INCREMENT       reduce using rule 70 (assignment_operator -> PLUSEQUAL .)
    DECREMENT       reduce using rule 70 (assignment_operator -> PLUSEQUAL .)
    SIZEOF          reduce using rule 70 (assignment_operator -> PLUSEQUAL .)
    AND             reduce using rule 70 (assignment_operator -> PLUSEQUAL .)
    MULTIPLY        reduce using rule 70 (assignment_operator -> PLUSEQUAL .)
    PLUS            reduce using rule 70 (assignment_operator -> PLUSEQUAL .)
    MINUS           reduce using rule 70 (assignment_operator -> PLUSEQUAL .)
    NOT             reduce using rule 70 (assignment_operator -> PLUSEQUAL .)
    LNOT            reduce using rule 70 (assignment_operator -> PLUSEQUAL .)
    ID              reduce using rule 70 (assignment_operator -> PLUSEQUAL .)
    CHAR_CONST      reduce using rule 70 (assignment_operator -> PLUSEQUAL .)
    INT_CONST       reduce using rule 70 (assignment_operator -> PLUSEQUAL .)
    FLOAT_CONST     reduce using rule 70 (assignment_operator -> PLUSEQUAL .)
    OCTAL_CONST     reduce using rule 70 (assignment_operator -> PLUSEQUAL .)
    HEX_CONST       reduce using rule 70 (assignment_operator -> PLUSEQUAL .)
    BIN_CONST       reduce using rule 70 (assignment_operator -> PLUSEQUAL .)
    STRING_LITERAL  reduce using rule 70 (assignment_operator -> PLUSEQUAL .)
    LPAREN          reduce using rule 70 (assignment_operator -> PLUSEQUAL .)


state 187

    (71) assignment_operator -> MINUSEQUAL .

    INCREMENT       reduce using rule 71 (assignment_operator -> MINUSEQUAL .)
    DECREMENT       reduce using rule 71 (assignment_operator -> MINUSEQUAL .)
    SIZEOF          reduce using rule 71 (assignment_operator -> MINUSEQUAL .)
    AND             reduce using rule 71 (assignment_operator -> MINUSEQUAL .)
    MULTIPLY        reduce using rule 71 (assignment_operator -> MINUSEQUAL .)
    PLUS            reduce using rule 71 (assignment_operator -> MINUSEQUAL .)
    MINUS           reduce using rule 71 (assignment_operator -> MINUSEQUAL .)
    NOT             reduce using rule 71 (assignment_operator -> MINUSEQUAL .)
    LNOT            reduce using rule 71 (assignment_operator -> MINUSEQUAL .)
    ID              reduce using rule 71 (assignment_operator -> MINUSEQUAL .)
    CHAR_CONST      reduce using rule 71 (assignment_operator -> MINUSEQUAL .)
    INT_CONST       reduce using rule 71 (assignment_operator -> MINUSEQUAL .)
    FLOAT_CONST     reduce using rule 71 (assignment_operator -> MINUSEQUAL .)
    OCTAL_CONST     reduce using rule 71 (assignment_operator -> MINUSEQUAL .)
    HEX_CONST       reduce using rule 71 (assignment_operator -> MINUSEQUAL .)
    BIN_CONST       reduce using rule 71 (assignment_operator -> MINUSEQUAL .)
    STRING_LITERAL  reduce using rule 71 (assignment_operator -> MINUSEQUAL .)
    LPAREN          reduce using rule 71 (assignment_operator -> MINUSEQUAL .)


state 188

    (72) assignment_operator -> LSHIFTEQUAL .

    INCREMENT       reduce using rule 72 (assignment_operator -> LSHIFTEQUAL .)
    DECREMENT       reduce using rule 72 (assignment_operator -> LSHIFTEQUAL .)
    SIZEOF          reduce using rule 72 (assignment_operator -> LSHIFTEQUAL .)
    AND             reduce using rule 72 (assignment_operator -> LSHIFTEQUAL .)
    MULTIPLY        reduce using rule 72 (assignment_operator -> LSHIFTEQUAL .)
    PLUS            reduce using rule 72 (assignment_operator -> LSHIFTEQUAL .)
    MINUS           reduce using rule 72 (assignment_operator -> LSHIFTEQUAL .)
    NOT             reduce using rule 72 (assignment_operator -> LSHIFTEQUAL .)
    LNOT            reduce using rule 72 (assignment_operator -> LSHIFTEQUAL .)
    ID              reduce using rule 72 (assignment_operator -> LSHIFTEQUAL .)
    CHAR_CONST      reduce using rule 72 (assignment_operator -> LSHIFTEQUAL .)
    INT_CONST       reduce using rule 72 (assignment_operator -> LSHIFTEQUAL .)
    FLOAT_CONST     reduce using rule 72 (assignment_operator -> LSHIFTEQUAL .)
    OCTAL_CONST     reduce using rule 72 (assignment_operator -> LSHIFTEQUAL .)
    HEX_CONST       reduce using rule 72 (assignment_operator -> LSHIFTEQUAL .)
    BIN_CONST       reduce using rule 72 (assignment_operator -> LSHIFTEQUAL .)
    STRING_LITERAL  reduce using rule 72 (assignment_operator -> LSHIFTEQUAL .)
    LPAREN          reduce using rule 72 (assignment_operator -> LSHIFTEQUAL .)


state 189

    (73) assignment_operator -> RSHIFTEQUAL .

    INCREMENT       reduce using rule 73 (assignment_operator -> RSHIFTEQUAL .)
    DECREMENT       reduce using rule 73 (assignment_operator -> RSHIFTEQUAL .)
    SIZEOF          reduce using rule 73 (assignment_operator -> RSHIFTEQUAL .)
    AND             reduce using rule 73 (assignment_operator -> RSHIFTEQUAL .)
    MULTIPLY        reduce using rule 73 (assignment_operator -> RSHIFTEQUAL .)
    PLUS            reduce using rule 73 (assignment_operator -> RSHIFTEQUAL .)
    MINUS           reduce using rule 73 (assignment_operator -> RSHIFTEQUAL .)
    NOT             reduce using rule 73 (assignment_operator -> RSHIFTEQUAL .)
    LNOT            reduce using rule 73 (assignment_operator -> RSHIFTEQUAL .)
    ID              reduce using rule 73 (assignment_operator -> RSHIFTEQUAL .)
    CHAR_CONST      reduce using rule 73 (assignment_operator -> RSHIFTEQUAL .)
    INT_CONST       reduce using rule 73 (assignment_operator -> RSHIFTEQUAL .)
    FLOAT_CONST     reduce using rule 73 (assignment_operator -> RSHIFTEQUAL .)
    OCTAL_CONST     reduce using rule 73 (assignment_operator -> RSHIFTEQUAL .)
    HEX_CONST       reduce using rule 73 (assignment_operator -> RSHIFTEQUAL .)
    BIN_CONST       reduce using rule 73 (assignment_operator -> RSHIFTEQUAL .)
    STRING_LITERAL  reduce using rule 73 (assignment_operator -> RSHIFTEQUAL .)
    LPAREN          reduce using rule 73 (assignment_operator -> RSHIFTEQUAL .)


state 190

    (74) assignment_operator -> ANDEQUAL .

    INCREMENT       reduce using rule 74 (assignment_operator -> ANDEQUAL .)
    DECREMENT       reduce using rule 74 (assignment_operator -> ANDEQUAL .)
    SIZEOF          reduce using rule 74 (assignment_operator -> ANDEQUAL .)
    AND             reduce using rule 74 (assignment_operator -> ANDEQUAL .)
    MULTIPLY        reduce using rule 74 (assignment_operator -> ANDEQUAL .)
    PLUS            reduce using rule 74 (assignment_operator -> ANDEQUAL .)
    MINUS           reduce using rule 74 (assignment_operator -> ANDEQUAL .)
    NOT             reduce using rule 74 (assignment_operator -> ANDEQUAL .)
    LNOT            reduce using rule 74 (assignment_operator -> ANDEQUAL .)
    ID              reduce using rule 74 (assignment_operator -> ANDEQUAL .)
    CHAR_CONST      reduce using rule 74 (assignment_operator -> ANDEQUAL .)
    INT_CONST       reduce using rule 74 (assignment_operator -> ANDEQUAL .)
    FLOAT_CONST     reduce using rule 74 (assignment_operator -> ANDEQUAL .)
    OCTAL_CONST     reduce using rule 74 (assignment_operator -> ANDEQUAL .)
    HEX_CONST       reduce using rule 74 (assignment_operator -> ANDEQUAL .)
    BIN_CONST       reduce using rule 74 (assignment_operator -> ANDEQUAL .)
    STRING_LITERAL  reduce using rule 74 (assignment_operator -> ANDEQUAL .)
    LPAREN          reduce using rule 74 (assignment_operator -> ANDEQUAL .)


state 191

    (75) assignment_operator -> XOREQUAL .

    INCREMENT       reduce using rule 75 (assignment_operator -> XOREQUAL .)
    DECREMENT       reduce using rule 75 (assignment_operator -> XOREQUAL .)
    SIZEOF          reduce using rule 75 (assignment_operator -> XOREQUAL .)
    AND             reduce using rule 75 (assignment_operator -> XOREQUAL .)
    MULTIPLY        reduce using rule 75 (assignment_operator -> XOREQUAL .)
    PLUS            reduce using rule 75 (assignment_operator -> XOREQUAL .)
    MINUS           reduce using rule 75 (assignment_operator -> XOREQUAL .)
    NOT             reduce using rule 75 (assignment_operator -> XOREQUAL .)
    LNOT            reduce using rule 75 (assignment_operator -> XOREQUAL .)
    ID              reduce using rule 75 (assignment_operator -> XOREQUAL .)
    CHAR_CONST      reduce using rule 75 (assignment_operator -> XOREQUAL .)
    INT_CONST       reduce using rule 75 (assignment_operator -> XOREQUAL .)
    FLOAT_CONST     reduce using rule 75 (assignment_operator -> XOREQUAL .)
    OCTAL_CONST     reduce using rule 75 (assignment_operator -> XOREQUAL .)
    HEX_CONST       reduce using rule 75 (assignment_operator -> XOREQUAL .)
    BIN_CONST       reduce using rule 75 (assignment_operator -> XOREQUAL .)
    STRING_LITERAL  reduce using rule 75 (assignment_operator -> XOREQUAL .)
    LPAREN          reduce using rule 75 (assignment_operator -> XOREQUAL .)


state 192

    (76) assignment_operator -> OREQUAL .

    INCREMENT       reduce using rule 76 (assignment_operator -> OREQUAL .)
    DECREMENT       reduce using rule 76 (assignment_operator -> OREQUAL .)
    SIZEOF          reduce using rule 76 (assignment_operator -> OREQUAL .)
    AND             reduce using rule 76 (assignment_operator -> OREQUAL .)
    MULTIPLY        reduce using rule 76 (assignment_operator -> OREQUAL .)
    PLUS            reduce using rule 76 (assignment_operator -> OREQUAL .)
    MINUS           reduce using rule 76 (assignment_operator -> OREQUAL .)
    NOT             reduce using rule 76 (assignment_operator -> OREQUAL .)
    LNOT            reduce using rule 76 (assignment_operator -> OREQUAL .)
    ID              reduce using rule 76 (assignment_operator -> OREQUAL .)
    CHAR_CONST      reduce using rule 76 (assignment_operator -> OREQUAL .)
    INT_CONST       reduce using rule 76 (assignment_operator -> OREQUAL .)
    FLOAT_CONST     reduce using rule 76 (assignment_operator -> OREQUAL .)
    OCTAL_CONST     reduce using rule 76 (assignment_operator -> OREQUAL .)
    HEX_CONST       reduce using rule 76 (assignment_operator -> OREQUAL .)
    BIN_CONST       reduce using rule 76 (assignment_operator -> OREQUAL .)
    STRING_LITERAL  reduce using rule 76 (assignment_operator -> OREQUAL .)
    LPAREN          reduce using rule 76 (assignment_operator -> OREQUAL .)


state 193

    (63) conditional_expression -> logical_or_expression CONDOP . expression COLON conditional_expression
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    logical_or_expression          shift and go to state 97
    expression                     shift and go to state 268
    conditional_expression         shift and go to state 95
    assignment_expression          shift and go to state 94
    unary_expression               shift and go to state 96
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 194

    (61) logical_or_expression -> logical_or_expression LOR . logical_and_expression
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 132
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119

    logical_and_expression         shift and go to state 269
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126
    cast_expression                shift and go to state 102
    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    primary_expression             shift and go to state 105

state 195

    (11) postfix_expression -> postfix_expression LSQUAREBRACKET . expression RSQUAREBRACKET
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    postfix_expression             shift and go to state 98
    expression                     shift and go to state 270
    assignment_expression          shift and go to state 94
    conditional_expression         shift and go to state 95
    unary_expression               shift and go to state 96
    logical_or_expression          shift and go to state 97
    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 196

    (12) postfix_expression -> postfix_expression LPAREN . RPAREN
    (13) postfix_expression -> postfix_expression LPAREN . argument_expression_list RPAREN
    (18) argument_expression_list -> . assignment_expression
    (19) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 271
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    postfix_expression             shift and go to state 98
    argument_expression_list       shift and go to state 272
    assignment_expression          shift and go to state 273
    conditional_expression         shift and go to state 95
    unary_expression               shift and go to state 96
    logical_or_expression          shift and go to state 97
    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 197

    (14) postfix_expression -> postfix_expression PERIOD . ID

    ID              shift and go to state 274


state 198

    (15) postfix_expression -> postfix_expression ARROW . ID

    ID              shift and go to state 275


state 199

    (16) postfix_expression -> postfix_expression INCREMENT .

    LSQUAREBRACKET  reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    LPAREN          reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    PERIOD          reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    ARROW           reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    INCREMENT       reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    DECREMENT       reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    EQUALS          reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    MULTIPLYEQUAL   reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    DIVIDEEQUAL     reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    MODEQUAL        reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    PLUSEQUAL       reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    MINUSEQUAL      reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    LSHIFTEQUAL     reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    RSHIFTEQUAL     reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    ANDEQUAL        reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    XOREQUAL        reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    OREQUAL         reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    MULTIPLY        reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    DIVIDE          reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    MOD             reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    PLUS            reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    MINUS           reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    LSHIFT          reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    RSHIFT          reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    LESS            reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    GREATER         reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    LESSEQUAL       reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    GREATEREQUAL    reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    EQUAL           reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    NOTEQUAL        reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    AND             reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    XOR             reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    OR              reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    LAND            reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    CONDOP          reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    LOR             reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    SEMICOLON       reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    COMMA           reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    RSQUAREBRACKET  reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    COLON           reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    RPAREN          reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)
    RCURLYBRACKET   reduce using rule 16 (postfix_expression -> postfix_expression INCREMENT .)


state 200

    (17) postfix_expression -> postfix_expression DECREMENT .

    LSQUAREBRACKET  reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    LPAREN          reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    PERIOD          reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    ARROW           reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    INCREMENT       reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    DECREMENT       reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    EQUALS          reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    MULTIPLYEQUAL   reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    DIVIDEEQUAL     reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    MODEQUAL        reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    PLUSEQUAL       reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    MINUSEQUAL      reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    LSHIFTEQUAL     reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    RSHIFTEQUAL     reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    ANDEQUAL        reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    XOREQUAL        reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    OREQUAL         reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    MULTIPLY        reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    DIVIDE          reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    MOD             reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    PLUS            reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    MINUS           reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    LSHIFT          reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    RSHIFT          reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    LESS            reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    GREATER         reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    LESSEQUAL       reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    GREATEREQUAL    reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    EQUAL           reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    NOTEQUAL        reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    AND             reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    XOR             reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    OR              reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    LAND            reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    CONDOP          reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    LOR             reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    SEMICOLON       reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    COMMA           reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    RSQUAREBRACKET  reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    COLON           reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    RPAREN          reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)
    RCURLYBRACKET   reduce using rule 17 (postfix_expression -> postfix_expression DECREMENT .)


state 201

    (21) unary_expression -> INCREMENT unary_expression .

    EQUALS          reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    MULTIPLYEQUAL   reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    DIVIDEEQUAL     reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    MODEQUAL        reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    PLUSEQUAL       reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    MINUSEQUAL      reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    LSHIFTEQUAL     reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    RSHIFTEQUAL     reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    ANDEQUAL        reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    XOREQUAL        reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    OREQUAL         reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    MULTIPLY        reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    DIVIDE          reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    MOD             reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    PLUS            reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    MINUS           reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    LSHIFT          reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    RSHIFT          reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    LESS            reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    GREATER         reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    LESSEQUAL       reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    GREATEREQUAL    reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    EQUAL           reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    NOTEQUAL        reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    AND             reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    XOR             reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    OR              reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    LAND            reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    CONDOP          reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    LOR             reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    SEMICOLON       reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    COMMA           reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    RSQUAREBRACKET  reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    COLON           reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    RPAREN          reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)
    RCURLYBRACKET   reduce using rule 21 (unary_expression -> INCREMENT unary_expression .)


state 202

    (9) primary_expression -> LPAREN . expression RPAREN
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    expression                     shift and go to state 169
    assignment_expression          shift and go to state 94
    conditional_expression         shift and go to state 95
    unary_expression               shift and go to state 96
    logical_or_expression          shift and go to state 97
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 203

    (22) unary_expression -> DECREMENT unary_expression .

    EQUALS          reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    MULTIPLYEQUAL   reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    DIVIDEEQUAL     reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    MODEQUAL        reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    PLUSEQUAL       reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    MINUSEQUAL      reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    LSHIFTEQUAL     reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    RSHIFTEQUAL     reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    ANDEQUAL        reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    XOREQUAL        reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    OREQUAL         reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    MULTIPLY        reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    DIVIDE          reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    MOD             reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    PLUS            reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    MINUS           reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    LSHIFT          reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    RSHIFT          reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    LESS            reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    GREATER         reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    LESSEQUAL       reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    GREATEREQUAL    reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    EQUAL           reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    NOTEQUAL        reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    AND             reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    XOR             reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    OR              reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    LAND            reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    CONDOP          reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    LOR             reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    SEMICOLON       reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    COMMA           reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    RSQUAREBRACKET  reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    COLON           reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    RPAREN          reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)
    RCURLYBRACKET   reduce using rule 22 (unary_expression -> DECREMENT unary_expression .)


state 204

    (23) unary_expression -> unary_operator cast_expression .

    EQUALS          reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    MULTIPLYEQUAL   reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    DIVIDEEQUAL     reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    MODEQUAL        reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    PLUSEQUAL       reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    MINUSEQUAL      reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    LSHIFTEQUAL     reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    RSHIFTEQUAL     reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    ANDEQUAL        reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    XOREQUAL        reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    OREQUAL         reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    MULTIPLY        reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    LSHIFT          reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    RSHIFT          reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    LESS            reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    GREATER         reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    LESSEQUAL       reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    GREATEREQUAL    reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    EQUAL           reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    NOTEQUAL        reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    XOR             reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    LAND            reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    CONDOP          reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    LOR             reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    SEMICOLON       reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    RSQUAREBRACKET  reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    COLON           reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    RCURLYBRACKET   reduce using rule 23 (unary_expression -> unary_operator cast_expression .)


state 205

    (24) unary_expression -> SIZEOF unary_expression .

    EQUALS          reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    MULTIPLYEQUAL   reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    DIVIDEEQUAL     reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    MODEQUAL        reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    PLUSEQUAL       reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    MINUSEQUAL      reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    LSHIFTEQUAL     reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    RSHIFTEQUAL     reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    ANDEQUAL        reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    XOREQUAL        reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    OREQUAL         reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    MULTIPLY        reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    DIVIDE          reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    MOD             reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    PLUS            reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    MINUS           reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    LSHIFT          reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    RSHIFT          reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    LESS            reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    GREATER         reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    LESSEQUAL       reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    GREATEREQUAL    reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    EQUAL           reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    NOTEQUAL        reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    AND             reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    XOR             reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    OR              reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    LAND            reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    CONDOP          reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    LOR             reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    SEMICOLON       reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    RSQUAREBRACKET  reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    RPAREN          reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    RCURLYBRACKET   reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)


state 206

    (25) unary_expression -> SIZEOF LPAREN . type_name RPAREN
    (9) primary_expression -> LPAREN . expression RPAREN
    (159) type_name -> . specifier_qualifier_list
    (160) type_name -> . specifier_qualifier_list abstract_declarator
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (117) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (118) specifier_qualifier_list -> . type_specifier
    (119) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (120) specifier_qualifier_list -> . type_qualifier
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (97) type_specifier -> . VOID
    (98) type_specifier -> . CHAR
    (99) type_specifier -> . SHORT
    (100) type_specifier -> . INT
    (101) type_specifier -> . LONG
    (102) type_specifier -> . FLOAT
    (103) type_specifier -> . DOUBLE
    (104) type_specifier -> . SIGNED
    (105) type_specifier -> . UNSIGNED
    (106) type_specifier -> . struct_or_union_specifier
    (107) type_specifier -> . enum_specifier
    (108) type_specifier -> . TYPE_NAME
    (133) type_qualifier -> . CONST
    (134) type_qualifier -> . VOLATILE
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (109) struct_or_union_specifier -> . struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (110) struct_or_union_specifier -> . struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (111) struct_or_union_specifier -> . struct_or_union ID
    (126) enum_specifier -> . ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET
    (127) enum_specifier -> . ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET
    (128) enum_specifier -> . ENUM ID
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (112) struct_or_union -> . STRUCT
    (113) struct_or_union -> . UNION
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    TYPE_NAME       shift and go to state 28
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    ENUM            shift and go to state 35
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    type_name                      shift and go to state 276
    expression                     shift and go to state 169
    specifier_qualifier_list       shift and go to state 171
    assignment_expression          shift and go to state 94
    type_specifier                 shift and go to state 148
    type_qualifier                 shift and go to state 149
    conditional_expression         shift and go to state 95
    unary_expression               shift and go to state 96
    struct_or_union_specifier      shift and go to state 26
    enum_specifier                 shift and go to state 27
    logical_or_expression          shift and go to state 97
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 102
    struct_or_union                shift and go to state 34
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 207

    (59) logical_and_expression -> logical_and_expression LAND . inclusive_or_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 132
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119

    inclusive_or_expression        shift and go to state 277
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126
    cast_expression                shift and go to state 102
    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    primary_expression             shift and go to state 105

state 208

    (57) inclusive_or_expression -> inclusive_or_expression OR . exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 132
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119

    exclusive_or_expression        shift and go to state 278
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126
    cast_expression                shift and go to state 102
    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    primary_expression             shift and go to state 105

state 209

    (55) exclusive_or_expression -> exclusive_or_expression XOR . and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 132
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119

    and_expression                 shift and go to state 279
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126
    cast_expression                shift and go to state 102
    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    primary_expression             shift and go to state 105

state 210

    (53) and_expression -> and_expression AND . equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 132
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119

    equality_expression            shift and go to state 280
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126
    cast_expression                shift and go to state 102
    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    primary_expression             shift and go to state 105

state 211

    (50) equality_expression -> equality_expression EQUAL . relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 132
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119

    relational_expression          shift and go to state 281
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126
    cast_expression                shift and go to state 102
    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    primary_expression             shift and go to state 105

state 212

    (51) equality_expression -> equality_expression NOTEQUAL . relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 132
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119

    relational_expression          shift and go to state 282
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126
    cast_expression                shift and go to state 102
    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    primary_expression             shift and go to state 105

state 213

    (45) relational_expression -> relational_expression LESS . shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 132
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119

    shift_expression               shift and go to state 283
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126
    cast_expression                shift and go to state 102
    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    primary_expression             shift and go to state 105

state 214

    (46) relational_expression -> relational_expression GREATER . shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 132
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119

    shift_expression               shift and go to state 284
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126
    cast_expression                shift and go to state 102
    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    primary_expression             shift and go to state 105

state 215

    (47) relational_expression -> relational_expression LESSEQUAL . shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 132
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119

    shift_expression               shift and go to state 285
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126
    cast_expression                shift and go to state 102
    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    primary_expression             shift and go to state 105

state 216

    (48) relational_expression -> relational_expression GREATEREQUAL . shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 132
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119

    shift_expression               shift and go to state 286
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126
    cast_expression                shift and go to state 102
    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    primary_expression             shift and go to state 105

state 217

    (42) shift_expression -> shift_expression LSHIFT . additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 132
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119

    additive_expression            shift and go to state 287
    multiplicative_expression      shift and go to state 126
    cast_expression                shift and go to state 102
    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    primary_expression             shift and go to state 105

state 218

    (43) shift_expression -> shift_expression RSHIFT . additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 132
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119

    additive_expression            shift and go to state 288
    multiplicative_expression      shift and go to state 126
    cast_expression                shift and go to state 102
    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    primary_expression             shift and go to state 105

state 219

    (39) additive_expression -> additive_expression PLUS . multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 132
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119

    multiplicative_expression      shift and go to state 289
    cast_expression                shift and go to state 102
    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    primary_expression             shift and go to state 105

state 220

    (40) additive_expression -> additive_expression MINUS . multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 132
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119

    multiplicative_expression      shift and go to state 290
    cast_expression                shift and go to state 102
    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    primary_expression             shift and go to state 105

state 221

    (35) multiplicative_expression -> multiplicative_expression MULTIPLY . cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 132
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119

    cast_expression                shift and go to state 291
    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    primary_expression             shift and go to state 105

state 222

    (36) multiplicative_expression -> multiplicative_expression DIVIDE . cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 132
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119

    cast_expression                shift and go to state 292
    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    primary_expression             shift and go to state 105

state 223

    (37) multiplicative_expression -> multiplicative_expression MOD . cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 132
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119

    cast_expression                shift and go to state 293
    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    primary_expression             shift and go to state 105

state 224

    (139) direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .

    LSQUAREBRACKET  reduce using rule 139 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    LPAREN          reduce using rule 139 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    LCURLYBRACKET   reduce using rule 139 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    TYPEDEF         reduce using rule 139 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    EXTERN          reduce using rule 139 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    STATIC          reduce using rule 139 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    AUTO            reduce using rule 139 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    REGISTER        reduce using rule 139 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    VOID            reduce using rule 139 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    CHAR            reduce using rule 139 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    SHORT           reduce using rule 139 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    INT             reduce using rule 139 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    LONG            reduce using rule 139 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    FLOAT           reduce using rule 139 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    DOUBLE          reduce using rule 139 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    SIGNED          reduce using rule 139 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    UNSIGNED        reduce using rule 139 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    TYPE_NAME       reduce using rule 139 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    CONST           reduce using rule 139 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    VOLATILE        reduce using rule 139 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    ENUM            reduce using rule 139 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    STRUCT          reduce using rule 139 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    UNION           reduce using rule 139 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    EQUALS          reduce using rule 139 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    SEMICOLON       reduce using rule 139 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    COMMA           reduce using rule 139 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    RPAREN          reduce using rule 139 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    COLON           reduce using rule 139 (direct_declarator -> direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET .)


state 225

    (141) direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .

    LSQUAREBRACKET  reduce using rule 141 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 141 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LCURLYBRACKET   reduce using rule 141 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    TYPEDEF         reduce using rule 141 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    EXTERN          reduce using rule 141 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    STATIC          reduce using rule 141 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    AUTO            reduce using rule 141 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    REGISTER        reduce using rule 141 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    VOID            reduce using rule 141 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    CHAR            reduce using rule 141 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SHORT           reduce using rule 141 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    INT             reduce using rule 141 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LONG            reduce using rule 141 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    FLOAT           reduce using rule 141 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    DOUBLE          reduce using rule 141 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SIGNED          reduce using rule 141 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    UNSIGNED        reduce using rule 141 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    TYPE_NAME       reduce using rule 141 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    CONST           reduce using rule 141 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    VOLATILE        reduce using rule 141 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    ENUM            reduce using rule 141 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    STRUCT          reduce using rule 141 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    UNION           reduce using rule 141 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    EQUALS          reduce using rule 141 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SEMICOLON       reduce using rule 141 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 141 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 141 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COLON           reduce using rule 141 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)


state 226

    (142) direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .

    LSQUAREBRACKET  reduce using rule 142 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LPAREN          reduce using rule 142 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LCURLYBRACKET   reduce using rule 142 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    TYPEDEF         reduce using rule 142 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    EXTERN          reduce using rule 142 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    STATIC          reduce using rule 142 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    AUTO            reduce using rule 142 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    REGISTER        reduce using rule 142 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    VOID            reduce using rule 142 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    CHAR            reduce using rule 142 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SHORT           reduce using rule 142 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    INT             reduce using rule 142 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LONG            reduce using rule 142 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    FLOAT           reduce using rule 142 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    DOUBLE          reduce using rule 142 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SIGNED          reduce using rule 142 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    UNSIGNED        reduce using rule 142 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    TYPE_NAME       reduce using rule 142 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    CONST           reduce using rule 142 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    VOLATILE        reduce using rule 142 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    ENUM            reduce using rule 142 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    STRUCT          reduce using rule 142 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    UNION           reduce using rule 142 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    EQUALS          reduce using rule 142 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SEMICOLON       reduce using rule 142 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    COMMA           reduce using rule 142 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    RPAREN          reduce using rule 142 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    COLON           reduce using rule 142 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)


state 227

    (158) identifier_list -> identifier_list COMMA . ID

    ID              shift and go to state 294


state 228

    (151) parameter_type_list -> parameter_list COMMA . ELLIPSIS
    (153) parameter_list -> parameter_list COMMA . parameter_declaration
    (154) parameter_declaration -> . declaration_specifiers declarator
    (155) parameter_declaration -> . declaration_specifiers abstract_declarator
    (156) parameter_declaration -> . declaration_specifiers
    (82) declaration_specifiers -> . storage_class_specifier
    (83) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (84) declaration_specifiers -> . type_specifier
    (85) declaration_specifiers -> . type_specifier declaration_specifiers
    (86) declaration_specifiers -> . type_qualifier
    (87) declaration_specifiers -> . type_qualifier declaration_specifiers
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . EXTERN
    (94) storage_class_specifier -> . STATIC
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) type_specifier -> . VOID
    (98) type_specifier -> . CHAR
    (99) type_specifier -> . SHORT
    (100) type_specifier -> . INT
    (101) type_specifier -> . LONG
    (102) type_specifier -> . FLOAT
    (103) type_specifier -> . DOUBLE
    (104) type_specifier -> . SIGNED
    (105) type_specifier -> . UNSIGNED
    (106) type_specifier -> . struct_or_union_specifier
    (107) type_specifier -> . enum_specifier
    (108) type_specifier -> . TYPE_NAME
    (133) type_qualifier -> . CONST
    (134) type_qualifier -> . VOLATILE
    (109) struct_or_union_specifier -> . struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (110) struct_or_union_specifier -> . struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (111) struct_or_union_specifier -> . struct_or_union ID
    (126) enum_specifier -> . ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET
    (127) enum_specifier -> . ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET
    (128) enum_specifier -> . ENUM ID
    (112) struct_or_union -> . STRUCT
    (113) struct_or_union -> . UNION

    ELLIPSIS        shift and go to state 295
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    TYPE_NAME       shift and go to state 28
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    parameter_declaration          shift and go to state 296
    declaration_specifiers         shift and go to state 140
    storage_class_specifier        shift and go to state 7
    type_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 9
    struct_or_union_specifier      shift and go to state 26
    enum_specifier                 shift and go to state 27
    struct_or_union                shift and go to state 34

state 229

    (154) parameter_declaration -> declaration_specifiers declarator .

    COMMA           reduce using rule 154 (parameter_declaration -> declaration_specifiers declarator .)
    RPAREN          reduce using rule 154 (parameter_declaration -> declaration_specifiers declarator .)


state 230

    (155) parameter_declaration -> declaration_specifiers abstract_declarator .

    COMMA           reduce using rule 155 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    RPAREN          reduce using rule 155 (parameter_declaration -> declaration_specifiers abstract_declarator .)


state 231

    (135) declarator -> pointer . direct_declarator
    (161) abstract_declarator -> pointer .
    (163) abstract_declarator -> pointer . direct_abstract_declarator
    (137) direct_declarator -> . ID
    (138) direct_declarator -> . LPAREN declarator RPAREN
    (139) direct_declarator -> . direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (140) direct_declarator -> . direct_declarator LSQUAREBRACKET RSQUAREBRACKET
    (141) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (142) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (143) direct_declarator -> . direct_declarator LPAREN RPAREN
    (164) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (165) direct_abstract_declarator -> . LSQUAREBRACKET RSQUAREBRACKET
    (166) direct_abstract_declarator -> . LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (167) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (168) direct_abstract_declarator -> . direct_abstract_declarator LPAREN constant_expression RPAREN
    (169) direct_abstract_declarator -> . LPAREN RPAREN
    (170) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (171) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

    COMMA           reduce using rule 161 (abstract_declarator -> pointer .)
    RPAREN          reduce using rule 161 (abstract_declarator -> pointer .)
    ID              shift and go to state 32
    LPAREN          shift and go to state 233
    LSQUAREBRACKET  shift and go to state 234

    direct_declarator              shift and go to state 51
    direct_abstract_declarator     shift and go to state 297

state 232

    (162) abstract_declarator -> direct_abstract_declarator .
    (167) direct_abstract_declarator -> direct_abstract_declarator . LPAREN RPAREN
    (168) direct_abstract_declarator -> direct_abstract_declarator . LPAREN constant_expression RPAREN
    (171) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list RPAREN

    COMMA           reduce using rule 162 (abstract_declarator -> direct_abstract_declarator .)
    RPAREN          reduce using rule 162 (abstract_declarator -> direct_abstract_declarator .)
    LPAREN          shift and go to state 298


state 233

    (138) direct_declarator -> LPAREN . declarator RPAREN
    (164) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (169) direct_abstract_declarator -> LPAREN . RPAREN
    (170) direct_abstract_declarator -> LPAREN . parameter_type_list RPAREN
    (135) declarator -> . pointer direct_declarator
    (136) declarator -> . direct_declarator
    (161) abstract_declarator -> . pointer
    (162) abstract_declarator -> . direct_abstract_declarator
    (163) abstract_declarator -> . pointer direct_abstract_declarator
    (150) parameter_type_list -> . parameter_list
    (151) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (144) pointer -> . MULTIPLY
    (145) pointer -> . MULTIPLY type_qualifier_list
    (146) pointer -> . MULTIPLY pointer
    (147) pointer -> . MULTIPLY type_qualifier_list pointer
    (137) direct_declarator -> . ID
    (138) direct_declarator -> . LPAREN declarator RPAREN
    (139) direct_declarator -> . direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (140) direct_declarator -> . direct_declarator LSQUAREBRACKET RSQUAREBRACKET
    (141) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (142) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (143) direct_declarator -> . direct_declarator LPAREN RPAREN
    (164) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (165) direct_abstract_declarator -> . LSQUAREBRACKET RSQUAREBRACKET
    (166) direct_abstract_declarator -> . LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (167) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (168) direct_abstract_declarator -> . direct_abstract_declarator LPAREN constant_expression RPAREN
    (169) direct_abstract_declarator -> . LPAREN RPAREN
    (170) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (171) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN
    (152) parameter_list -> . parameter_declaration
    (153) parameter_list -> . parameter_list COMMA parameter_declaration
    (154) parameter_declaration -> . declaration_specifiers declarator
    (155) parameter_declaration -> . declaration_specifiers abstract_declarator
    (156) parameter_declaration -> . declaration_specifiers
    (82) declaration_specifiers -> . storage_class_specifier
    (83) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (84) declaration_specifiers -> . type_specifier
    (85) declaration_specifiers -> . type_specifier declaration_specifiers
    (86) declaration_specifiers -> . type_qualifier
    (87) declaration_specifiers -> . type_qualifier declaration_specifiers
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . EXTERN
    (94) storage_class_specifier -> . STATIC
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) type_specifier -> . VOID
    (98) type_specifier -> . CHAR
    (99) type_specifier -> . SHORT
    (100) type_specifier -> . INT
    (101) type_specifier -> . LONG
    (102) type_specifier -> . FLOAT
    (103) type_specifier -> . DOUBLE
    (104) type_specifier -> . SIGNED
    (105) type_specifier -> . UNSIGNED
    (106) type_specifier -> . struct_or_union_specifier
    (107) type_specifier -> . enum_specifier
    (108) type_specifier -> . TYPE_NAME
    (133) type_qualifier -> . CONST
    (134) type_qualifier -> . VOLATILE
    (109) struct_or_union_specifier -> . struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (110) struct_or_union_specifier -> . struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (111) struct_or_union_specifier -> . struct_or_union ID
    (126) enum_specifier -> . ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET
    (127) enum_specifier -> . ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET
    (128) enum_specifier -> . ENUM ID
    (112) struct_or_union -> . STRUCT
    (113) struct_or_union -> . UNION

    RPAREN          shift and go to state 299
    MULTIPLY        shift and go to state 31
    ID              shift and go to state 32
    LPAREN          shift and go to state 233
    LSQUAREBRACKET  shift and go to state 234
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    TYPE_NAME       shift and go to state 28
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    declarator                     shift and go to state 57
    abstract_declarator            shift and go to state 300
    parameter_type_list            shift and go to state 301
    pointer                        shift and go to state 231
    direct_declarator              shift and go to state 11
    direct_abstract_declarator     shift and go to state 232
    parameter_list                 shift and go to state 137
    parameter_declaration          shift and go to state 139
    declaration_specifiers         shift and go to state 140
    storage_class_specifier        shift and go to state 7
    type_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 9
    struct_or_union_specifier      shift and go to state 26
    enum_specifier                 shift and go to state 27
    struct_or_union                shift and go to state 34

state 234

    (165) direct_abstract_declarator -> LSQUAREBRACKET . RSQUAREBRACKET
    (166) direct_abstract_declarator -> LSQUAREBRACKET . constant_expression RSQUAREBRACKET
    (79) constant_expression -> . conditional_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN

    RSQUAREBRACKET  shift and go to state 302
    LPAREN          shift and go to state 132
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119

    constant_expression            shift and go to state 303
    conditional_expression         shift and go to state 130
    logical_or_expression          shift and go to state 97
    logical_and_expression         shift and go to state 104
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126
    cast_expression                shift and go to state 102
    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    primary_expression             shift and go to state 105

state 235

    (109) struct_or_union_specifier -> struct_or_union ID LCURLYBRACKET struct_declaration_list . RCURLYBRACKET
    (115) struct_declaration_list -> struct_declaration_list . struct_declaration
    (116) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMICOLON
    (117) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (118) specifier_qualifier_list -> . type_specifier
    (119) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (120) specifier_qualifier_list -> . type_qualifier
    (97) type_specifier -> . VOID
    (98) type_specifier -> . CHAR
    (99) type_specifier -> . SHORT
    (100) type_specifier -> . INT
    (101) type_specifier -> . LONG
    (102) type_specifier -> . FLOAT
    (103) type_specifier -> . DOUBLE
    (104) type_specifier -> . SIGNED
    (105) type_specifier -> . UNSIGNED
    (106) type_specifier -> . struct_or_union_specifier
    (107) type_specifier -> . enum_specifier
    (108) type_specifier -> . TYPE_NAME
    (133) type_qualifier -> . CONST
    (134) type_qualifier -> . VOLATILE
    (109) struct_or_union_specifier -> . struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (110) struct_or_union_specifier -> . struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (111) struct_or_union_specifier -> . struct_or_union ID
    (126) enum_specifier -> . ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET
    (127) enum_specifier -> . ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET
    (128) enum_specifier -> . ENUM ID
    (112) struct_or_union -> . STRUCT
    (113) struct_or_union -> . UNION

    RCURLYBRACKET   shift and go to state 304
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    TYPE_NAME       shift and go to state 28
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    struct_or_union                shift and go to state 34
    struct_declaration             shift and go to state 237
    specifier_qualifier_list       shift and go to state 147
    type_specifier                 shift and go to state 148
    type_qualifier                 shift and go to state 149
    struct_or_union_specifier      shift and go to state 26
    enum_specifier                 shift and go to state 27

state 236

    (110) struct_or_union_specifier -> struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET .

    TYPEDEF         reduce using rule 110 (struct_or_union_specifier -> struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    EXTERN          reduce using rule 110 (struct_or_union_specifier -> struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    STATIC          reduce using rule 110 (struct_or_union_specifier -> struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    AUTO            reduce using rule 110 (struct_or_union_specifier -> struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    REGISTER        reduce using rule 110 (struct_or_union_specifier -> struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    VOID            reduce using rule 110 (struct_or_union_specifier -> struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    CHAR            reduce using rule 110 (struct_or_union_specifier -> struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    SHORT           reduce using rule 110 (struct_or_union_specifier -> struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    INT             reduce using rule 110 (struct_or_union_specifier -> struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    LONG            reduce using rule 110 (struct_or_union_specifier -> struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    FLOAT           reduce using rule 110 (struct_or_union_specifier -> struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    DOUBLE          reduce using rule 110 (struct_or_union_specifier -> struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    SIGNED          reduce using rule 110 (struct_or_union_specifier -> struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    UNSIGNED        reduce using rule 110 (struct_or_union_specifier -> struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    TYPE_NAME       reduce using rule 110 (struct_or_union_specifier -> struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    CONST           reduce using rule 110 (struct_or_union_specifier -> struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    VOLATILE        reduce using rule 110 (struct_or_union_specifier -> struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    ENUM            reduce using rule 110 (struct_or_union_specifier -> struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    STRUCT          reduce using rule 110 (struct_or_union_specifier -> struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    UNION           reduce using rule 110 (struct_or_union_specifier -> struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    SEMICOLON       reduce using rule 110 (struct_or_union_specifier -> struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    MULTIPLY        reduce using rule 110 (struct_or_union_specifier -> struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    ID              reduce using rule 110 (struct_or_union_specifier -> struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    LPAREN          reduce using rule 110 (struct_or_union_specifier -> struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    LSQUAREBRACKET  reduce using rule 110 (struct_or_union_specifier -> struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    COMMA           reduce using rule 110 (struct_or_union_specifier -> struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    RPAREN          reduce using rule 110 (struct_or_union_specifier -> struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    COLON           reduce using rule 110 (struct_or_union_specifier -> struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)


state 237

    (115) struct_declaration_list -> struct_declaration_list struct_declaration .

    RCURLYBRACKET   reduce using rule 115 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 115 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 115 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SHORT           reduce using rule 115 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 115 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG            reduce using rule 115 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 115 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 115 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SIGNED          reduce using rule 115 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNSIGNED        reduce using rule 115 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    TYPE_NAME       reduce using rule 115 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CONST           reduce using rule 115 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOLATILE        reduce using rule 115 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    ENUM            reduce using rule 115 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 115 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNION           reduce using rule 115 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 238

    (116) struct_declaration -> specifier_qualifier_list struct_declarator_list . SEMICOLON
    (122) struct_declarator_list -> struct_declarator_list . COMMA struct_declarator

    SEMICOLON       shift and go to state 305
    COMMA           shift and go to state 306


state 239

    (121) struct_declarator_list -> struct_declarator .

    SEMICOLON       reduce using rule 121 (struct_declarator_list -> struct_declarator .)
    COMMA           reduce using rule 121 (struct_declarator_list -> struct_declarator .)


state 240

    (123) struct_declarator -> declarator .
    (125) struct_declarator -> declarator . COLON constant_expression

    SEMICOLON       reduce using rule 123 (struct_declarator -> declarator .)
    COMMA           reduce using rule 123 (struct_declarator -> declarator .)
    COLON           shift and go to state 307


state 241

    (124) struct_declarator -> COLON . constant_expression
    (79) constant_expression -> . conditional_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 132
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119

    constant_expression            shift and go to state 308
    conditional_expression         shift and go to state 130
    logical_or_expression          shift and go to state 97
    logical_and_expression         shift and go to state 104
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126
    cast_expression                shift and go to state 102
    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    primary_expression             shift and go to state 105

state 242

    (117) specifier_qualifier_list -> type_specifier specifier_qualifier_list .

    COLON           reduce using rule 117 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    MULTIPLY        reduce using rule 117 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    ID              reduce using rule 117 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    LPAREN          reduce using rule 117 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    LSQUAREBRACKET  reduce using rule 117 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    RPAREN          reduce using rule 117 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)


state 243

    (119) specifier_qualifier_list -> type_qualifier specifier_qualifier_list .

    COLON           reduce using rule 119 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    MULTIPLY        reduce using rule 119 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    ID              reduce using rule 119 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    LPAREN          reduce using rule 119 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    LSQUAREBRACKET  reduce using rule 119 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    RPAREN          reduce using rule 119 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)


state 244

    (126) enum_specifier -> ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET .

    TYPEDEF         reduce using rule 126 (enum_specifier -> ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    EXTERN          reduce using rule 126 (enum_specifier -> ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    STATIC          reduce using rule 126 (enum_specifier -> ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    AUTO            reduce using rule 126 (enum_specifier -> ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    REGISTER        reduce using rule 126 (enum_specifier -> ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    VOID            reduce using rule 126 (enum_specifier -> ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    CHAR            reduce using rule 126 (enum_specifier -> ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    SHORT           reduce using rule 126 (enum_specifier -> ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    INT             reduce using rule 126 (enum_specifier -> ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    LONG            reduce using rule 126 (enum_specifier -> ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    FLOAT           reduce using rule 126 (enum_specifier -> ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    DOUBLE          reduce using rule 126 (enum_specifier -> ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    SIGNED          reduce using rule 126 (enum_specifier -> ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    UNSIGNED        reduce using rule 126 (enum_specifier -> ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    TYPE_NAME       reduce using rule 126 (enum_specifier -> ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    CONST           reduce using rule 126 (enum_specifier -> ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    VOLATILE        reduce using rule 126 (enum_specifier -> ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    ENUM            reduce using rule 126 (enum_specifier -> ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    STRUCT          reduce using rule 126 (enum_specifier -> ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    UNION           reduce using rule 126 (enum_specifier -> ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    SEMICOLON       reduce using rule 126 (enum_specifier -> ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    MULTIPLY        reduce using rule 126 (enum_specifier -> ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    ID              reduce using rule 126 (enum_specifier -> ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    LPAREN          reduce using rule 126 (enum_specifier -> ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    LSQUAREBRACKET  reduce using rule 126 (enum_specifier -> ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    COMMA           reduce using rule 126 (enum_specifier -> ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    RPAREN          reduce using rule 126 (enum_specifier -> ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    COLON           reduce using rule 126 (enum_specifier -> ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET .)


state 245

    (130) enumerator_list -> enumerator_list COMMA . enumerator
    (131) enumerator -> . ID
    (132) enumerator -> . ID EQUALS constant_expression

    ID              shift and go to state 152

    enumerator                     shift and go to state 309

state 246

    (132) enumerator -> ID EQUALS . constant_expression
    (79) constant_expression -> . conditional_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 132
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119

    constant_expression            shift and go to state 310
    conditional_expression         shift and go to state 130
    logical_or_expression          shift and go to state 97
    logical_and_expression         shift and go to state 104
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126
    cast_expression                shift and go to state 102
    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    primary_expression             shift and go to state 105

state 247

    (127) enum_specifier -> ENUM ID LCURLYBRACKET enumerator_list . RCURLYBRACKET
    (130) enumerator_list -> enumerator_list . COMMA enumerator

    RCURLYBRACKET   shift and go to state 311
    COMMA           shift and go to state 245


state 248

    (173) initializer -> LCURLYBRACKET initializer_list . RCURLYBRACKET
    (174) initializer -> LCURLYBRACKET initializer_list . COMMA RCURLYBRACKET
    (176) initializer_list -> initializer_list . COMMA initializer

    RCURLYBRACKET   shift and go to state 312
    COMMA           shift and go to state 313


state 249

    (175) initializer_list -> initializer .

    RCURLYBRACKET   reduce using rule 175 (initializer_list -> initializer .)
    COMMA           reduce using rule 175 (initializer_list -> initializer .)


state 250

    (189) compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .

    TYPEDEF         reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    EXTERN          reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    STATIC          reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    AUTO            reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    REGISTER        reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    VOID            reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    CHAR            reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    SHORT           reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    INT             reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    LONG            reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    FLOAT           reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    DOUBLE          reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    SIGNED          reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    UNSIGNED        reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    TYPE_NAME       reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    CONST           reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    VOLATILE        reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    MULTIPLY        reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    ID              reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    LPAREN          reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    ENUM            reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    STRUCT          reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    UNION           reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    $end            reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    RCURLYBRACKET   reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    CASE            reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    DEFAULT         reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    LCURLYBRACKET   reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    SEMICOLON       reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    IF              reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    SWITCH          reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    WHILE           reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    DO              reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    FOR             reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    GOTO            reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    CONTINUE        reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    BREAK           reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    RETURN          reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    INCREMENT       reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    DECREMENT       reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    SIZEOF          reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    AND             reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    PLUS            reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    MINUS           reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    NOT             reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    LNOT            reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    CHAR_CONST      reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    INT_CONST       reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    FLOAT_CONST     reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    OCTAL_CONST     reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    HEX_CONST       reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    BIN_CONST       reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    STRING_LITERAL  reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)
    ELSE            reduce using rule 189 (compound_statement -> LCURLYBRACKET declaration_list statement_list RCURLYBRACKET .)


state 251

    (183) labeled_statement -> ID COLON statement .

    RCURLYBRACKET   reduce using rule 183 (labeled_statement -> ID COLON statement .)
    ID              reduce using rule 183 (labeled_statement -> ID COLON statement .)
    CASE            reduce using rule 183 (labeled_statement -> ID COLON statement .)
    DEFAULT         reduce using rule 183 (labeled_statement -> ID COLON statement .)
    LCURLYBRACKET   reduce using rule 183 (labeled_statement -> ID COLON statement .)
    SEMICOLON       reduce using rule 183 (labeled_statement -> ID COLON statement .)
    IF              reduce using rule 183 (labeled_statement -> ID COLON statement .)
    SWITCH          reduce using rule 183 (labeled_statement -> ID COLON statement .)
    WHILE           reduce using rule 183 (labeled_statement -> ID COLON statement .)
    DO              reduce using rule 183 (labeled_statement -> ID COLON statement .)
    FOR             reduce using rule 183 (labeled_statement -> ID COLON statement .)
    GOTO            reduce using rule 183 (labeled_statement -> ID COLON statement .)
    CONTINUE        reduce using rule 183 (labeled_statement -> ID COLON statement .)
    BREAK           reduce using rule 183 (labeled_statement -> ID COLON statement .)
    RETURN          reduce using rule 183 (labeled_statement -> ID COLON statement .)
    INCREMENT       reduce using rule 183 (labeled_statement -> ID COLON statement .)
    DECREMENT       reduce using rule 183 (labeled_statement -> ID COLON statement .)
    SIZEOF          reduce using rule 183 (labeled_statement -> ID COLON statement .)
    AND             reduce using rule 183 (labeled_statement -> ID COLON statement .)
    MULTIPLY        reduce using rule 183 (labeled_statement -> ID COLON statement .)
    PLUS            reduce using rule 183 (labeled_statement -> ID COLON statement .)
    MINUS           reduce using rule 183 (labeled_statement -> ID COLON statement .)
    NOT             reduce using rule 183 (labeled_statement -> ID COLON statement .)
    LNOT            reduce using rule 183 (labeled_statement -> ID COLON statement .)
    CHAR_CONST      reduce using rule 183 (labeled_statement -> ID COLON statement .)
    INT_CONST       reduce using rule 183 (labeled_statement -> ID COLON statement .)
    FLOAT_CONST     reduce using rule 183 (labeled_statement -> ID COLON statement .)
    OCTAL_CONST     reduce using rule 183 (labeled_statement -> ID COLON statement .)
    HEX_CONST       reduce using rule 183 (labeled_statement -> ID COLON statement .)
    BIN_CONST       reduce using rule 183 (labeled_statement -> ID COLON statement .)
    STRING_LITERAL  reduce using rule 183 (labeled_statement -> ID COLON statement .)
    LPAREN          reduce using rule 183 (labeled_statement -> ID COLON statement .)
    ELSE            reduce using rule 183 (labeled_statement -> ID COLON statement .)


state 252

    (184) labeled_statement -> CASE constant_expression COLON . statement
    (177) statement -> . labeled_statement
    (178) statement -> . compound_statement
    (179) statement -> . expression_statement
    (180) statement -> . selection_statement
    (181) statement -> . iteration_statement
    (182) statement -> . jump_statement
    (183) labeled_statement -> . ID COLON statement
    (184) labeled_statement -> . CASE constant_expression COLON statement
    (185) labeled_statement -> . DEFAULT COLON statement
    (186) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (187) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (188) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (189) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (194) expression_statement -> . SEMICOLON
    (195) expression_statement -> . expression SEMICOLON
    (196) selection_statement -> . IF LPAREN expression RPAREN statement
    (197) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (198) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (199) iteration_statement -> . WHILE LPAREN expression RPAREN
    (200) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (201) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (202) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (203) jump_statement -> . GOTO ID SEMICOLON
    (204) jump_statement -> . CONTINUE SEMICOLON
    (205) jump_statement -> . BREAK SEMICOLON
    (206) jump_statement -> . RETURN SEMICOLON
    (207) jump_statement -> . RETURN expression SEMICOLON
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    ID              shift and go to state 80
    CASE            shift and go to state 81
    DEFAULT         shift and go to state 82
    LCURLYBRACKET   shift and go to state 46
    SEMICOLON       shift and go to state 79
    IF              shift and go to state 84
    SWITCH          shift and go to state 86
    WHILE           shift and go to state 87
    DO              shift and go to state 88
    FOR             shift and go to state 89
    GOTO            shift and go to state 90
    CONTINUE        shift and go to state 91
    BREAK           shift and go to state 92
    RETURN          shift and go to state 93
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    statement                      shift and go to state 314
    labeled_statement              shift and go to state 73
    compound_statement             shift and go to state 74
    expression_statement           shift and go to state 75
    selection_statement            shift and go to state 76
    iteration_statement            shift and go to state 77
    jump_statement                 shift and go to state 78
    expression                     shift and go to state 83
    assignment_expression          shift and go to state 94
    conditional_expression         shift and go to state 95
    unary_expression               shift and go to state 96
    logical_or_expression          shift and go to state 97
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 253

    (185) labeled_statement -> DEFAULT COLON statement .

    RCURLYBRACKET   reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)
    ID              reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)
    CASE            reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)
    LCURLYBRACKET   reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)
    SEMICOLON       reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)
    IF              reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)
    SWITCH          reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)
    WHILE           reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)
    DO              reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)
    FOR             reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)
    GOTO            reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)
    CONTINUE        reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)
    BREAK           reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)
    RETURN          reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)
    INCREMENT       reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)
    DECREMENT       reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)
    SIZEOF          reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)
    AND             reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)
    MULTIPLY        reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)
    PLUS            reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)
    MINUS           reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)
    NOT             reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)
    LNOT            reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)
    CHAR_CONST      reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)
    INT_CONST       reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)
    FLOAT_CONST     reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)
    OCTAL_CONST     reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)
    HEX_CONST       reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)
    BIN_CONST       reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)
    STRING_LITERAL  reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)
    LPAREN          reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)
    ELSE            reduce using rule 185 (labeled_statement -> DEFAULT COLON statement .)


state 254

    (78) expression -> expression COMMA assignment_expression .

    SEMICOLON       reduce using rule 78 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 78 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 78 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 78 (expression -> expression COMMA assignment_expression .)
    RSQUAREBRACKET  reduce using rule 78 (expression -> expression COMMA assignment_expression .)


state 255

    (196) selection_statement -> IF LPAREN expression . RPAREN statement
    (197) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (78) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 315
    COMMA           shift and go to state 167


state 256

    (9) primary_expression -> LPAREN expression RPAREN .

    LSQUAREBRACKET  reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    PERIOD          reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    ARROW           reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    INCREMENT       reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    DECREMENT       reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    MULTIPLYEQUAL   reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDEEQUAL     reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    MODEQUAL        reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    PLUSEQUAL       reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    MINUSEQUAL      reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFTEQUAL     reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFTEQUAL     reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    ANDEQUAL        reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    XOREQUAL        reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    OREQUAL         reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    NOTEQUAL        reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    CONDOP          reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    RSQUAREBRACKET  reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)
    RCURLYBRACKET   reduce using rule 9 (primary_expression -> LPAREN expression RPAREN .)


state 257

    (33) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 132
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119

    cast_expression                shift and go to state 316
    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    primary_expression             shift and go to state 105

state 258

    (160) type_name -> specifier_qualifier_list abstract_declarator .

    RPAREN          reduce using rule 160 (type_name -> specifier_qualifier_list abstract_declarator .)


state 259

    (161) abstract_declarator -> pointer .
    (163) abstract_declarator -> pointer . direct_abstract_declarator
    (164) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (165) direct_abstract_declarator -> . LSQUAREBRACKET RSQUAREBRACKET
    (166) direct_abstract_declarator -> . LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (167) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (168) direct_abstract_declarator -> . direct_abstract_declarator LPAREN constant_expression RPAREN
    (169) direct_abstract_declarator -> . LPAREN RPAREN
    (170) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (171) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

    RPAREN          reduce using rule 161 (abstract_declarator -> pointer .)
    LPAREN          shift and go to state 260
    LSQUAREBRACKET  shift and go to state 234

    direct_abstract_declarator     shift and go to state 297

state 260

    (164) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (169) direct_abstract_declarator -> LPAREN . RPAREN
    (170) direct_abstract_declarator -> LPAREN . parameter_type_list RPAREN
    (161) abstract_declarator -> . pointer
    (162) abstract_declarator -> . direct_abstract_declarator
    (163) abstract_declarator -> . pointer direct_abstract_declarator
    (150) parameter_type_list -> . parameter_list
    (151) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (144) pointer -> . MULTIPLY
    (145) pointer -> . MULTIPLY type_qualifier_list
    (146) pointer -> . MULTIPLY pointer
    (147) pointer -> . MULTIPLY type_qualifier_list pointer
    (164) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (165) direct_abstract_declarator -> . LSQUAREBRACKET RSQUAREBRACKET
    (166) direct_abstract_declarator -> . LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (167) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (168) direct_abstract_declarator -> . direct_abstract_declarator LPAREN constant_expression RPAREN
    (169) direct_abstract_declarator -> . LPAREN RPAREN
    (170) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (171) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN
    (152) parameter_list -> . parameter_declaration
    (153) parameter_list -> . parameter_list COMMA parameter_declaration
    (154) parameter_declaration -> . declaration_specifiers declarator
    (155) parameter_declaration -> . declaration_specifiers abstract_declarator
    (156) parameter_declaration -> . declaration_specifiers
    (82) declaration_specifiers -> . storage_class_specifier
    (83) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (84) declaration_specifiers -> . type_specifier
    (85) declaration_specifiers -> . type_specifier declaration_specifiers
    (86) declaration_specifiers -> . type_qualifier
    (87) declaration_specifiers -> . type_qualifier declaration_specifiers
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . EXTERN
    (94) storage_class_specifier -> . STATIC
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) type_specifier -> . VOID
    (98) type_specifier -> . CHAR
    (99) type_specifier -> . SHORT
    (100) type_specifier -> . INT
    (101) type_specifier -> . LONG
    (102) type_specifier -> . FLOAT
    (103) type_specifier -> . DOUBLE
    (104) type_specifier -> . SIGNED
    (105) type_specifier -> . UNSIGNED
    (106) type_specifier -> . struct_or_union_specifier
    (107) type_specifier -> . enum_specifier
    (108) type_specifier -> . TYPE_NAME
    (133) type_qualifier -> . CONST
    (134) type_qualifier -> . VOLATILE
    (109) struct_or_union_specifier -> . struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (110) struct_or_union_specifier -> . struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (111) struct_or_union_specifier -> . struct_or_union ID
    (126) enum_specifier -> . ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET
    (127) enum_specifier -> . ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET
    (128) enum_specifier -> . ENUM ID
    (112) struct_or_union -> . STRUCT
    (113) struct_or_union -> . UNION

    RPAREN          shift and go to state 299
    MULTIPLY        shift and go to state 31
    LPAREN          shift and go to state 260
    LSQUAREBRACKET  shift and go to state 234
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    TYPE_NAME       shift and go to state 28
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37

    abstract_declarator            shift and go to state 300
    parameter_type_list            shift and go to state 301
    pointer                        shift and go to state 259
    direct_abstract_declarator     shift and go to state 232
    parameter_list                 shift and go to state 137
    parameter_declaration          shift and go to state 139
    declaration_specifiers         shift and go to state 140
    storage_class_specifier        shift and go to state 7
    type_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 9
    struct_or_union_specifier      shift and go to state 26
    enum_specifier                 shift and go to state 27
    struct_or_union                shift and go to state 34

state 261

    (198) selection_statement -> SWITCH LPAREN expression . RPAREN statement
    (78) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 317
    COMMA           shift and go to state 167


state 262

    (199) iteration_statement -> WHILE LPAREN expression . RPAREN
    (78) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 318
    COMMA           shift and go to state 167


state 263

    (200) iteration_statement -> DO statement WHILE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 319


state 264

    (201) iteration_statement -> FOR LPAREN expression_statement . expression_statement RPAREN statement
    (202) iteration_statement -> FOR LPAREN expression_statement . expression_statement expression RPAREN statement
    (194) expression_statement -> . SEMICOLON
    (195) expression_statement -> . expression SEMICOLON
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 79
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    expression_statement           shift and go to state 320
    expression                     shift and go to state 83
    assignment_expression          shift and go to state 94
    conditional_expression         shift and go to state 95
    unary_expression               shift and go to state 96
    logical_or_expression          shift and go to state 97
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 265

    (203) jump_statement -> GOTO ID SEMICOLON .

    RCURLYBRACKET   reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)
    ID              reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)
    CASE            reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)
    DEFAULT         reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)
    LCURLYBRACKET   reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)
    SEMICOLON       reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)
    IF              reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)
    SWITCH          reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)
    WHILE           reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)
    DO              reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)
    FOR             reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)
    GOTO            reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)
    CONTINUE        reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)
    BREAK           reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)
    RETURN          reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)
    INCREMENT       reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)
    DECREMENT       reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)
    SIZEOF          reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)
    AND             reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)
    MULTIPLY        reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)
    PLUS            reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)
    MINUS           reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)
    NOT             reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)
    LNOT            reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)
    CHAR_CONST      reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)
    INT_CONST       reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)
    FLOAT_CONST     reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)
    OCTAL_CONST     reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)
    HEX_CONST       reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)
    BIN_CONST       reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)
    STRING_LITERAL  reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)
    LPAREN          reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)
    ELSE            reduce using rule 203 (jump_statement -> GOTO ID SEMICOLON .)


state 266

    (207) jump_statement -> RETURN expression SEMICOLON .

    RCURLYBRACKET   reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)
    ID              reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)
    CASE            reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)
    DEFAULT         reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)
    LCURLYBRACKET   reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)
    DO              reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)
    GOTO            reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)
    INCREMENT       reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)
    DECREMENT       reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)
    SIZEOF          reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)
    AND             reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)
    MULTIPLY        reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)
    PLUS            reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)
    NOT             reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)
    LNOT            reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)
    CHAR_CONST      reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)
    INT_CONST       reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)
    FLOAT_CONST     reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)
    OCTAL_CONST     reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)
    HEX_CONST       reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)
    BIN_CONST       reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 207 (jump_statement -> RETURN expression SEMICOLON .)


state 267

    (65) assignment_expression -> unary_expression assignment_operator assignment_expression .

    SEMICOLON       reduce using rule 65 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 65 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 65 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RCURLYBRACKET   reduce using rule 65 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 65 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RSQUAREBRACKET  reduce using rule 65 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 268

    (63) conditional_expression -> logical_or_expression CONDOP expression . COLON conditional_expression
    (78) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 321
    COMMA           shift and go to state 167


state 269

    (61) logical_or_expression -> logical_or_expression LOR logical_and_expression .
    (59) logical_and_expression -> logical_and_expression . LAND inclusive_or_expression

    CONDOP          reduce using rule 61 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    LOR             reduce using rule 61 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    SEMICOLON       reduce using rule 61 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    COMMA           reduce using rule 61 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RSQUAREBRACKET  reduce using rule 61 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    COLON           reduce using rule 61 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RPAREN          reduce using rule 61 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RCURLYBRACKET   reduce using rule 61 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    LAND            shift and go to state 207


state 270

    (11) postfix_expression -> postfix_expression LSQUAREBRACKET expression . RSQUAREBRACKET
    (78) expression -> expression . COMMA assignment_expression

    RSQUAREBRACKET  shift and go to state 322
    COMMA           shift and go to state 167


state 271

    (12) postfix_expression -> postfix_expression LPAREN RPAREN .

    LSQUAREBRACKET  reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PERIOD          reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ARROW           reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    INCREMENT       reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DECREMENT       reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUALS          reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MULTIPLYEQUAL   reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDEEQUAL     reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODEQUAL        reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSEQUAL       reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSEQUAL      reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFTEQUAL     reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFTEQUAL     reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ANDEQUAL        reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOREQUAL        reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OREQUAL         reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MULTIPLY        reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDE          reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD             reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFT          reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFT          reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LESS            reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GREATER         reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LESSEQUAL       reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GREATEREQUAL    reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUAL           reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NOTEQUAL        reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND             reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOR             reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR              reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LAND            reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    CONDOP          reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LOR             reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMICOLON       reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSQUAREBRACKET  reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RCURLYBRACKET   reduce using rule 12 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 272

    (13) postfix_expression -> postfix_expression LPAREN argument_expression_list . RPAREN
    (19) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 323
    COMMA           shift and go to state 324


state 273

    (18) argument_expression_list -> assignment_expression .

    RPAREN          reduce using rule 18 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 18 (argument_expression_list -> assignment_expression .)


state 274

    (14) postfix_expression -> postfix_expression PERIOD ID .

    LSQUAREBRACKET  reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    LPAREN          reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    PERIOD          reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    ARROW           reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    INCREMENT       reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    DECREMENT       reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    EQUALS          reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    MULTIPLYEQUAL   reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    DIVIDEEQUAL     reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    MODEQUAL        reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    PLUSEQUAL       reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    MINUSEQUAL      reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    LSHIFTEQUAL     reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    RSHIFTEQUAL     reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    ANDEQUAL        reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    XOREQUAL        reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    OREQUAL         reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    MULTIPLY        reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    DIVIDE          reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    MOD             reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    PLUS            reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    MINUS           reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    LSHIFT          reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    RSHIFT          reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    LESS            reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    GREATER         reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    LESSEQUAL       reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    GREATEREQUAL    reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    EQUAL           reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    NOTEQUAL        reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    AND             reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    XOR             reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    OR              reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    LAND            reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    CONDOP          reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    LOR             reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    SEMICOLON       reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    COMMA           reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    RSQUAREBRACKET  reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    COLON           reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    RPAREN          reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)
    RCURLYBRACKET   reduce using rule 14 (postfix_expression -> postfix_expression PERIOD ID .)


state 275

    (15) postfix_expression -> postfix_expression ARROW ID .

    LSQUAREBRACKET  reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    LPAREN          reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    PERIOD          reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    ARROW           reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    INCREMENT       reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    DECREMENT       reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    EQUALS          reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    MULTIPLYEQUAL   reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    DIVIDEEQUAL     reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    MODEQUAL        reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    PLUSEQUAL       reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    MINUSEQUAL      reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    LSHIFTEQUAL     reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    RSHIFTEQUAL     reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    ANDEQUAL        reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    XOREQUAL        reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    OREQUAL         reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    MULTIPLY        reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    DIVIDE          reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    MOD             reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    PLUS            reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    MINUS           reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    LSHIFT          reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    RSHIFT          reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    LESS            reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    GREATER         reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    LESSEQUAL       reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    GREATEREQUAL    reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    EQUAL           reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    NOTEQUAL        reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    AND             reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    XOR             reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    OR              reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    LAND            reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    CONDOP          reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    LOR             reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    SEMICOLON       reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    COMMA           reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    RSQUAREBRACKET  reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    COLON           reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    RPAREN          reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)
    RCURLYBRACKET   reduce using rule 15 (postfix_expression -> postfix_expression ARROW ID .)


state 276

    (25) unary_expression -> SIZEOF LPAREN type_name . RPAREN

    RPAREN          shift and go to state 325


state 277

    (59) logical_and_expression -> logical_and_expression LAND inclusive_or_expression .
    (57) inclusive_or_expression -> inclusive_or_expression . OR exclusive_or_expression

    LAND            reduce using rule 59 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    CONDOP          reduce using rule 59 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    LOR             reduce using rule 59 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    SEMICOLON       reduce using rule 59 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    COMMA           reduce using rule 59 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RSQUAREBRACKET  reduce using rule 59 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    COLON           reduce using rule 59 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RPAREN          reduce using rule 59 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RCURLYBRACKET   reduce using rule 59 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    OR              shift and go to state 208


state 278

    (57) inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .
    (55) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR              reduce using rule 57 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    LAND            reduce using rule 57 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    CONDOP          reduce using rule 57 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    LOR             reduce using rule 57 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    SEMICOLON       reduce using rule 57 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    COMMA           reduce using rule 57 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RSQUAREBRACKET  reduce using rule 57 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    COLON           reduce using rule 57 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RPAREN          reduce using rule 57 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RCURLYBRACKET   reduce using rule 57 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    XOR             shift and go to state 209


state 279

    (55) exclusive_or_expression -> exclusive_or_expression XOR and_expression .
    (53) and_expression -> and_expression . AND equality_expression

    XOR             reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    OR              reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    LAND            reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    CONDOP          reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    LOR             reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    SEMICOLON       reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COMMA           reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RSQUAREBRACKET  reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COLON           reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RPAREN          reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RCURLYBRACKET   reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    AND             shift and go to state 210


state 280

    (53) and_expression -> and_expression AND equality_expression .
    (50) equality_expression -> equality_expression . EQUAL relational_expression
    (51) equality_expression -> equality_expression . NOTEQUAL relational_expression

    AND             reduce using rule 53 (and_expression -> and_expression AND equality_expression .)
    XOR             reduce using rule 53 (and_expression -> and_expression AND equality_expression .)
    OR              reduce using rule 53 (and_expression -> and_expression AND equality_expression .)
    LAND            reduce using rule 53 (and_expression -> and_expression AND equality_expression .)
    CONDOP          reduce using rule 53 (and_expression -> and_expression AND equality_expression .)
    LOR             reduce using rule 53 (and_expression -> and_expression AND equality_expression .)
    SEMICOLON       reduce using rule 53 (and_expression -> and_expression AND equality_expression .)
    COMMA           reduce using rule 53 (and_expression -> and_expression AND equality_expression .)
    RSQUAREBRACKET  reduce using rule 53 (and_expression -> and_expression AND equality_expression .)
    COLON           reduce using rule 53 (and_expression -> and_expression AND equality_expression .)
    RPAREN          reduce using rule 53 (and_expression -> and_expression AND equality_expression .)
    RCURLYBRACKET   reduce using rule 53 (and_expression -> and_expression AND equality_expression .)
    EQUAL           shift and go to state 211
    NOTEQUAL        shift and go to state 212


state 281

    (50) equality_expression -> equality_expression EQUAL relational_expression .
    (45) relational_expression -> relational_expression . LESS shift_expression
    (46) relational_expression -> relational_expression . GREATER shift_expression
    (47) relational_expression -> relational_expression . LESSEQUAL shift_expression
    (48) relational_expression -> relational_expression . GREATEREQUAL shift_expression

    EQUAL           reduce using rule 50 (equality_expression -> equality_expression EQUAL relational_expression .)
    NOTEQUAL        reduce using rule 50 (equality_expression -> equality_expression EQUAL relational_expression .)
    AND             reduce using rule 50 (equality_expression -> equality_expression EQUAL relational_expression .)
    XOR             reduce using rule 50 (equality_expression -> equality_expression EQUAL relational_expression .)
    OR              reduce using rule 50 (equality_expression -> equality_expression EQUAL relational_expression .)
    LAND            reduce using rule 50 (equality_expression -> equality_expression EQUAL relational_expression .)
    CONDOP          reduce using rule 50 (equality_expression -> equality_expression EQUAL relational_expression .)
    LOR             reduce using rule 50 (equality_expression -> equality_expression EQUAL relational_expression .)
    SEMICOLON       reduce using rule 50 (equality_expression -> equality_expression EQUAL relational_expression .)
    COMMA           reduce using rule 50 (equality_expression -> equality_expression EQUAL relational_expression .)
    RSQUAREBRACKET  reduce using rule 50 (equality_expression -> equality_expression EQUAL relational_expression .)
    COLON           reduce using rule 50 (equality_expression -> equality_expression EQUAL relational_expression .)
    RPAREN          reduce using rule 50 (equality_expression -> equality_expression EQUAL relational_expression .)
    RCURLYBRACKET   reduce using rule 50 (equality_expression -> equality_expression EQUAL relational_expression .)
    LESS            shift and go to state 213
    GREATER         shift and go to state 214
    LESSEQUAL       shift and go to state 215
    GREATEREQUAL    shift and go to state 216


state 282

    (51) equality_expression -> equality_expression NOTEQUAL relational_expression .
    (45) relational_expression -> relational_expression . LESS shift_expression
    (46) relational_expression -> relational_expression . GREATER shift_expression
    (47) relational_expression -> relational_expression . LESSEQUAL shift_expression
    (48) relational_expression -> relational_expression . GREATEREQUAL shift_expression

    EQUAL           reduce using rule 51 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    NOTEQUAL        reduce using rule 51 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    AND             reduce using rule 51 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    XOR             reduce using rule 51 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    OR              reduce using rule 51 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    LAND            reduce using rule 51 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    CONDOP          reduce using rule 51 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    LOR             reduce using rule 51 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    SEMICOLON       reduce using rule 51 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    COMMA           reduce using rule 51 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    RSQUAREBRACKET  reduce using rule 51 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    COLON           reduce using rule 51 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    RPAREN          reduce using rule 51 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    RCURLYBRACKET   reduce using rule 51 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    LESS            shift and go to state 213
    GREATER         shift and go to state 214
    LESSEQUAL       shift and go to state 215
    GREATEREQUAL    shift and go to state 216


state 283

    (45) relational_expression -> relational_expression LESS shift_expression .
    (42) shift_expression -> shift_expression . LSHIFT additive_expression
    (43) shift_expression -> shift_expression . RSHIFT additive_expression

    LESS            reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    GREATER         reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    LESSEQUAL       reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    GREATEREQUAL    reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    EQUAL           reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    NOTEQUAL        reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    AND             reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    XOR             reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    OR              reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    LAND            reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    CONDOP          reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    LOR             reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    SEMICOLON       reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    COMMA           reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    RSQUAREBRACKET  reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    COLON           reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    RPAREN          reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    RCURLYBRACKET   reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    LSHIFT          shift and go to state 217
    RSHIFT          shift and go to state 218


state 284

    (46) relational_expression -> relational_expression GREATER shift_expression .
    (42) shift_expression -> shift_expression . LSHIFT additive_expression
    (43) shift_expression -> shift_expression . RSHIFT additive_expression

    LESS            reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    GREATER         reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    LESSEQUAL       reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    GREATEREQUAL    reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    EQUAL           reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    NOTEQUAL        reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    AND             reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    XOR             reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    OR              reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    LAND            reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    CONDOP          reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    LOR             reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    SEMICOLON       reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    COMMA           reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    RSQUAREBRACKET  reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    COLON           reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    RPAREN          reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    RCURLYBRACKET   reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    LSHIFT          shift and go to state 217
    RSHIFT          shift and go to state 218


state 285

    (47) relational_expression -> relational_expression LESSEQUAL shift_expression .
    (42) shift_expression -> shift_expression . LSHIFT additive_expression
    (43) shift_expression -> shift_expression . RSHIFT additive_expression

    LESS            reduce using rule 47 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    GREATER         reduce using rule 47 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    LESSEQUAL       reduce using rule 47 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    GREATEREQUAL    reduce using rule 47 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    EQUAL           reduce using rule 47 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    NOTEQUAL        reduce using rule 47 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    AND             reduce using rule 47 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    XOR             reduce using rule 47 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    OR              reduce using rule 47 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    LAND            reduce using rule 47 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    CONDOP          reduce using rule 47 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    LOR             reduce using rule 47 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    SEMICOLON       reduce using rule 47 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    COMMA           reduce using rule 47 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    RSQUAREBRACKET  reduce using rule 47 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    COLON           reduce using rule 47 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    RPAREN          reduce using rule 47 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    RCURLYBRACKET   reduce using rule 47 (relational_expression -> relational_expression LESSEQUAL shift_expression .)
    LSHIFT          shift and go to state 217
    RSHIFT          shift and go to state 218


state 286

    (48) relational_expression -> relational_expression GREATEREQUAL shift_expression .
    (42) shift_expression -> shift_expression . LSHIFT additive_expression
    (43) shift_expression -> shift_expression . RSHIFT additive_expression

    LESS            reduce using rule 48 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    GREATER         reduce using rule 48 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    LESSEQUAL       reduce using rule 48 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    GREATEREQUAL    reduce using rule 48 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    EQUAL           reduce using rule 48 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    NOTEQUAL        reduce using rule 48 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    AND             reduce using rule 48 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    XOR             reduce using rule 48 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    OR              reduce using rule 48 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    LAND            reduce using rule 48 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    CONDOP          reduce using rule 48 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    LOR             reduce using rule 48 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    SEMICOLON       reduce using rule 48 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    COMMA           reduce using rule 48 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    RSQUAREBRACKET  reduce using rule 48 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    COLON           reduce using rule 48 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    RPAREN          reduce using rule 48 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    RCURLYBRACKET   reduce using rule 48 (relational_expression -> relational_expression GREATEREQUAL shift_expression .)
    LSHIFT          shift and go to state 217
    RSHIFT          shift and go to state 218


state 287

    (42) shift_expression -> shift_expression LSHIFT additive_expression .
    (39) additive_expression -> additive_expression . PLUS multiplicative_expression
    (40) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 42 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSHIFT          reduce using rule 42 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LESS            reduce using rule 42 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GREATER         reduce using rule 42 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LESSEQUAL       reduce using rule 42 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GREATEREQUAL    reduce using rule 42 (shift_expression -> shift_expression LSHIFT additive_expression .)
    EQUAL           reduce using rule 42 (shift_expression -> shift_expression LSHIFT additive_expression .)
    NOTEQUAL        reduce using rule 42 (shift_expression -> shift_expression LSHIFT additive_expression .)
    AND             reduce using rule 42 (shift_expression -> shift_expression LSHIFT additive_expression .)
    XOR             reduce using rule 42 (shift_expression -> shift_expression LSHIFT additive_expression .)
    OR              reduce using rule 42 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LAND            reduce using rule 42 (shift_expression -> shift_expression LSHIFT additive_expression .)
    CONDOP          reduce using rule 42 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LOR             reduce using rule 42 (shift_expression -> shift_expression LSHIFT additive_expression .)
    SEMICOLON       reduce using rule 42 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COMMA           reduce using rule 42 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSQUAREBRACKET  reduce using rule 42 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COLON           reduce using rule 42 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RPAREN          reduce using rule 42 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RCURLYBRACKET   reduce using rule 42 (shift_expression -> shift_expression LSHIFT additive_expression .)
    PLUS            shift and go to state 219
    MINUS           shift and go to state 220


state 288

    (43) shift_expression -> shift_expression RSHIFT additive_expression .
    (39) additive_expression -> additive_expression . PLUS multiplicative_expression
    (40) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 43 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSHIFT          reduce using rule 43 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LESS            reduce using rule 43 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GREATER         reduce using rule 43 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LESSEQUAL       reduce using rule 43 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GREATEREQUAL    reduce using rule 43 (shift_expression -> shift_expression RSHIFT additive_expression .)
    EQUAL           reduce using rule 43 (shift_expression -> shift_expression RSHIFT additive_expression .)
    NOTEQUAL        reduce using rule 43 (shift_expression -> shift_expression RSHIFT additive_expression .)
    AND             reduce using rule 43 (shift_expression -> shift_expression RSHIFT additive_expression .)
    XOR             reduce using rule 43 (shift_expression -> shift_expression RSHIFT additive_expression .)
    OR              reduce using rule 43 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LAND            reduce using rule 43 (shift_expression -> shift_expression RSHIFT additive_expression .)
    CONDOP          reduce using rule 43 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LOR             reduce using rule 43 (shift_expression -> shift_expression RSHIFT additive_expression .)
    SEMICOLON       reduce using rule 43 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COMMA           reduce using rule 43 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSQUAREBRACKET  reduce using rule 43 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COLON           reduce using rule 43 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RPAREN          reduce using rule 43 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RCURLYBRACKET   reduce using rule 43 (shift_expression -> shift_expression RSHIFT additive_expression .)
    PLUS            shift and go to state 219
    MINUS           shift and go to state 220


state 289

    (39) additive_expression -> additive_expression PLUS multiplicative_expression .
    (35) multiplicative_expression -> multiplicative_expression . MULTIPLY cast_expression
    (36) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (37) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LSHIFT          reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RSHIFT          reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS            reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER         reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESSEQUAL       reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATEREQUAL    reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQUAL           reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NOTEQUAL        reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    XOR             reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LAND            reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CONDOP          reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LOR             reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMICOLON       reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RSQUAREBRACKET  reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COLON           reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RCURLYBRACKET   reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MULTIPLY        shift and go to state 221
    DIVIDE          shift and go to state 222
    MOD             shift and go to state 223


state 290

    (40) additive_expression -> additive_expression MINUS multiplicative_expression .
    (35) multiplicative_expression -> multiplicative_expression . MULTIPLY cast_expression
    (36) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (37) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LSHIFT          reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RSHIFT          reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS            reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER         reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESSEQUAL       reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATEREQUAL    reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQUAL           reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NOTEQUAL        reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    XOR             reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LAND            reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CONDOP          reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LOR             reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMICOLON       reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RSQUAREBRACKET  reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COLON           reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RCURLYBRACKET   reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MULTIPLY        shift and go to state 221
    DIVIDE          shift and go to state 222
    MOD             shift and go to state 223


state 291

    (35) multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .

    MULTIPLY        reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    DIVIDE          reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    MOD             reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    PLUS            reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    MINUS           reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    LSHIFT          reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    RSHIFT          reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    LESS            reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    GREATER         reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    LESSEQUAL       reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    GREATEREQUAL    reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    EQUAL           reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    NOTEQUAL        reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    AND             reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    XOR             reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    OR              reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    LAND            reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    CONDOP          reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    LOR             reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    SEMICOLON       reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    COMMA           reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    RSQUAREBRACKET  reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    COLON           reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    RPAREN          reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    RCURLYBRACKET   reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)


state 292

    (36) multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .

    MULTIPLY        reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    DIVIDE          reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MOD             reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    PLUS            reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MINUS           reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LSHIFT          reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RSHIFT          reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LESS            reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GREATER         reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LESSEQUAL       reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GREATEREQUAL    reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    EQUAL           reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    NOTEQUAL        reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    AND             reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    XOR             reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    OR              reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LAND            reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    CONDOP          reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LOR             reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    SEMICOLON       reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COMMA           reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RSQUAREBRACKET  reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COLON           reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RPAREN          reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RCURLYBRACKET   reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)


state 293

    (37) multiplicative_expression -> multiplicative_expression MOD cast_expression .

    MULTIPLY        reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    DIVIDE          reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MOD             reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    PLUS            reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MINUS           reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LSHIFT          reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RSHIFT          reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LESS            reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    GREATER         reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LESSEQUAL       reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    GREATEREQUAL    reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    EQUAL           reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    NOTEQUAL        reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    AND             reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    XOR             reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    OR              reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LAND            reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    CONDOP          reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LOR             reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    SEMICOLON       reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    COMMA           reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RSQUAREBRACKET  reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    COLON           reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RPAREN          reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RCURLYBRACKET   reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)


state 294

    (158) identifier_list -> identifier_list COMMA ID .

    RPAREN          reduce using rule 158 (identifier_list -> identifier_list COMMA ID .)
    COMMA           reduce using rule 158 (identifier_list -> identifier_list COMMA ID .)


state 295

    (151) parameter_type_list -> parameter_list COMMA ELLIPSIS .

    RPAREN          reduce using rule 151 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)


state 296

    (153) parameter_list -> parameter_list COMMA parameter_declaration .

    COMMA           reduce using rule 153 (parameter_list -> parameter_list COMMA parameter_declaration .)
    RPAREN          reduce using rule 153 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 297

    (163) abstract_declarator -> pointer direct_abstract_declarator .
    (167) direct_abstract_declarator -> direct_abstract_declarator . LPAREN RPAREN
    (168) direct_abstract_declarator -> direct_abstract_declarator . LPAREN constant_expression RPAREN
    (171) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list RPAREN

    COMMA           reduce using rule 163 (abstract_declarator -> pointer direct_abstract_declarator .)
    RPAREN          reduce using rule 163 (abstract_declarator -> pointer direct_abstract_declarator .)
    LPAREN          shift and go to state 298


state 298

    (167) direct_abstract_declarator -> direct_abstract_declarator LPAREN . RPAREN
    (168) direct_abstract_declarator -> direct_abstract_declarator LPAREN . constant_expression RPAREN
    (171) direct_abstract_declarator -> direct_abstract_declarator LPAREN . parameter_type_list RPAREN
    (79) constant_expression -> . conditional_expression
    (150) parameter_type_list -> . parameter_list
    (151) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (152) parameter_list -> . parameter_declaration
    (153) parameter_list -> . parameter_list COMMA parameter_declaration
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (154) parameter_declaration -> . declaration_specifiers declarator
    (155) parameter_declaration -> . declaration_specifiers abstract_declarator
    (156) parameter_declaration -> . declaration_specifiers
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (82) declaration_specifiers -> . storage_class_specifier
    (83) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (84) declaration_specifiers -> . type_specifier
    (85) declaration_specifiers -> . type_specifier declaration_specifiers
    (86) declaration_specifiers -> . type_qualifier
    (87) declaration_specifiers -> . type_qualifier declaration_specifiers
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . EXTERN
    (94) storage_class_specifier -> . STATIC
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) type_specifier -> . VOID
    (98) type_specifier -> . CHAR
    (99) type_specifier -> . SHORT
    (100) type_specifier -> . INT
    (101) type_specifier -> . LONG
    (102) type_specifier -> . FLOAT
    (103) type_specifier -> . DOUBLE
    (104) type_specifier -> . SIGNED
    (105) type_specifier -> . UNSIGNED
    (106) type_specifier -> . struct_or_union_specifier
    (107) type_specifier -> . enum_specifier
    (108) type_specifier -> . TYPE_NAME
    (133) type_qualifier -> . CONST
    (134) type_qualifier -> . VOLATILE
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (109) struct_or_union_specifier -> . struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (110) struct_or_union_specifier -> . struct_or_union LCURLYBRACKET struct_declaration_list RCURLYBRACKET
    (111) struct_or_union_specifier -> . struct_or_union ID
    (126) enum_specifier -> . ENUM LCURLYBRACKET enumerator_list RCURLYBRACKET
    (127) enum_specifier -> . ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET
    (128) enum_specifier -> . ENUM ID
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (112) struct_or_union -> . STRUCT
    (113) struct_or_union -> . UNION
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN

    RPAREN          shift and go to state 326
    TYPEDEF         shift and go to state 12
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 14
    AUTO            shift and go to state 15
    REGISTER        shift and go to state 16
    VOID            shift and go to state 17
    CHAR            shift and go to state 18
    SHORT           shift and go to state 19
    INT             shift and go to state 20
    LONG            shift and go to state 21
    FLOAT           shift and go to state 22
    DOUBLE          shift and go to state 23
    SIGNED          shift and go to state 24
    UNSIGNED        shift and go to state 25
    TYPE_NAME       shift and go to state 28
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    ENUM            shift and go to state 35
    STRUCT          shift and go to state 36
    UNION           shift and go to state 37
    LPAREN          shift and go to state 132
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119

    constant_expression            shift and go to state 327
    parameter_type_list            shift and go to state 328
    conditional_expression         shift and go to state 130
    parameter_list                 shift and go to state 137
    logical_or_expression          shift and go to state 97
    parameter_declaration          shift and go to state 139
    logical_and_expression         shift and go to state 104
    declaration_specifiers         shift and go to state 140
    inclusive_or_expression        shift and go to state 112
    storage_class_specifier        shift and go to state 7
    type_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 9
    exclusive_or_expression        shift and go to state 120
    struct_or_union_specifier      shift and go to state 26
    enum_specifier                 shift and go to state 27
    and_expression                 shift and go to state 121
    struct_or_union                shift and go to state 34
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126
    cast_expression                shift and go to state 102
    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    primary_expression             shift and go to state 105

state 299

    (169) direct_abstract_declarator -> LPAREN RPAREN .

    LPAREN          reduce using rule 169 (direct_abstract_declarator -> LPAREN RPAREN .)
    COMMA           reduce using rule 169 (direct_abstract_declarator -> LPAREN RPAREN .)
    RPAREN          reduce using rule 169 (direct_abstract_declarator -> LPAREN RPAREN .)


state 300

    (164) direct_abstract_declarator -> LPAREN abstract_declarator . RPAREN

    RPAREN          shift and go to state 329


state 301

    (170) direct_abstract_declarator -> LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 330


state 302

    (165) direct_abstract_declarator -> LSQUAREBRACKET RSQUAREBRACKET .

    LPAREN          reduce using rule 165 (direct_abstract_declarator -> LSQUAREBRACKET RSQUAREBRACKET .)
    COMMA           reduce using rule 165 (direct_abstract_declarator -> LSQUAREBRACKET RSQUAREBRACKET .)
    RPAREN          reduce using rule 165 (direct_abstract_declarator -> LSQUAREBRACKET RSQUAREBRACKET .)


state 303

    (166) direct_abstract_declarator -> LSQUAREBRACKET constant_expression . RSQUAREBRACKET

    RSQUAREBRACKET  shift and go to state 331


state 304

    (109) struct_or_union_specifier -> struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET .

    TYPEDEF         reduce using rule 109 (struct_or_union_specifier -> struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    EXTERN          reduce using rule 109 (struct_or_union_specifier -> struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    STATIC          reduce using rule 109 (struct_or_union_specifier -> struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    AUTO            reduce using rule 109 (struct_or_union_specifier -> struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    REGISTER        reduce using rule 109 (struct_or_union_specifier -> struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    VOID            reduce using rule 109 (struct_or_union_specifier -> struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    CHAR            reduce using rule 109 (struct_or_union_specifier -> struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    SHORT           reduce using rule 109 (struct_or_union_specifier -> struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    INT             reduce using rule 109 (struct_or_union_specifier -> struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    LONG            reduce using rule 109 (struct_or_union_specifier -> struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    FLOAT           reduce using rule 109 (struct_or_union_specifier -> struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    DOUBLE          reduce using rule 109 (struct_or_union_specifier -> struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    SIGNED          reduce using rule 109 (struct_or_union_specifier -> struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    UNSIGNED        reduce using rule 109 (struct_or_union_specifier -> struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    TYPE_NAME       reduce using rule 109 (struct_or_union_specifier -> struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    CONST           reduce using rule 109 (struct_or_union_specifier -> struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    VOLATILE        reduce using rule 109 (struct_or_union_specifier -> struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    ENUM            reduce using rule 109 (struct_or_union_specifier -> struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    STRUCT          reduce using rule 109 (struct_or_union_specifier -> struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    UNION           reduce using rule 109 (struct_or_union_specifier -> struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    SEMICOLON       reduce using rule 109 (struct_or_union_specifier -> struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    MULTIPLY        reduce using rule 109 (struct_or_union_specifier -> struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    ID              reduce using rule 109 (struct_or_union_specifier -> struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    LPAREN          reduce using rule 109 (struct_or_union_specifier -> struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    LSQUAREBRACKET  reduce using rule 109 (struct_or_union_specifier -> struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    COMMA           reduce using rule 109 (struct_or_union_specifier -> struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    RPAREN          reduce using rule 109 (struct_or_union_specifier -> struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)
    COLON           reduce using rule 109 (struct_or_union_specifier -> struct_or_union ID LCURLYBRACKET struct_declaration_list RCURLYBRACKET .)


state 305

    (116) struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .

    RCURLYBRACKET   reduce using rule 116 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    VOID            reduce using rule 116 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    CHAR            reduce using rule 116 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    SHORT           reduce using rule 116 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    INT             reduce using rule 116 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    LONG            reduce using rule 116 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 116 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 116 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    SIGNED          reduce using rule 116 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 116 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    TYPE_NAME       reduce using rule 116 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    CONST           reduce using rule 116 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    VOLATILE        reduce using rule 116 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    ENUM            reduce using rule 116 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 116 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    UNION           reduce using rule 116 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)


state 306

    (122) struct_declarator_list -> struct_declarator_list COMMA . struct_declarator
    (123) struct_declarator -> . declarator
    (124) struct_declarator -> . COLON constant_expression
    (125) struct_declarator -> . declarator COLON constant_expression
    (135) declarator -> . pointer direct_declarator
    (136) declarator -> . direct_declarator
    (144) pointer -> . MULTIPLY
    (145) pointer -> . MULTIPLY type_qualifier_list
    (146) pointer -> . MULTIPLY pointer
    (147) pointer -> . MULTIPLY type_qualifier_list pointer
    (137) direct_declarator -> . ID
    (138) direct_declarator -> . LPAREN declarator RPAREN
    (139) direct_declarator -> . direct_declarator LSQUAREBRACKET constant_expression RSQUAREBRACKET
    (140) direct_declarator -> . direct_declarator LSQUAREBRACKET RSQUAREBRACKET
    (141) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (142) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (143) direct_declarator -> . direct_declarator LPAREN RPAREN

    COLON           shift and go to state 241
    MULTIPLY        shift and go to state 31
    ID              shift and go to state 32
    LPAREN          shift and go to state 33

    struct_declarator              shift and go to state 332
    declarator                     shift and go to state 240
    pointer                        shift and go to state 10
    direct_declarator              shift and go to state 11

state 307

    (125) struct_declarator -> declarator COLON . constant_expression
    (79) constant_expression -> . conditional_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 132
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119

    constant_expression            shift and go to state 333
    conditional_expression         shift and go to state 130
    logical_or_expression          shift and go to state 97
    logical_and_expression         shift and go to state 104
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126
    cast_expression                shift and go to state 102
    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    primary_expression             shift and go to state 105

state 308

    (124) struct_declarator -> COLON constant_expression .

    SEMICOLON       reduce using rule 124 (struct_declarator -> COLON constant_expression .)
    COMMA           reduce using rule 124 (struct_declarator -> COLON constant_expression .)


state 309

    (130) enumerator_list -> enumerator_list COMMA enumerator .

    RCURLYBRACKET   reduce using rule 130 (enumerator_list -> enumerator_list COMMA enumerator .)
    COMMA           reduce using rule 130 (enumerator_list -> enumerator_list COMMA enumerator .)


state 310

    (132) enumerator -> ID EQUALS constant_expression .

    RCURLYBRACKET   reduce using rule 132 (enumerator -> ID EQUALS constant_expression .)
    COMMA           reduce using rule 132 (enumerator -> ID EQUALS constant_expression .)


state 311

    (127) enum_specifier -> ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET .

    TYPEDEF         reduce using rule 127 (enum_specifier -> ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    EXTERN          reduce using rule 127 (enum_specifier -> ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    STATIC          reduce using rule 127 (enum_specifier -> ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    AUTO            reduce using rule 127 (enum_specifier -> ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    REGISTER        reduce using rule 127 (enum_specifier -> ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    VOID            reduce using rule 127 (enum_specifier -> ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    CHAR            reduce using rule 127 (enum_specifier -> ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    SHORT           reduce using rule 127 (enum_specifier -> ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    INT             reduce using rule 127 (enum_specifier -> ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    LONG            reduce using rule 127 (enum_specifier -> ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    FLOAT           reduce using rule 127 (enum_specifier -> ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    DOUBLE          reduce using rule 127 (enum_specifier -> ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    SIGNED          reduce using rule 127 (enum_specifier -> ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    UNSIGNED        reduce using rule 127 (enum_specifier -> ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    TYPE_NAME       reduce using rule 127 (enum_specifier -> ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    CONST           reduce using rule 127 (enum_specifier -> ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    VOLATILE        reduce using rule 127 (enum_specifier -> ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    ENUM            reduce using rule 127 (enum_specifier -> ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    STRUCT          reduce using rule 127 (enum_specifier -> ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    UNION           reduce using rule 127 (enum_specifier -> ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    SEMICOLON       reduce using rule 127 (enum_specifier -> ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    MULTIPLY        reduce using rule 127 (enum_specifier -> ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    ID              reduce using rule 127 (enum_specifier -> ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    LPAREN          reduce using rule 127 (enum_specifier -> ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    LSQUAREBRACKET  reduce using rule 127 (enum_specifier -> ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    COMMA           reduce using rule 127 (enum_specifier -> ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    RPAREN          reduce using rule 127 (enum_specifier -> ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET .)
    COLON           reduce using rule 127 (enum_specifier -> ENUM ID LCURLYBRACKET enumerator_list RCURLYBRACKET .)


state 312

    (173) initializer -> LCURLYBRACKET initializer_list RCURLYBRACKET .

    SEMICOLON       reduce using rule 173 (initializer -> LCURLYBRACKET initializer_list RCURLYBRACKET .)
    COMMA           reduce using rule 173 (initializer -> LCURLYBRACKET initializer_list RCURLYBRACKET .)
    RCURLYBRACKET   reduce using rule 173 (initializer -> LCURLYBRACKET initializer_list RCURLYBRACKET .)


state 313

    (174) initializer -> LCURLYBRACKET initializer_list COMMA . RCURLYBRACKET
    (176) initializer_list -> initializer_list COMMA . initializer
    (172) initializer -> . assignment_expression
    (173) initializer -> . LCURLYBRACKET initializer_list RCURLYBRACKET
    (174) initializer -> . LCURLYBRACKET initializer_list COMMA RCURLYBRACKET
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCURLYBRACKET   shift and go to state 334
    LCURLYBRACKET   shift and go to state 157
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    initializer                    shift and go to state 335
    assignment_expression          shift and go to state 156
    conditional_expression         shift and go to state 95
    unary_expression               shift and go to state 96
    logical_or_expression          shift and go to state 97
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 314

    (184) labeled_statement -> CASE constant_expression COLON statement .

    RCURLYBRACKET   reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)
    ID              reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)
    CASE            reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)
    DEFAULT         reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)
    LCURLYBRACKET   reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)
    SEMICOLON       reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)
    IF              reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)
    SWITCH          reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)
    WHILE           reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)
    DO              reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)
    FOR             reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)
    GOTO            reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)
    CONTINUE        reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)
    BREAK           reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)
    RETURN          reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)
    INCREMENT       reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)
    DECREMENT       reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)
    SIZEOF          reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)
    AND             reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)
    MULTIPLY        reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)
    PLUS            reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)
    MINUS           reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)
    NOT             reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)
    LNOT            reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)
    CHAR_CONST      reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)
    INT_CONST       reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)
    FLOAT_CONST     reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)
    OCTAL_CONST     reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)
    HEX_CONST       reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)
    BIN_CONST       reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)
    STRING_LITERAL  reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)
    LPAREN          reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)
    ELSE            reduce using rule 184 (labeled_statement -> CASE constant_expression COLON statement .)


state 315

    (196) selection_statement -> IF LPAREN expression RPAREN . statement
    (197) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (177) statement -> . labeled_statement
    (178) statement -> . compound_statement
    (179) statement -> . expression_statement
    (180) statement -> . selection_statement
    (181) statement -> . iteration_statement
    (182) statement -> . jump_statement
    (183) labeled_statement -> . ID COLON statement
    (184) labeled_statement -> . CASE constant_expression COLON statement
    (185) labeled_statement -> . DEFAULT COLON statement
    (186) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (187) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (188) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (189) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (194) expression_statement -> . SEMICOLON
    (195) expression_statement -> . expression SEMICOLON
    (196) selection_statement -> . IF LPAREN expression RPAREN statement
    (197) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (198) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (199) iteration_statement -> . WHILE LPAREN expression RPAREN
    (200) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (201) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (202) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (203) jump_statement -> . GOTO ID SEMICOLON
    (204) jump_statement -> . CONTINUE SEMICOLON
    (205) jump_statement -> . BREAK SEMICOLON
    (206) jump_statement -> . RETURN SEMICOLON
    (207) jump_statement -> . RETURN expression SEMICOLON
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    ID              shift and go to state 80
    CASE            shift and go to state 81
    DEFAULT         shift and go to state 82
    LCURLYBRACKET   shift and go to state 46
    SEMICOLON       shift and go to state 79
    IF              shift and go to state 84
    SWITCH          shift and go to state 86
    WHILE           shift and go to state 87
    DO              shift and go to state 88
    FOR             shift and go to state 89
    GOTO            shift and go to state 90
    CONTINUE        shift and go to state 91
    BREAK           shift and go to state 92
    RETURN          shift and go to state 93
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    expression                     shift and go to state 83
    statement                      shift and go to state 336
    labeled_statement              shift and go to state 73
    compound_statement             shift and go to state 74
    expression_statement           shift and go to state 75
    selection_statement            shift and go to state 76
    iteration_statement            shift and go to state 77
    jump_statement                 shift and go to state 78
    assignment_expression          shift and go to state 94
    conditional_expression         shift and go to state 95
    unary_expression               shift and go to state 96
    logical_or_expression          shift and go to state 97
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 316

    (33) cast_expression -> LPAREN type_name RPAREN cast_expression .

    MULTIPLY        reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVIDE          reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MOD             reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUS            reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUS           reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFT          reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFT          reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LESS            reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GREATER         reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LESSEQUAL       reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GREATEREQUAL    reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQUAL           reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    NOTEQUAL        reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    AND             reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOR             reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OR              reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LAND            reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    CONDOP          reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LOR             reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SEMICOLON       reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COMMA           reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSQUAREBRACKET  reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COLON           reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RPAREN          reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQUALS          reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MULTIPLYEQUAL   reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVIDEEQUAL     reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MODEQUAL        reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUSEQUAL       reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUSEQUAL      reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFTEQUAL     reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFTEQUAL     reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ANDEQUAL        reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOREQUAL        reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OREQUAL         reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RCURLYBRACKET   reduce using rule 33 (cast_expression -> LPAREN type_name RPAREN cast_expression .)


state 317

    (198) selection_statement -> SWITCH LPAREN expression RPAREN . statement
    (177) statement -> . labeled_statement
    (178) statement -> . compound_statement
    (179) statement -> . expression_statement
    (180) statement -> . selection_statement
    (181) statement -> . iteration_statement
    (182) statement -> . jump_statement
    (183) labeled_statement -> . ID COLON statement
    (184) labeled_statement -> . CASE constant_expression COLON statement
    (185) labeled_statement -> . DEFAULT COLON statement
    (186) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (187) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (188) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (189) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (194) expression_statement -> . SEMICOLON
    (195) expression_statement -> . expression SEMICOLON
    (196) selection_statement -> . IF LPAREN expression RPAREN statement
    (197) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (198) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (199) iteration_statement -> . WHILE LPAREN expression RPAREN
    (200) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (201) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (202) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (203) jump_statement -> . GOTO ID SEMICOLON
    (204) jump_statement -> . CONTINUE SEMICOLON
    (205) jump_statement -> . BREAK SEMICOLON
    (206) jump_statement -> . RETURN SEMICOLON
    (207) jump_statement -> . RETURN expression SEMICOLON
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    ID              shift and go to state 80
    CASE            shift and go to state 81
    DEFAULT         shift and go to state 82
    LCURLYBRACKET   shift and go to state 46
    SEMICOLON       shift and go to state 79
    IF              shift and go to state 84
    SWITCH          shift and go to state 86
    WHILE           shift and go to state 87
    DO              shift and go to state 88
    FOR             shift and go to state 89
    GOTO            shift and go to state 90
    CONTINUE        shift and go to state 91
    BREAK           shift and go to state 92
    RETURN          shift and go to state 93
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    expression                     shift and go to state 83
    statement                      shift and go to state 337
    labeled_statement              shift and go to state 73
    compound_statement             shift and go to state 74
    expression_statement           shift and go to state 75
    selection_statement            shift and go to state 76
    iteration_statement            shift and go to state 77
    jump_statement                 shift and go to state 78
    assignment_expression          shift and go to state 94
    conditional_expression         shift and go to state 95
    unary_expression               shift and go to state 96
    logical_or_expression          shift and go to state 97
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 318

    (199) iteration_statement -> WHILE LPAREN expression RPAREN .

    RCURLYBRACKET   reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    ID              reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    CASE            reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    LCURLYBRACKET   reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    IF              reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    SWITCH          reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    WHILE           reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    DO              reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    FOR             reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    GOTO            reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    BREAK           reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    RETURN          reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    INCREMENT       reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    DECREMENT       reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    SIZEOF          reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    AND             reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    PLUS            reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    MINUS           reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    NOT             reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    LNOT            reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    CHAR_CONST      reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    INT_CONST       reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    FLOAT_CONST     reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    OCTAL_CONST     reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    HEX_CONST       reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    BIN_CONST       reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    STRING_LITERAL  reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    LPAREN          reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)
    ELSE            reduce using rule 199 (iteration_statement -> WHILE LPAREN expression RPAREN .)


state 319

    (200) iteration_statement -> DO statement WHILE LPAREN . expression RPAREN SEMICOLON
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    expression                     shift and go to state 338
    assignment_expression          shift and go to state 94
    conditional_expression         shift and go to state 95
    unary_expression               shift and go to state 96
    logical_or_expression          shift and go to state 97
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 320

    (201) iteration_statement -> FOR LPAREN expression_statement expression_statement . RPAREN statement
    (202) iteration_statement -> FOR LPAREN expression_statement expression_statement . expression RPAREN statement
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 339
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    expression                     shift and go to state 340
    assignment_expression          shift and go to state 94
    conditional_expression         shift and go to state 95
    unary_expression               shift and go to state 96
    logical_or_expression          shift and go to state 97
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 321

    (63) conditional_expression -> logical_or_expression CONDOP expression COLON . conditional_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 132
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119

    logical_or_expression          shift and go to state 97
    conditional_expression         shift and go to state 341
    logical_and_expression         shift and go to state 104
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126
    cast_expression                shift and go to state 102
    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    primary_expression             shift and go to state 105

state 322

    (11) postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .

    LSQUAREBRACKET  reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    LPAREN          reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    PERIOD          reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    ARROW           reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    INCREMENT       reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    DECREMENT       reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    EQUALS          reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    MULTIPLYEQUAL   reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    DIVIDEEQUAL     reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    MODEQUAL        reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    PLUSEQUAL       reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    MINUSEQUAL      reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    LSHIFTEQUAL     reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    RSHIFTEQUAL     reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    ANDEQUAL        reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    XOREQUAL        reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    OREQUAL         reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    MULTIPLY        reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    DIVIDE          reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    MOD             reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    PLUS            reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    MINUS           reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    LSHIFT          reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    RSHIFT          reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    LESS            reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    GREATER         reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    LESSEQUAL       reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    GREATEREQUAL    reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    EQUAL           reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    NOTEQUAL        reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    AND             reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    XOR             reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    OR              reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    LAND            reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    CONDOP          reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    LOR             reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    SEMICOLON       reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    COMMA           reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    RSQUAREBRACKET  reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    COLON           reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    RPAREN          reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)
    RCURLYBRACKET   reduce using rule 11 (postfix_expression -> postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET .)


state 323

    (13) postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .

    LSQUAREBRACKET  reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LPAREN          reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PERIOD          reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ARROW           reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    INCREMENT       reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DECREMENT       reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQUALS          reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MULTIPLYEQUAL   reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVIDEEQUAL     reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MODEQUAL        reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUSEQUAL       reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUSEQUAL      reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LSHIFTEQUAL     reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSHIFTEQUAL     reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ANDEQUAL        reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOREQUAL        reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OREQUAL         reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MULTIPLY        reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVIDE          reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MOD             reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUS            reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUS           reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LSHIFT          reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSHIFT          reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LESS            reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GREATER         reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LESSEQUAL       reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GREATEREQUAL    reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQUAL           reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    NOTEQUAL        reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AND             reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOR             reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OR              reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LAND            reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    CONDOP          reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LOR             reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SEMICOLON       reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COMMA           reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSQUAREBRACKET  reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COLON           reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RPAREN          reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RCURLYBRACKET   reduce using rule 13 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)


state 324

    (19) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    ID              shift and go to state 133
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    assignment_expression          shift and go to state 342
    conditional_expression         shift and go to state 95
    unary_expression               shift and go to state 96
    logical_or_expression          shift and go to state 97
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 325

    (25) unary_expression -> SIZEOF LPAREN type_name RPAREN .

    EQUALS          reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MULTIPLYEQUAL   reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVIDEEQUAL     reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MODEQUAL        reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUSEQUAL       reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUSEQUAL      reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFTEQUAL     reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFTEQUAL     reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ANDEQUAL        reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOREQUAL        reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OREQUAL         reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MULTIPLY        reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVIDE          reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MOD             reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUS            reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUS           reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LESS            reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GREATER         reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LESSEQUAL       reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GREATEREQUAL    reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQUAL           reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    NOTEQUAL        reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    AND             reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOR             reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OR              reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LAND            reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    CONDOP          reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LOR             reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SEMICOLON       reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COMMA           reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSQUAREBRACKET  reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COLON           reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RCURLYBRACKET   reduce using rule 25 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)


state 326

    (167) direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .

    LPAREN          reduce using rule 167 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    COMMA           reduce using rule 167 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    RPAREN          reduce using rule 167 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)


state 327

    (168) direct_abstract_declarator -> direct_abstract_declarator LPAREN constant_expression . RPAREN

    RPAREN          shift and go to state 343


state 328

    (171) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 344


state 329

    (164) direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .

    LPAREN          reduce using rule 164 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    COMMA           reduce using rule 164 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    RPAREN          reduce using rule 164 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)


state 330

    (170) direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .

    LPAREN          reduce using rule 170 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 170 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 170 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)


state 331

    (166) direct_abstract_declarator -> LSQUAREBRACKET constant_expression RSQUAREBRACKET .

    LPAREN          reduce using rule 166 (direct_abstract_declarator -> LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    COMMA           reduce using rule 166 (direct_abstract_declarator -> LSQUAREBRACKET constant_expression RSQUAREBRACKET .)
    RPAREN          reduce using rule 166 (direct_abstract_declarator -> LSQUAREBRACKET constant_expression RSQUAREBRACKET .)


state 332

    (122) struct_declarator_list -> struct_declarator_list COMMA struct_declarator .

    SEMICOLON       reduce using rule 122 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    COMMA           reduce using rule 122 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)


state 333

    (125) struct_declarator -> declarator COLON constant_expression .

    SEMICOLON       reduce using rule 125 (struct_declarator -> declarator COLON constant_expression .)
    COMMA           reduce using rule 125 (struct_declarator -> declarator COLON constant_expression .)


state 334

    (174) initializer -> LCURLYBRACKET initializer_list COMMA RCURLYBRACKET .

    SEMICOLON       reduce using rule 174 (initializer -> LCURLYBRACKET initializer_list COMMA RCURLYBRACKET .)
    COMMA           reduce using rule 174 (initializer -> LCURLYBRACKET initializer_list COMMA RCURLYBRACKET .)
    RCURLYBRACKET   reduce using rule 174 (initializer -> LCURLYBRACKET initializer_list COMMA RCURLYBRACKET .)


state 335

    (176) initializer_list -> initializer_list COMMA initializer .

    RCURLYBRACKET   reduce using rule 176 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 176 (initializer_list -> initializer_list COMMA initializer .)


state 336

    (196) selection_statement -> IF LPAREN expression RPAREN statement .
    (197) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

    RCURLYBRACKET   reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LCURLYBRACKET   reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INCREMENT       reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DECREMENT       reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AND             reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MULTIPLY        reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .)
    OCTAL_CONST     reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .)
    HEX_CONST       reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BIN_CONST       reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 345

  ! ELSE            [ reduce using rule 196 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 337

    (198) selection_statement -> SWITCH LPAREN expression RPAREN statement .

    RCURLYBRACKET   reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ID              reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CASE            reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LCURLYBRACKET   reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IF              reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DO              reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FOR             reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INCREMENT       reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DECREMENT       reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    AND             reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MULTIPLY        reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NOT             reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    OCTAL_CONST     reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    HEX_CONST       reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BIN_CONST       reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 198 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)


state 338

    (200) iteration_statement -> DO statement WHILE LPAREN expression . RPAREN SEMICOLON
    (78) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 346
    COMMA           shift and go to state 167


state 339

    (201) iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN . statement
    (177) statement -> . labeled_statement
    (178) statement -> . compound_statement
    (179) statement -> . expression_statement
    (180) statement -> . selection_statement
    (181) statement -> . iteration_statement
    (182) statement -> . jump_statement
    (183) labeled_statement -> . ID COLON statement
    (184) labeled_statement -> . CASE constant_expression COLON statement
    (185) labeled_statement -> . DEFAULT COLON statement
    (186) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (187) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (188) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (189) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (194) expression_statement -> . SEMICOLON
    (195) expression_statement -> . expression SEMICOLON
    (196) selection_statement -> . IF LPAREN expression RPAREN statement
    (197) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (198) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (199) iteration_statement -> . WHILE LPAREN expression RPAREN
    (200) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (201) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (202) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (203) jump_statement -> . GOTO ID SEMICOLON
    (204) jump_statement -> . CONTINUE SEMICOLON
    (205) jump_statement -> . BREAK SEMICOLON
    (206) jump_statement -> . RETURN SEMICOLON
    (207) jump_statement -> . RETURN expression SEMICOLON
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    ID              shift and go to state 80
    CASE            shift and go to state 81
    DEFAULT         shift and go to state 82
    LCURLYBRACKET   shift and go to state 46
    SEMICOLON       shift and go to state 79
    IF              shift and go to state 84
    SWITCH          shift and go to state 86
    WHILE           shift and go to state 87
    DO              shift and go to state 88
    FOR             shift and go to state 89
    GOTO            shift and go to state 90
    CONTINUE        shift and go to state 91
    BREAK           shift and go to state 92
    RETURN          shift and go to state 93
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    expression_statement           shift and go to state 75
    statement                      shift and go to state 347
    labeled_statement              shift and go to state 73
    compound_statement             shift and go to state 74
    selection_statement            shift and go to state 76
    iteration_statement            shift and go to state 77
    jump_statement                 shift and go to state 78
    expression                     shift and go to state 83
    assignment_expression          shift and go to state 94
    conditional_expression         shift and go to state 95
    unary_expression               shift and go to state 96
    logical_or_expression          shift and go to state 97
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 340

    (202) iteration_statement -> FOR LPAREN expression_statement expression_statement expression . RPAREN statement
    (78) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 348
    COMMA           shift and go to state 167


state 341

    (63) conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .

    SEMICOLON       reduce using rule 63 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    COMMA           reduce using rule 63 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    RSQUAREBRACKET  reduce using rule 63 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    COLON           reduce using rule 63 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    RPAREN          reduce using rule 63 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    RCURLYBRACKET   reduce using rule 63 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)


state 342

    (19) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 19 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 19 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 343

    (168) direct_abstract_declarator -> direct_abstract_declarator LPAREN constant_expression RPAREN .

    LPAREN          reduce using rule 168 (direct_abstract_declarator -> direct_abstract_declarator LPAREN constant_expression RPAREN .)
    COMMA           reduce using rule 168 (direct_abstract_declarator -> direct_abstract_declarator LPAREN constant_expression RPAREN .)
    RPAREN          reduce using rule 168 (direct_abstract_declarator -> direct_abstract_declarator LPAREN constant_expression RPAREN .)


state 344

    (171) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .

    LPAREN          reduce using rule 171 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 171 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 171 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)


state 345

    (197) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (177) statement -> . labeled_statement
    (178) statement -> . compound_statement
    (179) statement -> . expression_statement
    (180) statement -> . selection_statement
    (181) statement -> . iteration_statement
    (182) statement -> . jump_statement
    (183) labeled_statement -> . ID COLON statement
    (184) labeled_statement -> . CASE constant_expression COLON statement
    (185) labeled_statement -> . DEFAULT COLON statement
    (186) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (187) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (188) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (189) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (194) expression_statement -> . SEMICOLON
    (195) expression_statement -> . expression SEMICOLON
    (196) selection_statement -> . IF LPAREN expression RPAREN statement
    (197) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (198) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (199) iteration_statement -> . WHILE LPAREN expression RPAREN
    (200) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (201) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (202) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (203) jump_statement -> . GOTO ID SEMICOLON
    (204) jump_statement -> . CONTINUE SEMICOLON
    (205) jump_statement -> . BREAK SEMICOLON
    (206) jump_statement -> . RETURN SEMICOLON
    (207) jump_statement -> . RETURN expression SEMICOLON
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    ID              shift and go to state 80
    CASE            shift and go to state 81
    DEFAULT         shift and go to state 82
    LCURLYBRACKET   shift and go to state 46
    SEMICOLON       shift and go to state 79
    IF              shift and go to state 84
    SWITCH          shift and go to state 86
    WHILE           shift and go to state 87
    DO              shift and go to state 88
    FOR             shift and go to state 89
    GOTO            shift and go to state 90
    CONTINUE        shift and go to state 91
    BREAK           shift and go to state 92
    RETURN          shift and go to state 93
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    expression                     shift and go to state 83
    statement                      shift and go to state 349
    labeled_statement              shift and go to state 73
    compound_statement             shift and go to state 74
    expression_statement           shift and go to state 75
    selection_statement            shift and go to state 76
    iteration_statement            shift and go to state 77
    jump_statement                 shift and go to state 78
    assignment_expression          shift and go to state 94
    conditional_expression         shift and go to state 95
    unary_expression               shift and go to state 96
    logical_or_expression          shift and go to state 97
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 346

    (200) iteration_statement -> DO statement WHILE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 350


state 347

    (201) iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .

    RCURLYBRACKET   reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    ID              reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CASE            reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DEFAULT         reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    LCURLYBRACKET   reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SEMICOLON       reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    IF              reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SWITCH          reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    WHILE           reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DO              reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    FOR             reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    GOTO            reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CONTINUE        reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    BREAK           reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    RETURN          reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    INCREMENT       reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DECREMENT       reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SIZEOF          reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    AND             reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    MULTIPLY        reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    PLUS            reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    MINUS           reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    NOT             reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    LNOT            reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CHAR_CONST      reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    INT_CONST       reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    FLOAT_CONST     reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    OCTAL_CONST     reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    HEX_CONST       reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    BIN_CONST       reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    STRING_LITERAL  reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    LPAREN          reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    ELSE            reduce using rule 201 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)


state 348

    (202) iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN . statement
    (177) statement -> . labeled_statement
    (178) statement -> . compound_statement
    (179) statement -> . expression_statement
    (180) statement -> . selection_statement
    (181) statement -> . iteration_statement
    (182) statement -> . jump_statement
    (183) labeled_statement -> . ID COLON statement
    (184) labeled_statement -> . CASE constant_expression COLON statement
    (185) labeled_statement -> . DEFAULT COLON statement
    (186) compound_statement -> . LCURLYBRACKET RCURLYBRACKET
    (187) compound_statement -> . LCURLYBRACKET statement_list RCURLYBRACKET
    (188) compound_statement -> . LCURLYBRACKET declaration_list RCURLYBRACKET
    (189) compound_statement -> . LCURLYBRACKET declaration_list statement_list RCURLYBRACKET
    (194) expression_statement -> . SEMICOLON
    (195) expression_statement -> . expression SEMICOLON
    (196) selection_statement -> . IF LPAREN expression RPAREN statement
    (197) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (198) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (199) iteration_statement -> . WHILE LPAREN expression RPAREN
    (200) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (201) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (202) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (203) jump_statement -> . GOTO ID SEMICOLON
    (204) jump_statement -> . CONTINUE SEMICOLON
    (205) jump_statement -> . BREAK SEMICOLON
    (206) jump_statement -> . RETURN SEMICOLON
    (207) jump_statement -> . RETURN expression SEMICOLON
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INCREMENT unary_expression
    (22) unary_expression -> . DECREMENT unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LSQUAREBRACKET expression RSQUAREBRACKET
    (12) postfix_expression -> . postfix_expression LPAREN RPAREN
    (13) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (14) postfix_expression -> . postfix_expression PERIOD ID
    (15) postfix_expression -> . postfix_expression ARROW ID
    (16) postfix_expression -> . postfix_expression INCREMENT
    (17) postfix_expression -> . postfix_expression DECREMENT
    (26) unary_operator -> . AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . LNOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . CHAR_CONST
    (3) primary_expression -> . INT_CONST
    (4) primary_expression -> . FLOAT_CONST
    (5) primary_expression -> . OCTAL_CONST
    (6) primary_expression -> . HEX_CONST
    (7) primary_expression -> . BIN_CONST
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LPAREN expression RPAREN
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQUAL relational_expression
    (51) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LESSEQUAL shift_expression
    (48) relational_expression -> . relational_expression GREATEREQUAL shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LSHIFT additive_expression
    (43) shift_expression -> . shift_expression RSHIFT additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . LPAREN type_name RPAREN cast_expression

    ID              shift and go to state 80
    CASE            shift and go to state 81
    DEFAULT         shift and go to state 82
    LCURLYBRACKET   shift and go to state 46
    SEMICOLON       shift and go to state 79
    IF              shift and go to state 84
    SWITCH          shift and go to state 86
    WHILE           shift and go to state 87
    DO              shift and go to state 88
    FOR             shift and go to state 89
    GOTO            shift and go to state 90
    CONTINUE        shift and go to state 91
    BREAK           shift and go to state 92
    RETURN          shift and go to state 93
    INCREMENT       shift and go to state 99
    DECREMENT       shift and go to state 100
    SIZEOF          shift and go to state 103
    AND             shift and go to state 106
    MULTIPLY        shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    NOT             shift and go to state 110
    LNOT            shift and go to state 111
    CHAR_CONST      shift and go to state 113
    INT_CONST       shift and go to state 114
    FLOAT_CONST     shift and go to state 115
    OCTAL_CONST     shift and go to state 116
    HEX_CONST       shift and go to state 117
    BIN_CONST       shift and go to state 118
    STRING_LITERAL  shift and go to state 119
    LPAREN          shift and go to state 85

    expression_statement           shift and go to state 75
    expression                     shift and go to state 83
    statement                      shift and go to state 351
    labeled_statement              shift and go to state 73
    compound_statement             shift and go to state 74
    selection_statement            shift and go to state 76
    iteration_statement            shift and go to state 77
    jump_statement                 shift and go to state 78
    assignment_expression          shift and go to state 94
    conditional_expression         shift and go to state 95
    unary_expression               shift and go to state 96
    logical_or_expression          shift and go to state 97
    postfix_expression             shift and go to state 98
    unary_operator                 shift and go to state 101
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 104
    primary_expression             shift and go to state 105
    inclusive_or_expression        shift and go to state 112
    exclusive_or_expression        shift and go to state 120
    and_expression                 shift and go to state 121
    equality_expression            shift and go to state 122
    relational_expression          shift and go to state 123
    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 126

state 349

    (197) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    RCURLYBRACKET   reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LCURLYBRACKET   reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMICOLON       reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DO              reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    GOTO            reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INCREMENT       reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DECREMENT       reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIZEOF          reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AND             reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MULTIPLY        reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LNOT            reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR_CONST      reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT_CONST       reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT_CONST     reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    OCTAL_CONST     reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    HEX_CONST       reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BIN_CONST       reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING_LITERAL  reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 350

    (200) iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .

    RCURLYBRACKET   reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ID              reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CASE            reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LCURLYBRACKET   reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SWITCH          reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DO              reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    GOTO            reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BREAK           reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    INCREMENT       reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DECREMENT       reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SIZEOF          reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    AND             reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    MULTIPLY        reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    PLUS            reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    MINUS           reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    NOT             reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LNOT            reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CHAR_CONST      reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    INT_CONST       reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FLOAT_CONST     reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    OCTAL_CONST     reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    HEX_CONST       reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BIN_CONST       reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STRING_LITERAL  reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ELSE            reduce using rule 200 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)


state 351

    (202) iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .

    RCURLYBRACKET   reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ID              reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CASE            reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DEFAULT         reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LCURLYBRACKET   reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SEMICOLON       reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    IF              reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SWITCH          reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    WHILE           reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DO              reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FOR             reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    GOTO            reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CONTINUE        reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    BREAK           reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    RETURN          reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    INCREMENT       reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DECREMENT       reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SIZEOF          reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    AND             reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    MULTIPLY        reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    PLUS            reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    MINUS           reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    NOT             reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LNOT            reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CHAR_CONST      reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    INT_CONST       reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    OCTAL_CONST     reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    HEX_CONST       reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    BIN_CONST       reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LPAREN          reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ELSE            reduce using rule 202 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)

