PLY: PARSE DEBUG START

State  : 0
Stack  : . LexToken(INT,'int',1,0)
Action : Shift and goto state 20

State  : 20
Stack  : INT . LexToken(ID,'main',1,4)
Action : Reduce rule [type_specifier -> INT] with ['int'] and goto state 8
Result : <Node @ 0x7fb2941ff310> (<parser.Node object at 0x7fb2941ff310>)

State  : 8
Stack  : type_specifier . LexToken(ID,'main',1,4)
Action : Reduce rule [declaration_specifiers -> type_specifier] with [<Node @ 0x7fb2941ff310>] and goto state 5
Result : <Node @ 0x7fb2941ff310> (<parser.Node object at 0x7fb2941ff310>)

State  : 5
Stack  : declaration_specifiers . LexToken(ID,'main',1,4)
Action : Shift and goto state 32

State  : 32
Stack  : declaration_specifiers ID . LexToken(LPAREN,'(',1,8)
Action : Reduce rule [direct_declarator -> ID] with ['main'] and goto state 11
Result : <Node @ 0x7fb2941ff1f0> (<parser.Node object at 0x7fb2941ff1f0>)

State  : 11
Stack  : declaration_specifiers direct_declarator . LexToken(LPAREN,'(',1,8)
Action : Shift and goto state 54

State  : 54
Stack  : declaration_specifiers direct_declarator LPAREN . LexToken(RPAREN,')',1,9)
Action : Reduce rule [lopenparen -> LPAREN] with ['('] and goto state 52
Result : <str @ 0x7fb2946feeb0> ('(')

State  : 52
Stack  : declaration_specifiers direct_declarator lopenparen . LexToken(RPAREN,')',1,9)
Action : Shift and goto state 138

State  : 138
Stack  : declaration_specifiers direct_declarator lopenparen RPAREN . LexToken(LCURLYBRACKET,'{',2,11)
Action : Reduce rule [direct_declarator -> direct_declarator lopenparen RPAREN] with [<Node @ 0x7fb2941ff1f0>,'(',')'] and goto state 11
Result : <Node @ 0x7fb2941ff1f0> (<parser.Node object at 0x7fb2941ff1f0>)

State  : 11
Stack  : declaration_specifiers direct_declarator . LexToken(LCURLYBRACKET,'{',2,11)
Action : Reduce rule [declarator -> direct_declarator] with [<Node @ 0x7fb2941ff1f0>] and goto state 39
Result : <Node @ 0x7fb2941ff1f0> (<parser.Node object at 0x7fb2941ff1f0>)

State  : 39
Stack  : declaration_specifiers declarator . LexToken(LCURLYBRACKET,'{',2,11)
Action : Shift and goto state 46

State  : 46
Stack  : declaration_specifiers declarator LCURLYBRACKET . LexToken(INT,'int',3,17)
Action : Shift and goto state 20

State  : 20
Stack  : declaration_specifiers declarator LCURLYBRACKET INT . LexToken(ID,'x',3,21)
Action : Reduce rule [type_specifier -> INT] with ['int'] and goto state 8
Result : <Node @ 0x7fb2941ff250> (<parser.Node object at 0x7fb2941ff250>)

State  : 8
Stack  : declaration_specifiers declarator LCURLYBRACKET type_specifier . LexToken(ID,'x',3,21)
Action : Reduce rule [declaration_specifiers -> type_specifier] with [<Node @ 0x7fb2941ff250>] and goto state 47
Result : <Node @ 0x7fb2941ff250> (<parser.Node object at 0x7fb2941ff250>)

State  : 47
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers . LexToken(ID,'x',3,21)
Action : Shift and goto state 32

State  : 32
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers ID . LexToken(COMMA,',',3,22)
Action : Reduce rule [direct_declarator -> ID] with ['x'] and goto state 11
Result : <Node @ 0x7fb2941ff220> (<parser.Node object at 0x7fb2941ff220>)

State  : 11
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers direct_declarator . LexToken(COMMA,',',3,22)
Action : Reduce rule [declarator -> direct_declarator] with [<Node @ 0x7fb2941ff220>] and goto state 136
Result : <Node @ 0x7fb2941ff220> (<parser.Node object at 0x7fb2941ff220>)

State  : 136
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers declarator . LexToken(COMMA,',',3,22)
Action : Reduce rule [init_declarator -> declarator] with [<Node @ 0x7fb2941ff220>] and goto state 42
Result : <Node @ 0x7fb2941ff220> (<parser.Node object at 0x7fb2941ff220>)

State  : 42
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator . LexToken(COMMA,',',3,22)
Action : Reduce rule [init_declarator_list -> init_declarator] with [<Node @ 0x7fb2941ff220>] and goto state 41
Result : <Node @ 0x7fb2941ff430> (<parser.Node object at 0x7fb2941ff430>)

State  : 41
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list . LexToken(COMMA,',',3,22)
Action : Shift and goto state 68

State  : 68
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list COMMA . LexToken(ID,'y',3,24)
Action : Shift and goto state 32

State  : 32
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list COMMA ID . LexToken(SEMICOLON,';',3,25)
Action : Reduce rule [direct_declarator -> ID] with ['y'] and goto state 11
Result : <Node @ 0x7fb2941ff2e0> (<parser.Node object at 0x7fb2941ff2e0>)

State  : 11
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list COMMA direct_declarator . LexToken(SEMICOLON,';',3,25)
Action : Reduce rule [declarator -> direct_declarator] with [<Node @ 0x7fb2941ff2e0>] and goto state 136
Result : <Node @ 0x7fb2941ff2e0> (<parser.Node object at 0x7fb2941ff2e0>)

State  : 136
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list COMMA declarator . LexToken(SEMICOLON,';',3,25)
Action : Reduce rule [init_declarator -> declarator] with [<Node @ 0x7fb2941ff2e0>] and goto state 164
Result : <Node @ 0x7fb2941ff2e0> (<parser.Node object at 0x7fb2941ff2e0>)

State  : 164
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list COMMA init_declarator . LexToken(SEMICOLON,';',3,25)
Action : Reduce rule [init_declarator_list -> init_declarator_list COMMA init_declarator] with [<Node @ 0x7fb2941ff430>,',',<Node @ 0x7fb2941ff2e0>] and goto state 41
Result : <Node @ 0x7fb2941ff430> (<parser.Node object at 0x7fb2941ff430>)

State  : 41
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list . LexToken(SEMICOLON,';',3,25)
Action : Shift and goto state 67

State  : 67
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list SEMICOLON . LexToken(LCURLYBRACKET,'{',4,31)
Action : Reduce rule [declaration -> declaration_specifiers init_declarator_list SEMICOLON] with [<Node @ 0x7fb2941ff250>,<Node @ 0x7fb2941ff430>,';'] and goto state 45
Result : <Node @ 0x7fb2941ff280> (<parser.Node object at 0x7fb2941ff280>)

State  : 45
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration . LexToken(LCURLYBRACKET,'{',4,31)
Action : Reduce rule [declaration_list -> declaration] with [<Node @ 0x7fb2941ff280>] and goto state 73
Result : <Node @ 0x7fb2941ff280> (<parser.Node object at 0x7fb2941ff280>)

State  : 73
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list . LexToken(LCURLYBRACKET,'{',4,31)
Action : Shift and goto state 61

State  : 61
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list LCURLYBRACKET . LexToken(RETURN,'return',5,44)
Action : Reduce rule [openbrace -> LCURLYBRACKET] with ['{'] and goto state 86
Result : <str @ 0x7fb2947cd130> ('{')

State  : 86
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace . LexToken(RETURN,'return',5,44)
Action : Shift and goto state 95

State  : 95
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN . LexToken(INT_CONST,'0',5,51)
Action : Shift and goto state 126

State  : 126
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN INT_CONST . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [primary_expression -> INT_CONST] with ['0'] and goto state 114
Result : <Node @ 0x7fb2941ff730> (<parser.Node object at 0x7fb2941ff730>)

State  : 114
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN primary_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [postfix_expression -> primary_expression] with [<Node @ 0x7fb2941ff730>] and goto state 107
Result : <Node @ 0x7fb2941ff730> (<parser.Node object at 0x7fb2941ff730>)

State  : 107
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN postfix_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [unary_expression -> postfix_expression] with [<Node @ 0x7fb2941ff730>] and goto state 105
Result : <Node @ 0x7fb2941ff730> (<parser.Node object at 0x7fb2941ff730>)

State  : 105
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN unary_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [cast_expression -> unary_expression] with [<Node @ 0x7fb2941ff730>] and goto state 111
Result : <Node @ 0x7fb2941ff730> (<parser.Node object at 0x7fb2941ff730>)

State  : 111
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN cast_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [multiplicative_expression -> cast_expression] with [<Node @ 0x7fb2941ff730>] and goto state 135
Result : <Node @ 0x7fb2941ff730> (<parser.Node object at 0x7fb2941ff730>)

State  : 135
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN multiplicative_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [additive_expression -> multiplicative_expression] with [<Node @ 0x7fb2941ff730>] and goto state 134
Result : <Node @ 0x7fb2941ff730> (<parser.Node object at 0x7fb2941ff730>)

State  : 134
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN additive_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [shift_expression -> additive_expression] with [<Node @ 0x7fb2941ff730>] and goto state 133
Result : <Node @ 0x7fb2941ff730> (<parser.Node object at 0x7fb2941ff730>)

State  : 133
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN shift_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [relational_expression -> shift_expression] with [<Node @ 0x7fb2941ff730>] and goto state 132
Result : <Node @ 0x7fb2941ff730> (<parser.Node object at 0x7fb2941ff730>)

State  : 132
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN relational_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [equality_expression -> relational_expression] with [<Node @ 0x7fb2941ff730>] and goto state 131
Result : <Node @ 0x7fb2941ff730> (<parser.Node object at 0x7fb2941ff730>)

State  : 131
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN equality_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [and_expression -> equality_expression] with [<Node @ 0x7fb2941ff730>] and goto state 130
Result : <Node @ 0x7fb2941ff730> (<parser.Node object at 0x7fb2941ff730>)

State  : 130
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN and_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [exclusive_or_expression -> and_expression] with [<Node @ 0x7fb2941ff730>] and goto state 129
Result : <Node @ 0x7fb2941ff730> (<parser.Node object at 0x7fb2941ff730>)

State  : 129
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN exclusive_or_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [inclusive_or_expression -> exclusive_or_expression] with [<Node @ 0x7fb2941ff730>] and goto state 121
Result : <Node @ 0x7fb2941ff730> (<parser.Node object at 0x7fb2941ff730>)

State  : 121
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN inclusive_or_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [logical_and_expression -> inclusive_or_expression] with [<Node @ 0x7fb2941ff730>] and goto state 113
Result : <Node @ 0x7fb2941ff730> (<parser.Node object at 0x7fb2941ff730>)

State  : 113
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN logical_and_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [logical_or_expression -> logical_and_expression] with [<Node @ 0x7fb2941ff730>] and goto state 106
Result : <Node @ 0x7fb2941ff730> (<parser.Node object at 0x7fb2941ff730>)

State  : 106
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN logical_or_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [conditional_expression -> logical_or_expression] with [<Node @ 0x7fb2941ff730>] and goto state 104
Result : <Node @ 0x7fb2941ff730> (<parser.Node object at 0x7fb2941ff730>)

State  : 104
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN conditional_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [assignment_expression -> conditional_expression] with [<Node @ 0x7fb2941ff730>] and goto state 99
Result : <Node @ 0x7fb2941ff730> (<parser.Node object at 0x7fb2941ff730>)

State  : 99
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN assignment_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [expression -> assignment_expression] with [<Node @ 0x7fb2941ff730>] and goto state 189
Result : <Node @ 0x7fb2941ff730> (<parser.Node object at 0x7fb2941ff730>)

State  : 189
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN expression . LexToken(SEMICOLON,';',5,53)
Action : Shift and goto state 280

State  : 280
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN expression SEMICOLON . LexToken(RCURLYBRACKET,'}',6,59)
Action : Reduce rule [jump_statement -> RETURN expression SEMICOLON] with ['return',<Node @ 0x7fb2941ff730>,';'] and goto state 81
Result : <Node @ 0x7fb2941ff2e0> (<parser.Node object at 0x7fb2941ff2e0>)

State  : 81
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace jump_statement . LexToken(RCURLYBRACKET,'}',6,59)
Action : Reduce rule [statement -> jump_statement] with [<Node @ 0x7fb2941ff2e0>] and goto state 75
Result : <Node @ 0x7fb2941ff670> (<parser.Node object at 0x7fb2941ff670>)

State  : 75
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace statement . LexToken(RCURLYBRACKET,'}',6,59)
Action : Reduce rule [statement_list -> statement] with [<Node @ 0x7fb2941ff670>] and goto state 176
Result : <Node @ 0x7fb2941ff670> (<parser.Node object at 0x7fb2941ff670>)

State  : 176
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace statement_list . LexToken(RCURLYBRACKET,'}',6,59)
Action : Shift and goto state 74

State  : 74
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace statement_list RCURLYBRACKET . LexToken(RCURLYBRACKET,'}',7,61)
Action : Reduce rule [closebrace -> RCURLYBRACKET] with ['}'] and goto state 266
Result : <str @ 0x7fb2947cd170> ('}')

State  : 266
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace statement_list closebrace . LexToken(RCURLYBRACKET,'}',7,61)
Action : Reduce rule [compound_statement -> openbrace statement_list closebrace] with ['{',<Node @ 0x7fb2941ff670>,'}'] and goto state 77
Result : <Node @ 0x7fb2941ff670> (<parser.Node object at 0x7fb2941ff670>)

State  : 77
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list compound_statement . LexToken(RCURLYBRACKET,'}',7,61)
Action : Reduce rule [statement -> compound_statement] with [<Node @ 0x7fb2941ff670>] and goto state 75
Result : <Node @ 0x7fb2941ff490> (<parser.Node object at 0x7fb2941ff490>)

State  : 75
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list statement . LexToken(RCURLYBRACKET,'}',7,61)
Action : Reduce rule [statement_list -> statement] with [<Node @ 0x7fb2941ff490>] and goto state 168
Result : <Node @ 0x7fb2941ff490> (<parser.Node object at 0x7fb2941ff490>)

State  : 168
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list statement_list . LexToken(RCURLYBRACKET,'}',7,61)
Action : Shift and goto state 74

State  : 74
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list statement_list RCURLYBRACKET . $end
Action : Reduce rule [closebrace -> RCURLYBRACKET] with ['}'] and goto state 262
Result : <str @ 0x7fb2947cd170> ('}')

State  : 262
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list statement_list closebrace . $end
Action : Reduce rule [function_compound_statement -> LCURLYBRACKET declaration_list statement_list closebrace] with ['{',<Node @ 0x7fb2941ff280>,<Node @ 0x7fb2941ff490>,'}'] and goto state 65
Result : <Node @ 0x7fb2941ff610> (<parser.Node object at 0x7fb2941ff610>)

State  : 65
Stack  : declaration_specifiers declarator function_compound_statement . $end
Action : Reduce rule [function_definition -> declaration_specifiers declarator function_compound_statement] with [<Node @ 0x7fb2941ff310>,<Node @ 0x7fb2941ff1f0>,<Node @ 0x7fb2941ff610>] and goto state 3
Result : <Node @ 0x7fb2941ff6a0> (<parser.Node object at 0x7fb2941ff6a0>)

State  : 3
Stack  : function_definition . $end
Action : Reduce rule [external_declaration -> function_definition] with [<Node @ 0x7fb2941ff6a0>] and goto state 2
Result : <Node @ 0x7fb2941ff6a0> (<parser.Node object at 0x7fb2941ff6a0>)

State  : 2
Stack  : external_declaration . $end
Action : Reduce rule [translation_unit -> external_declaration] with [<Node @ 0x7fb2941ff6a0>] and goto state 1
Result : <Node @ 0x7fb2941ff400> (<parser.Node object at 0x7fb2941ff400>)

State  : 1
Stack  : translation_unit . $end
Done   : Returning <Node @ 0x7fb2941ff400> (<parser.Node object at 0x7fb2941ff400>)
PLY: PARSE DEBUG END
WARNING: /home/destroyer/Desktop/sem6/cs335/compiler-project/src/parser.py:1778: Rule 'function_compound_statement' defined, but not used
WARNING: There is 1 unused rule
WARNING: Symbol 'function_compound_statement' is unreachable
Generating LALR tables
PLY: PARSE DEBUG START

State  : 0
Stack  : . LexToken(INT,'int',1,0)
Action : Shift and goto state 20

State  : 20
Stack  : INT . LexToken(ID,'main',1,4)
Action : Reduce rule [type_specifier -> INT] with ['int'] and goto state 8
Result : <Node @ 0x7f43797410a0> (<parser.Node object at 0x7f43797410a0>)

State  : 8
Stack  : type_specifier . LexToken(ID,'main',1,4)
Action : Reduce rule [declaration_specifiers -> type_specifier] with [<Node @ 0x7f43797410a0>] and goto state 5
Result : <Node @ 0x7f43797410a0> (<parser.Node object at 0x7f43797410a0>)

State  : 5
Stack  : declaration_specifiers . LexToken(ID,'main',1,4)
Action : Shift and goto state 32

State  : 32
Stack  : declaration_specifiers ID . LexToken(LPAREN,'(',1,8)
Action : Reduce rule [direct_declarator -> ID] with ['main'] and goto state 11
Result : <Node @ 0x7f437946d6a0> (<parser.Node object at 0x7f437946d6a0>)

State  : 11
Stack  : declaration_specifiers direct_declarator . LexToken(LPAREN,'(',1,8)
Action : Shift and goto state 55

State  : 55
Stack  : declaration_specifiers direct_declarator LPAREN . LexToken(RPAREN,')',1,9)
Action : Reduce rule [lopenparen -> LPAREN] with ['('] and goto state 53
Result : <str @ 0x7f4379987f70> ('(')

State  : 53
Stack  : declaration_specifiers direct_declarator lopenparen . LexToken(RPAREN,')',1,9)
Action : Shift and goto state 137

State  : 137
Stack  : declaration_specifiers direct_declarator lopenparen RPAREN . LexToken(LCURLYBRACKET,'{',2,11)
Action : Reduce rule [direct_declarator -> direct_declarator lopenparen RPAREN] with [<Node @ 0x7f437946d6a0>,'(',')'] and goto state 11
Result : <Node @ 0x7f437946d6a0> (<parser.Node object at 0x7f437946d6a0>)

State  : 11
Stack  : declaration_specifiers direct_declarator . LexToken(LCURLYBRACKET,'{',2,11)
Action : Reduce rule [declarator -> direct_declarator] with [<Node @ 0x7f437946d6a0>] and goto state 39
Result : <Node @ 0x7f437946d6a0> (<parser.Node object at 0x7f437946d6a0>)

State  : 39
Stack  : declaration_specifiers declarator . LexToken(LCURLYBRACKET,'{',2,11)
Action : Shift and goto state 48

State  : 48
Stack  : declaration_specifiers declarator LCURLYBRACKET . LexToken(INT,'int',3,17)
Action : Reduce rule [openbrace -> LCURLYBRACKET] with ['{'] and goto state 46
Result : <str @ 0x7f4379a561f0> ('{')

State  : 46
Stack  : declaration_specifiers declarator openbrace . LexToken(INT,'int',3,17)
Action : Shift and goto state 20

State  : 20
Stack  : declaration_specifiers declarator openbrace INT . LexToken(ID,'x',3,21)
Action : Reduce rule [type_specifier -> INT] with ['int'] and goto state 8
Result : <Node @ 0x7f43797417f0> (<parser.Node object at 0x7f43797417f0>)

State  : 8
Stack  : declaration_specifiers declarator openbrace type_specifier . LexToken(ID,'x',3,21)
Action : Reduce rule [declaration_specifiers -> type_specifier] with [<Node @ 0x7f43797417f0>] and goto state 47
Result : <Node @ 0x7f43797417f0> (<parser.Node object at 0x7f43797417f0>)

State  : 47
Stack  : declaration_specifiers declarator openbrace declaration_specifiers . LexToken(ID,'x',3,21)
Action : Shift and goto state 32

State  : 32
Stack  : declaration_specifiers declarator openbrace declaration_specifiers ID . LexToken(COMMA,',',3,22)
Action : Reduce rule [direct_declarator -> ID] with ['x'] and goto state 11
Result : <Node @ 0x7f4379974e50> (<parser.Node object at 0x7f4379974e50>)

State  : 11
Stack  : declaration_specifiers declarator openbrace declaration_specifiers direct_declarator . LexToken(COMMA,',',3,22)
Action : Reduce rule [declarator -> direct_declarator] with [<Node @ 0x7f4379974e50>] and goto state 135
Result : <Node @ 0x7f4379974e50> (<parser.Node object at 0x7f4379974e50>)

State  : 135
Stack  : declaration_specifiers declarator openbrace declaration_specifiers declarator . LexToken(COMMA,',',3,22)
Action : Reduce rule [init_declarator -> declarator] with [<Node @ 0x7f4379974e50>] and goto state 42
Result : <Node @ 0x7f4379974e50> (<parser.Node object at 0x7f4379974e50>)

State  : 42
Stack  : declaration_specifiers declarator openbrace declaration_specifiers init_declarator . LexToken(COMMA,',',3,22)
Action : Reduce rule [init_declarator_list -> init_declarator] with [<Node @ 0x7f4379974e50>] and goto state 41
Result : <Node @ 0x7f43796acb80> (<parser.Node object at 0x7f43796acb80>)

State  : 41
Stack  : declaration_specifiers declarator openbrace declaration_specifiers init_declarator_list . LexToken(COMMA,',',3,22)
Action : Shift and goto state 68

State  : 68
Stack  : declaration_specifiers declarator openbrace declaration_specifiers init_declarator_list COMMA . LexToken(ID,'y',3,24)
Action : Shift and goto state 32

State  : 32
Stack  : declaration_specifiers declarator openbrace declaration_specifiers init_declarator_list COMMA ID . LexToken(SEMICOLON,';',3,25)
Action : Reduce rule [direct_declarator -> ID] with ['y'] and goto state 11
Result : <Node @ 0x7f43796aca30> (<parser.Node object at 0x7f43796aca30>)

State  : 11
Stack  : declaration_specifiers declarator openbrace declaration_specifiers init_declarator_list COMMA direct_declarator . LexToken(SEMICOLON,';',3,25)
Action : Reduce rule [declarator -> direct_declarator] with [<Node @ 0x7f43796aca30>] and goto state 135
Result : <Node @ 0x7f43796aca30> (<parser.Node object at 0x7f43796aca30>)

State  : 135
Stack  : declaration_specifiers declarator openbrace declaration_specifiers init_declarator_list COMMA declarator . LexToken(SEMICOLON,';',3,25)
Action : Reduce rule [init_declarator -> declarator] with [<Node @ 0x7f43796aca30>] and goto state 163
Result : <Node @ 0x7f43796aca30> (<parser.Node object at 0x7f43796aca30>)

State  : 163
Stack  : declaration_specifiers declarator openbrace declaration_specifiers init_declarator_list COMMA init_declarator . LexToken(SEMICOLON,';',3,25)
Action : Reduce rule [init_declarator_list -> init_declarator_list COMMA init_declarator] with [<Node @ 0x7f43796acb80>,',',<Node @ 0x7f43796aca30>] and goto state 41
Result : <Node @ 0x7f43796acb80> (<parser.Node object at 0x7f43796acb80>)

State  : 41
Stack  : declaration_specifiers declarator openbrace declaration_specifiers init_declarator_list . LexToken(SEMICOLON,';',3,25)
Action : Shift and goto state 67

State  : 67
Stack  : declaration_specifiers declarator openbrace declaration_specifiers init_declarator_list SEMICOLON . LexToken(LCURLYBRACKET,'{',4,31)
Action : Reduce rule [declaration -> declaration_specifiers init_declarator_list SEMICOLON] with [<Node @ 0x7f43797417f0>,<Node @ 0x7f43796acb80>,';'] and goto state 45
Result : <Node @ 0x7f4379974d90> (<parser.Node object at 0x7f4379974d90>)

State  : 45
Stack  : declaration_specifiers declarator openbrace declaration . LexToken(LCURLYBRACKET,'{',4,31)
Action : Reduce rule [declaration_list -> declaration] with [<Node @ 0x7f4379974d90>] and goto state 73
Result : <Node @ 0x7f4379974d90> (<parser.Node object at 0x7f4379974d90>)

State  : 73
Stack  : declaration_specifiers declarator openbrace declaration_list . LexToken(LCURLYBRACKET,'{',4,31)
Action : Shift and goto state 48

State  : 48
Stack  : declaration_specifiers declarator openbrace declaration_list LCURLYBRACKET . LexToken(RETURN,'return',5,44)
Action : Reduce rule [openbrace -> LCURLYBRACKET] with ['{'] and goto state 46
Result : <str @ 0x7f4379a561f0> ('{')

State  : 46
Stack  : declaration_specifiers declarator openbrace declaration_list openbrace . LexToken(RETURN,'return',5,44)
Action : Shift and goto state 94

State  : 94
Stack  : declaration_specifiers declarator openbrace declaration_list openbrace RETURN . LexToken(INT_CONST,'0',5,51)
Action : Shift and goto state 125

State  : 125
Stack  : declaration_specifiers declarator openbrace declaration_list openbrace RETURN INT_CONST . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [primary_expression -> INT_CONST] with ['0'] and goto state 113
Result : <Node @ 0x7f43796ac730> (<parser.Node object at 0x7f43796ac730>)

State  : 113
Stack  : declaration_specifiers declarator openbrace declaration_list openbrace RETURN primary_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [postfix_expression -> primary_expression] with [<Node @ 0x7f43796ac730>] and goto state 106
Result : <Node @ 0x7f43796ac730> (<parser.Node object at 0x7f43796ac730>)

State  : 106
Stack  : declaration_specifiers declarator openbrace declaration_list openbrace RETURN postfix_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [unary_expression -> postfix_expression] with [<Node @ 0x7f43796ac730>] and goto state 104
Result : <Node @ 0x7f43796ac730> (<parser.Node object at 0x7f43796ac730>)

State  : 104
Stack  : declaration_specifiers declarator openbrace declaration_list openbrace RETURN unary_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [cast_expression -> unary_expression] with [<Node @ 0x7f43796ac730>] and goto state 110
Result : <Node @ 0x7f43796ac730> (<parser.Node object at 0x7f43796ac730>)

State  : 110
Stack  : declaration_specifiers declarator openbrace declaration_list openbrace RETURN cast_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [multiplicative_expression -> cast_expression] with [<Node @ 0x7f43796ac730>] and goto state 134
Result : <Node @ 0x7f43796ac730> (<parser.Node object at 0x7f43796ac730>)

State  : 134
Stack  : declaration_specifiers declarator openbrace declaration_list openbrace RETURN multiplicative_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [additive_expression -> multiplicative_expression] with [<Node @ 0x7f43796ac730>] and goto state 133
Result : <Node @ 0x7f43796ac730> (<parser.Node object at 0x7f43796ac730>)

State  : 133
Stack  : declaration_specifiers declarator openbrace declaration_list openbrace RETURN additive_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [shift_expression -> additive_expression] with [<Node @ 0x7f43796ac730>] and goto state 132
Result : <Node @ 0x7f43796ac730> (<parser.Node object at 0x7f43796ac730>)

State  : 132
Stack  : declaration_specifiers declarator openbrace declaration_list openbrace RETURN shift_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [relational_expression -> shift_expression] with [<Node @ 0x7f43796ac730>] and goto state 131
Result : <Node @ 0x7f43796ac730> (<parser.Node object at 0x7f43796ac730>)

State  : 131
Stack  : declaration_specifiers declarator openbrace declaration_list openbrace RETURN relational_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [equality_expression -> relational_expression] with [<Node @ 0x7f43796ac730>] and goto state 130
Result : <Node @ 0x7f43796ac730> (<parser.Node object at 0x7f43796ac730>)

State  : 130
Stack  : declaration_specifiers declarator openbrace declaration_list openbrace RETURN equality_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [and_expression -> equality_expression] with [<Node @ 0x7f43796ac730>] and goto state 129
Result : <Node @ 0x7f43796ac730> (<parser.Node object at 0x7f43796ac730>)

State  : 129
Stack  : declaration_specifiers declarator openbrace declaration_list openbrace RETURN and_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [exclusive_or_expression -> and_expression] with [<Node @ 0x7f43796ac730>] and goto state 128
Result : <Node @ 0x7f43796ac730> (<parser.Node object at 0x7f43796ac730>)

State  : 128
Stack  : declaration_specifiers declarator openbrace declaration_list openbrace RETURN exclusive_or_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [inclusive_or_expression -> exclusive_or_expression] with [<Node @ 0x7f43796ac730>] and goto state 120
Result : <Node @ 0x7f43796ac730> (<parser.Node object at 0x7f43796ac730>)

State  : 120
Stack  : declaration_specifiers declarator openbrace declaration_list openbrace RETURN inclusive_or_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [logical_and_expression -> inclusive_or_expression] with [<Node @ 0x7f43796ac730>] and goto state 112
Result : <Node @ 0x7f43796ac730> (<parser.Node object at 0x7f43796ac730>)

State  : 112
Stack  : declaration_specifiers declarator openbrace declaration_list openbrace RETURN logical_and_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [logical_or_expression -> logical_and_expression] with [<Node @ 0x7f43796ac730>] and goto state 105
Result : <Node @ 0x7f43796ac730> (<parser.Node object at 0x7f43796ac730>)

State  : 105
Stack  : declaration_specifiers declarator openbrace declaration_list openbrace RETURN logical_or_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [conditional_expression -> logical_or_expression] with [<Node @ 0x7f43796ac730>] and goto state 103
Result : <Node @ 0x7f43796ac730> (<parser.Node object at 0x7f43796ac730>)

State  : 103
Stack  : declaration_specifiers declarator openbrace declaration_list openbrace RETURN conditional_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [assignment_expression -> conditional_expression] with [<Node @ 0x7f43796ac730>] and goto state 98
Result : <Node @ 0x7f43796ac730> (<parser.Node object at 0x7f43796ac730>)

State  : 98
Stack  : declaration_specifiers declarator openbrace declaration_list openbrace RETURN assignment_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [expression -> assignment_expression] with [<Node @ 0x7f43796ac730>] and goto state 185
Result : <Node @ 0x7f43796ac730> (<parser.Node object at 0x7f43796ac730>)

State  : 185
Stack  : declaration_specifiers declarator openbrace declaration_list openbrace RETURN expression . LexToken(SEMICOLON,';',5,53)
Action : Shift and goto state 273

State  : 273
Stack  : declaration_specifiers declarator openbrace declaration_list openbrace RETURN expression SEMICOLON . LexToken(RCURLYBRACKET,'}',6,59)
Action : Reduce rule [jump_statement -> RETURN expression SEMICOLON] with ['return',<Node @ 0x7f43796ac730>,';'] and goto state 81
Result : <Node @ 0x7f43796ac760> (<parser.Node object at 0x7f43796ac760>)

State  : 81
Stack  : declaration_specifiers declarator openbrace declaration_list openbrace jump_statement . LexToken(RCURLYBRACKET,'}',6,59)
Action : Reduce rule [statement -> jump_statement] with [<Node @ 0x7f43796ac760>] and goto state 75
Result : <Node @ 0x7f43796ac910> (<parser.Node object at 0x7f43796ac910>)

State  : 75
Stack  : declaration_specifiers declarator openbrace declaration_list openbrace statement . LexToken(RCURLYBRACKET,'}',6,59)
Action : Reduce rule [statement_list -> statement] with [<Node @ 0x7f43796ac910>] and goto state 72
Result : <Node @ 0x7f43796ac910> (<parser.Node object at 0x7f43796ac910>)

State  : 72
Stack  : declaration_specifiers declarator openbrace declaration_list openbrace statement_list . LexToken(RCURLYBRACKET,'}',6,59)
Action : Shift and goto state 74

State  : 74
Stack  : declaration_specifiers declarator openbrace declaration_list openbrace statement_list RCURLYBRACKET . LexToken(RCURLYBRACKET,'}',7,61)
Action : Reduce rule [closebrace -> RCURLYBRACKET] with ['}'] and goto state 164
Result : <str @ 0x7f4379a56230> ('}')

State  : 164
Stack  : declaration_specifiers declarator openbrace declaration_list openbrace statement_list closebrace . LexToken(RCURLYBRACKET,'}',7,61)
Action : Reduce rule [compound_statement -> openbrace statement_list closebrace] with ['{',<Node @ 0x7f43796ac910>,'}'] and goto state 77
Result : <Node @ 0x7f43796ac910> (<parser.Node object at 0x7f43796ac910>)

State  : 77
Stack  : declaration_specifiers declarator openbrace declaration_list compound_statement . LexToken(RCURLYBRACKET,'}',7,61)
Action : Reduce rule [statement -> compound_statement] with [<Node @ 0x7f43796ac910>] and goto state 75
Result : <Node @ 0x7f4379974e50> (<parser.Node object at 0x7f4379974e50>)

State  : 75
Stack  : declaration_specifiers declarator openbrace declaration_list statement . LexToken(RCURLYBRACKET,'}',7,61)
Action : Reduce rule [statement_list -> statement] with [<Node @ 0x7f4379974e50>] and goto state 167
Result : <Node @ 0x7f4379974e50> (<parser.Node object at 0x7f4379974e50>)

State  : 167
Stack  : declaration_specifiers declarator openbrace declaration_list statement_list . LexToken(RCURLYBRACKET,'}',7,61)
Action : Shift and goto state 74

State  : 74
Stack  : declaration_specifiers declarator openbrace declaration_list statement_list RCURLYBRACKET . $end
Action : Reduce rule [closebrace -> RCURLYBRACKET] with ['}'] and goto state 258
Result : <str @ 0x7f4379a56230> ('}')

State  : 258
Stack  : declaration_specifiers declarator openbrace declaration_list statement_list closebrace . $end
Action : Reduce rule [compound_statement -> openbrace declaration_list statement_list closebrace] with ['{',<Node @ 0x7f4379974d90>,<Node @ 0x7f4379974e50>,'}'] and goto state 65
Result : <Node @ 0x7f43796aca30> (<parser.Node object at 0x7f43796aca30>)

State  : 65
Stack  : declaration_specifiers declarator compound_statement . $end
Action : Reduce rule [function_definition -> declaration_specifiers declarator compound_statement] with [<Node @ 0x7f43797410a0>,<Node @ 0x7f437946d6a0>,<Node @ 0x7f43796aca30>] and goto state 3
Result : <Node @ 0x7f4379741460> (<parser.Node object at 0x7f4379741460>)

State  : 3
Stack  : function_definition . $end
Action : Reduce rule [external_declaration -> function_definition] with [<Node @ 0x7f4379741460>] and goto state 2
Result : <Node @ 0x7f4379741460> (<parser.Node object at 0x7f4379741460>)

State  : 2
Stack  : external_declaration . $end
Action : Reduce rule [translation_unit -> external_declaration] with [<Node @ 0x7f4379741460>] and goto state 1
Result : <Node @ 0x7f4379974d90> (<parser.Node object at 0x7f4379974d90>)

State  : 1
Stack  : translation_unit . $end
Done   : Returning <Node @ 0x7f4379974d90> (<parser.Node object at 0x7f4379974d90>)
PLY: PARSE DEBUG END
Generating LALR tables
PLY: PARSE DEBUG START

State  : 0
Stack  : . LexToken(INT,'int',1,0)
Action : Shift and goto state 20

State  : 20
Stack  : INT . LexToken(ID,'main',1,4)
Action : Reduce rule [type_specifier -> INT] with ['int'] and goto state 8
Result : <Node @ 0x7f8a124f6460> (<parser.Node object at 0x7f8a124f6460>)

State  : 8
Stack  : type_specifier . LexToken(ID,'main',1,4)
Action : Reduce rule [declaration_specifiers -> type_specifier] with [<Node @ 0x7f8a124f6460>] and goto state 5
Result : <Node @ 0x7f8a124f6460> (<parser.Node object at 0x7f8a124f6460>)

State  : 5
Stack  : declaration_specifiers . LexToken(ID,'main',1,4)
Action : Shift and goto state 32

State  : 32
Stack  : declaration_specifiers ID . LexToken(LPAREN,'(',1,8)
Action : Reduce rule [direct_declarator -> ID] with ['main'] and goto state 11
Result : <Node @ 0x7f8a127582e0> (<parser.Node object at 0x7f8a127582e0>)

State  : 11
Stack  : declaration_specifiers direct_declarator . LexToken(LPAREN,'(',1,8)
Action : Shift and goto state 54

State  : 54
Stack  : declaration_specifiers direct_declarator LPAREN . LexToken(RPAREN,')',1,9)
Action : Reduce rule [lopenparen -> LPAREN] with ['('] and goto state 52
Result : <str @ 0x7f8a1273cf70> ('(')

State  : 52
Stack  : declaration_specifiers direct_declarator lopenparen . LexToken(RPAREN,')',1,9)
Action : Shift and goto state 138

State  : 138
Stack  : declaration_specifiers direct_declarator lopenparen RPAREN . LexToken(LCURLYBRACKET,'{',2,11)
Action : Reduce rule [direct_declarator -> direct_declarator lopenparen RPAREN] with [<Node @ 0x7f8a127582e0>,'(',')'] and goto state 11
Result : <Node @ 0x7f8a127582e0> (<parser.Node object at 0x7f8a127582e0>)

State  : 11
Stack  : declaration_specifiers direct_declarator . LexToken(LCURLYBRACKET,'{',2,11)
Action : Reduce rule [declarator -> direct_declarator] with [<Node @ 0x7f8a127582e0>] and goto state 39
Result : <Node @ 0x7f8a127582e0> (<parser.Node object at 0x7f8a127582e0>)

State  : 39
Stack  : declaration_specifiers declarator . LexToken(LCURLYBRACKET,'{',2,11)
Action : Shift and goto state 46

State  : 46
Stack  : declaration_specifiers declarator LCURLYBRACKET . LexToken(INT,'int',3,17)
Action : Shift and goto state 20

State  : 20
Stack  : declaration_specifiers declarator LCURLYBRACKET INT . LexToken(ID,'x',3,21)
Action : Reduce rule [type_specifier -> INT] with ['int'] and goto state 8
Result : <Node @ 0x7f8a12758310> (<parser.Node object at 0x7f8a12758310>)

State  : 8
Stack  : declaration_specifiers declarator LCURLYBRACKET type_specifier . LexToken(ID,'x',3,21)
Action : Reduce rule [declaration_specifiers -> type_specifier] with [<Node @ 0x7f8a12758310>] and goto state 47
Result : <Node @ 0x7f8a12758310> (<parser.Node object at 0x7f8a12758310>)

State  : 47
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers . LexToken(ID,'x',3,21)
Action : Shift and goto state 32

State  : 32
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers ID . LexToken(COMMA,',',3,22)
Action : Reduce rule [direct_declarator -> ID] with ['x'] and goto state 11
Result : <Node @ 0x7f8a1272ad60> (<parser.Node object at 0x7f8a1272ad60>)

State  : 11
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers direct_declarator . LexToken(COMMA,',',3,22)
Action : Reduce rule [declarator -> direct_declarator] with [<Node @ 0x7f8a1272ad60>] and goto state 136
Result : <Node @ 0x7f8a1272ad60> (<parser.Node object at 0x7f8a1272ad60>)

State  : 136
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers declarator . LexToken(COMMA,',',3,22)
Action : Reduce rule [init_declarator -> declarator] with [<Node @ 0x7f8a1272ad60>] and goto state 42
Result : <Node @ 0x7f8a1272ad60> (<parser.Node object at 0x7f8a1272ad60>)

State  : 42
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator . LexToken(COMMA,',',3,22)
Action : Reduce rule [init_declarator_list -> init_declarator] with [<Node @ 0x7f8a1272ad60>] and goto state 41
Result : <Node @ 0x7f8a12461b50> (<parser.Node object at 0x7f8a12461b50>)

State  : 41
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list . LexToken(COMMA,',',3,22)
Action : Shift and goto state 68

State  : 68
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list COMMA . LexToken(ID,'y',3,24)
Action : Shift and goto state 32

State  : 32
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list COMMA ID . LexToken(SEMICOLON,';',3,25)
Action : Reduce rule [direct_declarator -> ID] with ['y'] and goto state 11
Result : <Node @ 0x7f8a124f60a0> (<parser.Node object at 0x7f8a124f60a0>)

State  : 11
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list COMMA direct_declarator . LexToken(SEMICOLON,';',3,25)
Action : Reduce rule [declarator -> direct_declarator] with [<Node @ 0x7f8a124f60a0>] and goto state 136
Result : <Node @ 0x7f8a124f60a0> (<parser.Node object at 0x7f8a124f60a0>)

State  : 136
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list COMMA declarator . LexToken(SEMICOLON,';',3,25)
Action : Reduce rule [init_declarator -> declarator] with [<Node @ 0x7f8a124f60a0>] and goto state 164
Result : <Node @ 0x7f8a124f60a0> (<parser.Node object at 0x7f8a124f60a0>)

State  : 164
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list COMMA init_declarator . LexToken(SEMICOLON,';',3,25)
Action : Reduce rule [init_declarator_list -> init_declarator_list COMMA init_declarator] with [<Node @ 0x7f8a12461b50>,',',<Node @ 0x7f8a124f60a0>] and goto state 41
Result : <Node @ 0x7f8a12461b50> (<parser.Node object at 0x7f8a12461b50>)

State  : 41
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list . LexToken(SEMICOLON,';',3,25)
Action : Shift and goto state 67

State  : 67
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list SEMICOLON . LexToken(LCURLYBRACKET,'{',4,31)
Action : Reduce rule [declaration -> declaration_specifiers init_declarator_list SEMICOLON] with [<Node @ 0x7f8a12758310>,<Node @ 0x7f8a12461b50>,';'] and goto state 45
Result : <Node @ 0x7f8a1272ad90> (<parser.Node object at 0x7f8a1272ad90>)

State  : 45
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration . LexToken(LCURLYBRACKET,'{',4,31)
Action : Reduce rule [declaration_list -> declaration] with [<Node @ 0x7f8a1272ad90>] and goto state 73
Result : <Node @ 0x7f8a1272ad90> (<parser.Node object at 0x7f8a1272ad90>)

State  : 73
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list . LexToken(LCURLYBRACKET,'{',4,31)
Action : Shift and goto state 61

State  : 61
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list LCURLYBRACKET . LexToken(RETURN,'return',5,44)
Action : Reduce rule [openbrace -> LCURLYBRACKET] with ['{'] and goto state 86
Result : <str @ 0x7f8a1280b170> ('{')

State  : 86
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace . LexToken(RETURN,'return',5,44)
Action : Shift and goto state 95

State  : 95
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN . LexToken(INT_CONST,'0',5,51)
Action : Shift and goto state 126

State  : 126
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN INT_CONST . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [primary_expression -> INT_CONST] with ['0'] and goto state 114
Result : <Node @ 0x7f8a124617f0> (<parser.Node object at 0x7f8a124617f0>)

State  : 114
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN primary_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [postfix_expression -> primary_expression] with [<Node @ 0x7f8a124617f0>] and goto state 107
Result : <Node @ 0x7f8a124617f0> (<parser.Node object at 0x7f8a124617f0>)

State  : 107
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN postfix_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [unary_expression -> postfix_expression] with [<Node @ 0x7f8a124617f0>] and goto state 105
Result : <Node @ 0x7f8a124617f0> (<parser.Node object at 0x7f8a124617f0>)

State  : 105
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN unary_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [cast_expression -> unary_expression] with [<Node @ 0x7f8a124617f0>] and goto state 111
Result : <Node @ 0x7f8a124617f0> (<parser.Node object at 0x7f8a124617f0>)

State  : 111
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN cast_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [multiplicative_expression -> cast_expression] with [<Node @ 0x7f8a124617f0>] and goto state 135
Result : <Node @ 0x7f8a124617f0> (<parser.Node object at 0x7f8a124617f0>)

State  : 135
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN multiplicative_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [additive_expression -> multiplicative_expression] with [<Node @ 0x7f8a124617f0>] and goto state 134
Result : <Node @ 0x7f8a124617f0> (<parser.Node object at 0x7f8a124617f0>)

State  : 134
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN additive_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [shift_expression -> additive_expression] with [<Node @ 0x7f8a124617f0>] and goto state 133
Result : <Node @ 0x7f8a124617f0> (<parser.Node object at 0x7f8a124617f0>)

State  : 133
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN shift_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [relational_expression -> shift_expression] with [<Node @ 0x7f8a124617f0>] and goto state 132
Result : <Node @ 0x7f8a124617f0> (<parser.Node object at 0x7f8a124617f0>)

State  : 132
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN relational_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [equality_expression -> relational_expression] with [<Node @ 0x7f8a124617f0>] and goto state 131
Result : <Node @ 0x7f8a124617f0> (<parser.Node object at 0x7f8a124617f0>)

State  : 131
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN equality_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [and_expression -> equality_expression] with [<Node @ 0x7f8a124617f0>] and goto state 130
Result : <Node @ 0x7f8a124617f0> (<parser.Node object at 0x7f8a124617f0>)

State  : 130
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN and_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [exclusive_or_expression -> and_expression] with [<Node @ 0x7f8a124617f0>] and goto state 129
Result : <Node @ 0x7f8a124617f0> (<parser.Node object at 0x7f8a124617f0>)

State  : 129
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN exclusive_or_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [inclusive_or_expression -> exclusive_or_expression] with [<Node @ 0x7f8a124617f0>] and goto state 121
Result : <Node @ 0x7f8a124617f0> (<parser.Node object at 0x7f8a124617f0>)

State  : 121
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN inclusive_or_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [logical_and_expression -> inclusive_or_expression] with [<Node @ 0x7f8a124617f0>] and goto state 113
Result : <Node @ 0x7f8a124617f0> (<parser.Node object at 0x7f8a124617f0>)

State  : 113
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN logical_and_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [logical_or_expression -> logical_and_expression] with [<Node @ 0x7f8a124617f0>] and goto state 106
Result : <Node @ 0x7f8a124617f0> (<parser.Node object at 0x7f8a124617f0>)

State  : 106
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN logical_or_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [conditional_expression -> logical_or_expression] with [<Node @ 0x7f8a124617f0>] and goto state 104
Result : <Node @ 0x7f8a124617f0> (<parser.Node object at 0x7f8a124617f0>)

State  : 104
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN conditional_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [assignment_expression -> conditional_expression] with [<Node @ 0x7f8a124617f0>] and goto state 99
Result : <Node @ 0x7f8a124617f0> (<parser.Node object at 0x7f8a124617f0>)

State  : 99
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN assignment_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [expression -> assignment_expression] with [<Node @ 0x7f8a124617f0>] and goto state 189
Result : <Node @ 0x7f8a124617f0> (<parser.Node object at 0x7f8a124617f0>)

State  : 189
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN expression . LexToken(SEMICOLON,';',5,53)
Action : Shift and goto state 280

State  : 280
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN expression SEMICOLON . LexToken(RCURLYBRACKET,'}',6,59)
Action : Reduce rule [jump_statement -> RETURN expression SEMICOLON] with ['return',<Node @ 0x7f8a124617f0>,';'] and goto state 81
Result : <Node @ 0x7f8a12461b80> (<parser.Node object at 0x7f8a12461b80>)

State  : 81
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace jump_statement . LexToken(RCURLYBRACKET,'}',6,59)
Action : Reduce rule [statement -> jump_statement] with [<Node @ 0x7f8a12461b80>] and goto state 75
Result : <Node @ 0x7f8a124f60a0> (<parser.Node object at 0x7f8a124f60a0>)

State  : 75
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace statement . LexToken(RCURLYBRACKET,'}',6,59)
Action : Reduce rule [statement_list -> statement] with [<Node @ 0x7f8a124f60a0>] and goto state 176
Result : <Node @ 0x7f8a124f60a0> (<parser.Node object at 0x7f8a124f60a0>)

State  : 176
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace statement_list . LexToken(RCURLYBRACKET,'}',6,59)
Action : Shift and goto state 74

State  : 74
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace statement_list RCURLYBRACKET . LexToken(RCURLYBRACKET,'}',7,61)
Action : Reduce rule [closebrace -> RCURLYBRACKET] with ['}'] and goto state 266
Result : <str @ 0x7f8a1280b1b0> ('}')

State  : 266
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace statement_list closebrace . LexToken(RCURLYBRACKET,'}',7,61)
Action : Reduce rule [compound_statement -> openbrace statement_list closebrace] with ['{',<Node @ 0x7f8a124f60a0>,'}'] and goto state 77
Result : <Node @ 0x7f8a124f60a0> (<parser.Node object at 0x7f8a124f60a0>)

State  : 77
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list compound_statement . LexToken(RCURLYBRACKET,'}',7,61)
Action : Reduce rule [statement -> compound_statement] with [<Node @ 0x7f8a124f60a0>] and goto state 75
Result : <Node @ 0x7f8a1272ad60> (<parser.Node object at 0x7f8a1272ad60>)

State  : 75
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list statement . LexToken(RCURLYBRACKET,'}',7,61)
Action : Reduce rule [statement_list -> statement] with [<Node @ 0x7f8a1272ad60>] and goto state 168
Result : <Node @ 0x7f8a1272ad60> (<parser.Node object at 0x7f8a1272ad60>)

State  : 168
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list statement_list . LexToken(RCURLYBRACKET,'}',7,61)
Action : Shift and goto state 74

State  : 74
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list statement_list RCURLYBRACKET . $end
Action : Reduce rule [closebrace -> RCURLYBRACKET] with ['}'] and goto state 262
Result : <str @ 0x7f8a1280b1b0> ('}')

State  : 262
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list statement_list closebrace . $end
Action : Reduce rule [function_compound_statement -> LCURLYBRACKET declaration_list statement_list closebrace] with ['{',<Node @ 0x7f8a1272ad90>,<Node @ 0x7f8a1272ad60>,'}'] and goto state 65
Result : <Node @ 0x7f8a12461970> (<parser.Node object at 0x7f8a12461970>)

State  : 65
Stack  : declaration_specifiers declarator function_compound_statement . $end
Action : Reduce rule [function_definition -> declaration_specifiers declarator function_compound_statement] with [<Node @ 0x7f8a124f6460>,<Node @ 0x7f8a127582e0>,<Node @ 0x7f8a12461970>] and goto state 3
Result : <Node @ 0x7f8a12302610> (<parser.Node object at 0x7f8a12302610>)

State  : 3
Stack  : function_definition . $end
Action : Reduce rule [external_declaration -> function_definition] with [<Node @ 0x7f8a12302610>] and goto state 2
Result : <Node @ 0x7f8a12302610> (<parser.Node object at 0x7f8a12302610>)

State  : 2
Stack  : external_declaration . $end
Action : Reduce rule [translation_unit -> external_declaration] with [<Node @ 0x7f8a12302610>] and goto state 1
Result : <Node @ 0x7f8a124f6460> (<parser.Node object at 0x7f8a124f6460>)

State  : 1
Stack  : translation_unit . $end
Done   : Returning <Node @ 0x7f8a124f6460> (<parser.Node object at 0x7f8a124f6460>)
PLY: PARSE DEBUG END
PLY: PARSE DEBUG START

State  : 0
Stack  : . LexToken(INT,'int',1,0)
Action : Shift and goto state 20

State  : 20
Stack  : INT . LexToken(ID,'main',1,4)
Action : Reduce rule [type_specifier -> INT] with ['int'] and goto state 8
Result : <Node @ 0x7f0b9e889310> (<parser.Node object at 0x7f0b9e889310>)

State  : 8
Stack  : type_specifier . LexToken(ID,'main',1,4)
Action : Reduce rule [declaration_specifiers -> type_specifier] with [<Node @ 0x7f0b9e889310>] and goto state 5
Result : <Node @ 0x7f0b9e889310> (<parser.Node object at 0x7f0b9e889310>)

State  : 5
Stack  : declaration_specifiers . LexToken(ID,'main',1,4)
Action : Shift and goto state 32

State  : 32
Stack  : declaration_specifiers ID . LexToken(LPAREN,'(',1,8)
Action : Reduce rule [direct_declarator -> ID] with ['main'] and goto state 11
Result : <Node @ 0x7f0b9e8891f0> (<parser.Node object at 0x7f0b9e8891f0>)

State  : 11
Stack  : declaration_specifiers direct_declarator . LexToken(LPAREN,'(',1,8)
Action : Shift and goto state 54

State  : 54
Stack  : declaration_specifiers direct_declarator LPAREN . LexToken(RPAREN,')',1,9)
Action : Reduce rule [lopenparen -> LPAREN] with ['('] and goto state 52
Result : <str @ 0x7f0b9ed0cfb0> ('(')

State  : 52
Stack  : declaration_specifiers direct_declarator lopenparen . LexToken(RPAREN,')',1,9)
Action : Shift and goto state 138

State  : 138
Stack  : declaration_specifiers direct_declarator lopenparen RPAREN . LexToken(LCURLYBRACKET,'{',2,11)
Action : Reduce rule [direct_declarator -> direct_declarator lopenparen RPAREN] with [<Node @ 0x7f0b9e8891f0>,'(',')'] and goto state 11
Result : <Node @ 0x7f0b9e8891f0> (<parser.Node object at 0x7f0b9e8891f0>)

State  : 11
Stack  : declaration_specifiers direct_declarator . LexToken(LCURLYBRACKET,'{',2,11)
Action : Reduce rule [declarator -> direct_declarator] with [<Node @ 0x7f0b9e8891f0>] and goto state 39
Result : <Node @ 0x7f0b9e8891f0> (<parser.Node object at 0x7f0b9e8891f0>)

State  : 39
Stack  : declaration_specifiers declarator . LexToken(LCURLYBRACKET,'{',2,11)
Action : Shift and goto state 46

State  : 46
Stack  : declaration_specifiers declarator LCURLYBRACKET . LexToken(INT,'int',3,17)
Action : Shift and goto state 20

State  : 20
Stack  : declaration_specifiers declarator LCURLYBRACKET INT . LexToken(ID,'x',3,21)
Action : Reduce rule [type_specifier -> INT] with ['int'] and goto state 8
Result : <Node @ 0x7f0b9e889250> (<parser.Node object at 0x7f0b9e889250>)

State  : 8
Stack  : declaration_specifiers declarator LCURLYBRACKET type_specifier . LexToken(ID,'x',3,21)
Action : Reduce rule [declaration_specifiers -> type_specifier] with [<Node @ 0x7f0b9e889250>] and goto state 47
Result : <Node @ 0x7f0b9e889250> (<parser.Node object at 0x7f0b9e889250>)

State  : 47
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers . LexToken(ID,'x',3,21)
Action : Shift and goto state 32

State  : 32
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers ID . LexToken(COMMA,',',3,22)
Action : Reduce rule [direct_declarator -> ID] with ['x'] and goto state 11
Result : <Node @ 0x7f0b9e889220> (<parser.Node object at 0x7f0b9e889220>)

State  : 11
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers direct_declarator . LexToken(COMMA,',',3,22)
Action : Reduce rule [declarator -> direct_declarator] with [<Node @ 0x7f0b9e889220>] and goto state 136
Result : <Node @ 0x7f0b9e889220> (<parser.Node object at 0x7f0b9e889220>)

State  : 136
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers declarator . LexToken(COMMA,',',3,22)
Action : Reduce rule [init_declarator -> declarator] with [<Node @ 0x7f0b9e889220>] and goto state 42
Result : <Node @ 0x7f0b9e889220> (<parser.Node object at 0x7f0b9e889220>)

State  : 42
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator . LexToken(COMMA,',',3,22)
Action : Reduce rule [init_declarator_list -> init_declarator] with [<Node @ 0x7f0b9e889220>] and goto state 41
Result : <Node @ 0x7f0b9e889430> (<parser.Node object at 0x7f0b9e889430>)

State  : 41
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list . LexToken(COMMA,',',3,22)
Action : Shift and goto state 68

State  : 68
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list COMMA . LexToken(ID,'y',3,24)
Action : Shift and goto state 32

State  : 32
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list COMMA ID . LexToken(SEMICOLON,';',3,25)
Action : Reduce rule [direct_declarator -> ID] with ['y'] and goto state 11
Result : <Node @ 0x7f0b9e8892e0> (<parser.Node object at 0x7f0b9e8892e0>)

State  : 11
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list COMMA direct_declarator . LexToken(SEMICOLON,';',3,25)
Action : Reduce rule [declarator -> direct_declarator] with [<Node @ 0x7f0b9e8892e0>] and goto state 136
Result : <Node @ 0x7f0b9e8892e0> (<parser.Node object at 0x7f0b9e8892e0>)

State  : 136
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list COMMA declarator . LexToken(SEMICOLON,';',3,25)
Action : Reduce rule [init_declarator -> declarator] with [<Node @ 0x7f0b9e8892e0>] and goto state 164
Result : <Node @ 0x7f0b9e8892e0> (<parser.Node object at 0x7f0b9e8892e0>)

State  : 164
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list COMMA init_declarator . LexToken(SEMICOLON,';',3,25)
Action : Reduce rule [init_declarator_list -> init_declarator_list COMMA init_declarator] with [<Node @ 0x7f0b9e889430>,',',<Node @ 0x7f0b9e8892e0>] and goto state 41
Result : <Node @ 0x7f0b9e889430> (<parser.Node object at 0x7f0b9e889430>)

State  : 41
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list . LexToken(SEMICOLON,';',3,25)
Action : Shift and goto state 67

State  : 67
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list SEMICOLON . LexToken(LCURLYBRACKET,'{',4,31)
Action : Reduce rule [declaration -> declaration_specifiers init_declarator_list SEMICOLON] with [<Node @ 0x7f0b9e889250>,<Node @ 0x7f0b9e889430>,';'] and goto state 45
Result : <Node @ 0x7f0b9e889280> (<parser.Node object at 0x7f0b9e889280>)

State  : 45
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration . LexToken(LCURLYBRACKET,'{',4,31)
Action : Reduce rule [declaration_list -> declaration] with [<Node @ 0x7f0b9e889280>] and goto state 73
Result : <Node @ 0x7f0b9e889280> (<parser.Node object at 0x7f0b9e889280>)

State  : 73
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list . LexToken(LCURLYBRACKET,'{',4,31)
Action : Shift and goto state 61

State  : 61
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list LCURLYBRACKET . LexToken(RETURN,'return',5,44)
Action : Reduce rule [openbrace -> LCURLYBRACKET] with ['{'] and goto state 86
Result : <str @ 0x7f0b9eddb170> ('{')

State  : 86
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace . LexToken(RETURN,'return',5,44)
Action : Shift and goto state 95

State  : 95
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN . LexToken(INT_CONST,'0',5,51)
Action : Shift and goto state 126

State  : 126
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN INT_CONST . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [primary_expression -> INT_CONST] with ['0'] and goto state 114
Result : <Node @ 0x7f0b9e889730> (<parser.Node object at 0x7f0b9e889730>)

State  : 114
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN primary_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [postfix_expression -> primary_expression] with [<Node @ 0x7f0b9e889730>] and goto state 107
Result : <Node @ 0x7f0b9e889730> (<parser.Node object at 0x7f0b9e889730>)

State  : 107
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN postfix_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [unary_expression -> postfix_expression] with [<Node @ 0x7f0b9e889730>] and goto state 105
Result : <Node @ 0x7f0b9e889730> (<parser.Node object at 0x7f0b9e889730>)

State  : 105
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN unary_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [cast_expression -> unary_expression] with [<Node @ 0x7f0b9e889730>] and goto state 111
Result : <Node @ 0x7f0b9e889730> (<parser.Node object at 0x7f0b9e889730>)

State  : 111
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN cast_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [multiplicative_expression -> cast_expression] with [<Node @ 0x7f0b9e889730>] and goto state 135
Result : <Node @ 0x7f0b9e889730> (<parser.Node object at 0x7f0b9e889730>)

State  : 135
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN multiplicative_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [additive_expression -> multiplicative_expression] with [<Node @ 0x7f0b9e889730>] and goto state 134
Result : <Node @ 0x7f0b9e889730> (<parser.Node object at 0x7f0b9e889730>)

State  : 134
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN additive_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [shift_expression -> additive_expression] with [<Node @ 0x7f0b9e889730>] and goto state 133
Result : <Node @ 0x7f0b9e889730> (<parser.Node object at 0x7f0b9e889730>)

State  : 133
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN shift_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [relational_expression -> shift_expression] with [<Node @ 0x7f0b9e889730>] and goto state 132
Result : <Node @ 0x7f0b9e889730> (<parser.Node object at 0x7f0b9e889730>)

State  : 132
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN relational_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [equality_expression -> relational_expression] with [<Node @ 0x7f0b9e889730>] and goto state 131
Result : <Node @ 0x7f0b9e889730> (<parser.Node object at 0x7f0b9e889730>)

State  : 131
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN equality_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [and_expression -> equality_expression] with [<Node @ 0x7f0b9e889730>] and goto state 130
Result : <Node @ 0x7f0b9e889730> (<parser.Node object at 0x7f0b9e889730>)

State  : 130
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN and_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [exclusive_or_expression -> and_expression] with [<Node @ 0x7f0b9e889730>] and goto state 129
Result : <Node @ 0x7f0b9e889730> (<parser.Node object at 0x7f0b9e889730>)

State  : 129
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN exclusive_or_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [inclusive_or_expression -> exclusive_or_expression] with [<Node @ 0x7f0b9e889730>] and goto state 121
Result : <Node @ 0x7f0b9e889730> (<parser.Node object at 0x7f0b9e889730>)

State  : 121
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN inclusive_or_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [logical_and_expression -> inclusive_or_expression] with [<Node @ 0x7f0b9e889730>] and goto state 113
Result : <Node @ 0x7f0b9e889730> (<parser.Node object at 0x7f0b9e889730>)

State  : 113
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN logical_and_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [logical_or_expression -> logical_and_expression] with [<Node @ 0x7f0b9e889730>] and goto state 106
Result : <Node @ 0x7f0b9e889730> (<parser.Node object at 0x7f0b9e889730>)

State  : 106
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN logical_or_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [conditional_expression -> logical_or_expression] with [<Node @ 0x7f0b9e889730>] and goto state 104
Result : <Node @ 0x7f0b9e889730> (<parser.Node object at 0x7f0b9e889730>)

State  : 104
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN conditional_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [assignment_expression -> conditional_expression] with [<Node @ 0x7f0b9e889730>] and goto state 99
Result : <Node @ 0x7f0b9e889730> (<parser.Node object at 0x7f0b9e889730>)

State  : 99
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN assignment_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [expression -> assignment_expression] with [<Node @ 0x7f0b9e889730>] and goto state 189
Result : <Node @ 0x7f0b9e889730> (<parser.Node object at 0x7f0b9e889730>)

State  : 189
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN expression . LexToken(SEMICOLON,';',5,53)
Action : Shift and goto state 280

State  : 280
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN expression SEMICOLON . LexToken(RCURLYBRACKET,'}',6,59)
Action : Reduce rule [jump_statement -> RETURN expression SEMICOLON] with ['return',<Node @ 0x7f0b9e889730>,';'] and goto state 81
Result : <Node @ 0x7f0b9e8892e0> (<parser.Node object at 0x7f0b9e8892e0>)

State  : 81
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace jump_statement . LexToken(RCURLYBRACKET,'}',6,59)
Action : Reduce rule [statement -> jump_statement] with [<Node @ 0x7f0b9e8892e0>] and goto state 75
Result : <Node @ 0x7f0b9e889670> (<parser.Node object at 0x7f0b9e889670>)

State  : 75
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace statement . LexToken(RCURLYBRACKET,'}',6,59)
Action : Reduce rule [statement_list -> statement] with [<Node @ 0x7f0b9e889670>] and goto state 176
Result : <Node @ 0x7f0b9e889670> (<parser.Node object at 0x7f0b9e889670>)

State  : 176
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace statement_list . LexToken(RCURLYBRACKET,'}',6,59)
Action : Shift and goto state 74

State  : 74
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace statement_list RCURLYBRACKET . LexToken(RCURLYBRACKET,'}',7,61)
Action : Reduce rule [closebrace -> RCURLYBRACKET] with ['}'] and goto state 266
Result : <str @ 0x7f0b9eddb1b0> ('}')

State  : 266
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace statement_list closebrace . LexToken(RCURLYBRACKET,'}',7,61)
Action : Reduce rule [compound_statement -> openbrace statement_list closebrace] with ['{',<Node @ 0x7f0b9e889670>,'}'] and goto state 77
Result : <Node @ 0x7f0b9e889670> (<parser.Node object at 0x7f0b9e889670>)

State  : 77
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list compound_statement . LexToken(RCURLYBRACKET,'}',7,61)
Action : Reduce rule [statement -> compound_statement] with [<Node @ 0x7f0b9e889670>] and goto state 75
Result : <Node @ 0x7f0b9e889490> (<parser.Node object at 0x7f0b9e889490>)

State  : 75
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list statement . LexToken(RCURLYBRACKET,'}',7,61)
Action : Reduce rule [statement_list -> statement] with [<Node @ 0x7f0b9e889490>] and goto state 168
Result : <Node @ 0x7f0b9e889490> (<parser.Node object at 0x7f0b9e889490>)

State  : 168
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list statement_list . LexToken(RCURLYBRACKET,'}',7,61)
Action : Shift and goto state 74

State  : 74
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list statement_list RCURLYBRACKET . $end
Action : Reduce rule [closebrace -> RCURLYBRACKET] with ['}'] and goto state 262
Result : <str @ 0x7f0b9eddb1b0> ('}')

State  : 262
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list statement_list closebrace . $end
Action : Reduce rule [function_compound_statement -> LCURLYBRACKET declaration_list statement_list closebrace] with ['{',<Node @ 0x7f0b9e889280>,<Node @ 0x7f0b9e889490>,'}'] and goto state 65
Result : <Node @ 0x7f0b9e889610> (<parser.Node object at 0x7f0b9e889610>)

State  : 65
Stack  : declaration_specifiers declarator function_compound_statement . $end
Action : Reduce rule [function_definition -> declaration_specifiers declarator function_compound_statement] with [<Node @ 0x7f0b9e889310>,<Node @ 0x7f0b9e8891f0>,<Node @ 0x7f0b9e889610>] and goto state 3
Result : <Node @ 0x7f0b9e8896a0> (<parser.Node object at 0x7f0b9e8896a0>)

State  : 3
Stack  : function_definition . $end
Action : Reduce rule [external_declaration -> function_definition] with [<Node @ 0x7f0b9e8896a0>] and goto state 2
Result : <Node @ 0x7f0b9e8896a0> (<parser.Node object at 0x7f0b9e8896a0>)

State  : 2
Stack  : external_declaration . $end
Action : Reduce rule [translation_unit -> external_declaration] with [<Node @ 0x7f0b9e8896a0>] and goto state 1
Result : <Node @ 0x7f0b9e889400> (<parser.Node object at 0x7f0b9e889400>)

State  : 1
Stack  : translation_unit . $end
Done   : Returning <Node @ 0x7f0b9e889400> (<parser.Node object at 0x7f0b9e889400>)
PLY: PARSE DEBUG END
PLY: PARSE DEBUG START

State  : 0
Stack  : . LexToken(INT,'int',1,0)
Action : Shift and goto state 20

State  : 20
Stack  : INT . LexToken(ID,'main',1,4)
Action : Reduce rule [type_specifier -> INT] with ['int'] and goto state 8
Result : <Node @ 0x7f7796704310> (<parser.Node object at 0x7f7796704310>)

State  : 8
Stack  : type_specifier . LexToken(ID,'main',1,4)
Action : Reduce rule [declaration_specifiers -> type_specifier] with [<Node @ 0x7f7796704310>] and goto state 5
Result : <Node @ 0x7f7796704310> (<parser.Node object at 0x7f7796704310>)

State  : 5
Stack  : declaration_specifiers . LexToken(ID,'main',1,4)
Action : Shift and goto state 32

State  : 32
Stack  : declaration_specifiers ID . LexToken(LPAREN,'(',1,8)
Action : Reduce rule [direct_declarator -> ID] with ['main'] and goto state 11
Result : <Node @ 0x7f77967041f0> (<parser.Node object at 0x7f77967041f0>)

State  : 11
Stack  : declaration_specifiers direct_declarator . LexToken(LPAREN,'(',1,8)
Action : Shift and goto state 54

State  : 54
Stack  : declaration_specifiers direct_declarator LPAREN . LexToken(RPAREN,')',1,9)
Action : Reduce rule [lopenparen -> LPAREN] with ['('] and goto state 52
Result : <str @ 0x7f7796c09030> ('(')

State  : 52
Stack  : declaration_specifiers direct_declarator lopenparen . LexToken(RPAREN,')',1,9)
Action : Shift and goto state 138

State  : 138
Stack  : declaration_specifiers direct_declarator lopenparen RPAREN . LexToken(LCURLYBRACKET,'{',2,11)
Action : Reduce rule [direct_declarator -> direct_declarator lopenparen RPAREN] with [<Node @ 0x7f77967041f0>,'(',')'] and goto state 11
Result : <Node @ 0x7f77967041f0> (<parser.Node object at 0x7f77967041f0>)

State  : 11
Stack  : declaration_specifiers direct_declarator . LexToken(LCURLYBRACKET,'{',2,11)
Action : Reduce rule [declarator -> direct_declarator] with [<Node @ 0x7f77967041f0>] and goto state 39
Result : <Node @ 0x7f77967041f0> (<parser.Node object at 0x7f77967041f0>)

State  : 39
Stack  : declaration_specifiers declarator . LexToken(LCURLYBRACKET,'{',2,11)
Action : Shift and goto state 46

State  : 46
Stack  : declaration_specifiers declarator LCURLYBRACKET . LexToken(INT,'int',3,17)
Action : Shift and goto state 20

State  : 20
Stack  : declaration_specifiers declarator LCURLYBRACKET INT . LexToken(ID,'x',3,21)
Action : Reduce rule [type_specifier -> INT] with ['int'] and goto state 8
Result : <Node @ 0x7f7796704250> (<parser.Node object at 0x7f7796704250>)

State  : 8
Stack  : declaration_specifiers declarator LCURLYBRACKET type_specifier . LexToken(ID,'x',3,21)
Action : Reduce rule [declaration_specifiers -> type_specifier] with [<Node @ 0x7f7796704250>] and goto state 47
Result : <Node @ 0x7f7796704250> (<parser.Node object at 0x7f7796704250>)

State  : 47
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers . LexToken(ID,'x',3,21)
Action : Shift and goto state 32

State  : 32
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers ID . LexToken(COMMA,',',3,22)
Action : Reduce rule [direct_declarator -> ID] with ['x'] and goto state 11
Result : <Node @ 0x7f7796704220> (<parser.Node object at 0x7f7796704220>)

State  : 11
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers direct_declarator . LexToken(COMMA,',',3,22)
Action : Reduce rule [declarator -> direct_declarator] with [<Node @ 0x7f7796704220>] and goto state 136
Result : <Node @ 0x7f7796704220> (<parser.Node object at 0x7f7796704220>)

State  : 136
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers declarator . LexToken(COMMA,',',3,22)
Action : Reduce rule [init_declarator -> declarator] with [<Node @ 0x7f7796704220>] and goto state 42
Result : <Node @ 0x7f7796704220> (<parser.Node object at 0x7f7796704220>)

State  : 42
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator . LexToken(COMMA,',',3,22)
Action : Reduce rule [init_declarator_list -> init_declarator] with [<Node @ 0x7f7796704220>] and goto state 41
Result : <Node @ 0x7f7796704430> (<parser.Node object at 0x7f7796704430>)

State  : 41
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list . LexToken(COMMA,',',3,22)
Action : Shift and goto state 68

State  : 68
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list COMMA . LexToken(ID,'y',3,24)
Action : Shift and goto state 32

State  : 32
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list COMMA ID . LexToken(SEMICOLON,';',3,25)
Action : Reduce rule [direct_declarator -> ID] with ['y'] and goto state 11
Result : <Node @ 0x7f77967042e0> (<parser.Node object at 0x7f77967042e0>)

State  : 11
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list COMMA direct_declarator . LexToken(SEMICOLON,';',3,25)
Action : Reduce rule [declarator -> direct_declarator] with [<Node @ 0x7f77967042e0>] and goto state 136
Result : <Node @ 0x7f77967042e0> (<parser.Node object at 0x7f77967042e0>)

State  : 136
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list COMMA declarator . LexToken(SEMICOLON,';',3,25)
Action : Reduce rule [init_declarator -> declarator] with [<Node @ 0x7f77967042e0>] and goto state 164
Result : <Node @ 0x7f77967042e0> (<parser.Node object at 0x7f77967042e0>)

State  : 164
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list COMMA init_declarator . LexToken(SEMICOLON,';',3,25)
Action : Reduce rule [init_declarator_list -> init_declarator_list COMMA init_declarator] with [<Node @ 0x7f7796704430>,',',<Node @ 0x7f77967042e0>] and goto state 41
Result : <Node @ 0x7f7796704430> (<parser.Node object at 0x7f7796704430>)

State  : 41
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list . LexToken(SEMICOLON,';',3,25)
Action : Shift and goto state 67

State  : 67
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list SEMICOLON . LexToken(LCURLYBRACKET,'{',4,31)
Action : Reduce rule [declaration -> declaration_specifiers init_declarator_list SEMICOLON] with [<Node @ 0x7f7796704250>,<Node @ 0x7f7796704430>,';'] and goto state 45
Result : <Node @ 0x7f7796704280> (<parser.Node object at 0x7f7796704280>)

State  : 45
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration . LexToken(LCURLYBRACKET,'{',4,31)
Action : Reduce rule [declaration_list -> declaration] with [<Node @ 0x7f7796704280>] and goto state 73
Result : <Node @ 0x7f7796704280> (<parser.Node object at 0x7f7796704280>)

State  : 73
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list . LexToken(LCURLYBRACKET,'{',4,31)
Action : Shift and goto state 61

State  : 61
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list LCURLYBRACKET . LexToken(RETURN,'return',5,44)
Action : Reduce rule [openbrace -> LCURLYBRACKET] with ['{'] and goto state 86
Result : <str @ 0x7f7796cd21f0> ('{')

State  : 86
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace . LexToken(RETURN,'return',5,44)
Action : Shift and goto state 95

State  : 95
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN . LexToken(INT_CONST,'0',5,51)
Action : Shift and goto state 126

State  : 126
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN INT_CONST . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [primary_expression -> INT_CONST] with ['0'] and goto state 114
Result : <Node @ 0x7f7796704730> (<parser.Node object at 0x7f7796704730>)

State  : 114
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN primary_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [postfix_expression -> primary_expression] with [<Node @ 0x7f7796704730>] and goto state 107
Result : <Node @ 0x7f7796704730> (<parser.Node object at 0x7f7796704730>)

State  : 107
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN postfix_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [unary_expression -> postfix_expression] with [<Node @ 0x7f7796704730>] and goto state 105
Result : <Node @ 0x7f7796704730> (<parser.Node object at 0x7f7796704730>)

State  : 105
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN unary_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [cast_expression -> unary_expression] with [<Node @ 0x7f7796704730>] and goto state 111
Result : <Node @ 0x7f7796704730> (<parser.Node object at 0x7f7796704730>)

State  : 111
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN cast_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [multiplicative_expression -> cast_expression] with [<Node @ 0x7f7796704730>] and goto state 135
Result : <Node @ 0x7f7796704730> (<parser.Node object at 0x7f7796704730>)

State  : 135
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN multiplicative_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [additive_expression -> multiplicative_expression] with [<Node @ 0x7f7796704730>] and goto state 134
Result : <Node @ 0x7f7796704730> (<parser.Node object at 0x7f7796704730>)

State  : 134
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN additive_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [shift_expression -> additive_expression] with [<Node @ 0x7f7796704730>] and goto state 133
Result : <Node @ 0x7f7796704730> (<parser.Node object at 0x7f7796704730>)

State  : 133
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN shift_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [relational_expression -> shift_expression] with [<Node @ 0x7f7796704730>] and goto state 132
Result : <Node @ 0x7f7796704730> (<parser.Node object at 0x7f7796704730>)

State  : 132
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN relational_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [equality_expression -> relational_expression] with [<Node @ 0x7f7796704730>] and goto state 131
Result : <Node @ 0x7f7796704730> (<parser.Node object at 0x7f7796704730>)

State  : 131
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN equality_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [and_expression -> equality_expression] with [<Node @ 0x7f7796704730>] and goto state 130
Result : <Node @ 0x7f7796704730> (<parser.Node object at 0x7f7796704730>)

State  : 130
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN and_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [exclusive_or_expression -> and_expression] with [<Node @ 0x7f7796704730>] and goto state 129
Result : <Node @ 0x7f7796704730> (<parser.Node object at 0x7f7796704730>)

State  : 129
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN exclusive_or_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [inclusive_or_expression -> exclusive_or_expression] with [<Node @ 0x7f7796704730>] and goto state 121
Result : <Node @ 0x7f7796704730> (<parser.Node object at 0x7f7796704730>)

State  : 121
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN inclusive_or_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [logical_and_expression -> inclusive_or_expression] with [<Node @ 0x7f7796704730>] and goto state 113
Result : <Node @ 0x7f7796704730> (<parser.Node object at 0x7f7796704730>)

State  : 113
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN logical_and_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [logical_or_expression -> logical_and_expression] with [<Node @ 0x7f7796704730>] and goto state 106
Result : <Node @ 0x7f7796704730> (<parser.Node object at 0x7f7796704730>)

State  : 106
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN logical_or_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [conditional_expression -> logical_or_expression] with [<Node @ 0x7f7796704730>] and goto state 104
Result : <Node @ 0x7f7796704730> (<parser.Node object at 0x7f7796704730>)

State  : 104
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN conditional_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [assignment_expression -> conditional_expression] with [<Node @ 0x7f7796704730>] and goto state 99
Result : <Node @ 0x7f7796704730> (<parser.Node object at 0x7f7796704730>)

State  : 99
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN assignment_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [expression -> assignment_expression] with [<Node @ 0x7f7796704730>] and goto state 189
Result : <Node @ 0x7f7796704730> (<parser.Node object at 0x7f7796704730>)

State  : 189
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN expression . LexToken(SEMICOLON,';',5,53)
Action : Shift and goto state 280

State  : 280
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN expression SEMICOLON . LexToken(RCURLYBRACKET,'}',6,59)
Action : Reduce rule [jump_statement -> RETURN expression SEMICOLON] with ['return',<Node @ 0x7f7796704730>,';'] and goto state 81
Result : <Node @ 0x7f77967042e0> (<parser.Node object at 0x7f77967042e0>)

State  : 81
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace jump_statement . LexToken(RCURLYBRACKET,'}',6,59)
Action : Reduce rule [statement -> jump_statement] with [<Node @ 0x7f77967042e0>] and goto state 75
Result : <Node @ 0x7f7796704670> (<parser.Node object at 0x7f7796704670>)

State  : 75
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace statement . LexToken(RCURLYBRACKET,'}',6,59)
Action : Reduce rule [statement_list -> statement] with [<Node @ 0x7f7796704670>] and goto state 176
Result : <Node @ 0x7f7796704670> (<parser.Node object at 0x7f7796704670>)

State  : 176
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace statement_list . LexToken(RCURLYBRACKET,'}',6,59)
Action : Shift and goto state 74

State  : 74
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace statement_list RCURLYBRACKET . LexToken(RCURLYBRACKET,'}',7,61)
Action : Reduce rule [closebrace -> RCURLYBRACKET] with ['}'] and goto state 266
Result : <str @ 0x7f7796cd2230> ('}')

State  : 266
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace statement_list closebrace . LexToken(RCURLYBRACKET,'}',7,61)
Action : Reduce rule [compound_statement -> openbrace statement_list closebrace] with ['{',<Node @ 0x7f7796704670>,'}'] and goto state 77
Result : <Node @ 0x7f7796704670> (<parser.Node object at 0x7f7796704670>)

State  : 77
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list compound_statement . LexToken(RCURLYBRACKET,'}',7,61)
Action : Reduce rule [statement -> compound_statement] with [<Node @ 0x7f7796704670>] and goto state 75
Result : <Node @ 0x7f7796704490> (<parser.Node object at 0x7f7796704490>)

State  : 75
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list statement . LexToken(RCURLYBRACKET,'}',7,61)
Action : Reduce rule [statement_list -> statement] with [<Node @ 0x7f7796704490>] and goto state 168
Result : <Node @ 0x7f7796704490> (<parser.Node object at 0x7f7796704490>)

State  : 168
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list statement_list . LexToken(RCURLYBRACKET,'}',7,61)
Action : Shift and goto state 74

State  : 74
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list statement_list RCURLYBRACKET . $end
Action : Reduce rule [closebrace -> RCURLYBRACKET] with ['}'] and goto state 262
Result : <str @ 0x7f7796cd2230> ('}')

State  : 262
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list statement_list closebrace . $end
Action : Reduce rule [function_compound_statement -> LCURLYBRACKET declaration_list statement_list closebrace] with ['{',<Node @ 0x7f7796704280>,<Node @ 0x7f7796704490>,'}'] and goto state 65
Result : <Node @ 0x7f7796704610> (<parser.Node object at 0x7f7796704610>)

State  : 65
Stack  : declaration_specifiers declarator function_compound_statement . $end
Action : Reduce rule [function_definition -> declaration_specifiers declarator function_compound_statement] with [<Node @ 0x7f7796704310>,<Node @ 0x7f77967041f0>,<Node @ 0x7f7796704610>] and goto state 3
Result : <Node @ 0x7f77967046a0> (<parser.Node object at 0x7f77967046a0>)

State  : 3
Stack  : function_definition . $end
Action : Reduce rule [external_declaration -> function_definition] with [<Node @ 0x7f77967046a0>] and goto state 2
Result : <Node @ 0x7f77967046a0> (<parser.Node object at 0x7f77967046a0>)

State  : 2
Stack  : external_declaration . $end
Action : Reduce rule [translation_unit -> external_declaration] with [<Node @ 0x7f77967046a0>] and goto state 1
Result : <Node @ 0x7f7796704400> (<parser.Node object at 0x7f7796704400>)

State  : 1
Stack  : translation_unit . $end
Done   : Returning <Node @ 0x7f7796704400> (<parser.Node object at 0x7f7796704400>)
PLY: PARSE DEBUG END
PLY: PARSE DEBUG START

State  : 0
Stack  : . LexToken(INT,'int',1,0)
Action : Shift and goto state 20

State  : 20
Stack  : INT . LexToken(ID,'main',1,4)
Action : Reduce rule [type_specifier -> INT] with ['int'] and goto state 8
Result : <Node @ 0x7f546db73310> (<parser.Node object at 0x7f546db73310>)

State  : 8
Stack  : type_specifier . LexToken(ID,'main',1,4)
Action : Reduce rule [declaration_specifiers -> type_specifier] with [<Node @ 0x7f546db73310>] and goto state 5
Result : <Node @ 0x7f546db73310> (<parser.Node object at 0x7f546db73310>)

State  : 5
Stack  : declaration_specifiers . LexToken(ID,'main',1,4)
Action : Shift and goto state 32

State  : 32
Stack  : declaration_specifiers ID . LexToken(LPAREN,'(',1,8)
Action : Reduce rule [direct_declarator -> ID] with ['main'] and goto state 11
Result : <Node @ 0x7f546db731f0> (<parser.Node object at 0x7f546db731f0>)

State  : 11
Stack  : declaration_specifiers direct_declarator . LexToken(LPAREN,'(',1,8)
Action : Shift and goto state 54

State  : 54
Stack  : declaration_specifiers direct_declarator LPAREN . LexToken(RPAREN,')',1,9)
Action : Reduce rule [lopenparen -> LPAREN] with ['('] and goto state 52
Result : <str @ 0x7f546e075ef0> ('(')

State  : 52
Stack  : declaration_specifiers direct_declarator lopenparen . LexToken(RPAREN,')',1,9)
Action : Shift and goto state 138

State  : 138
Stack  : declaration_specifiers direct_declarator lopenparen RPAREN . LexToken(LCURLYBRACKET,'{',2,11)
Action : Reduce rule [direct_declarator -> direct_declarator lopenparen RPAREN] with [<Node @ 0x7f546db731f0>,'(',')'] and goto state 11
Result : <Node @ 0x7f546db731f0> (<parser.Node object at 0x7f546db731f0>)

State  : 11
Stack  : declaration_specifiers direct_declarator . LexToken(LCURLYBRACKET,'{',2,11)
Action : Reduce rule [declarator -> direct_declarator] with [<Node @ 0x7f546db731f0>] and goto state 39
Result : <Node @ 0x7f546db731f0> (<parser.Node object at 0x7f546db731f0>)

State  : 39
Stack  : declaration_specifiers declarator . LexToken(LCURLYBRACKET,'{',2,11)
Action : Shift and goto state 46

State  : 46
Stack  : declaration_specifiers declarator LCURLYBRACKET . LexToken(INT,'int',3,17)
Action : Shift and goto state 20

State  : 20
Stack  : declaration_specifiers declarator LCURLYBRACKET INT . LexToken(ID,'x',3,21)
Action : Reduce rule [type_specifier -> INT] with ['int'] and goto state 8
Result : <Node @ 0x7f546db73250> (<parser.Node object at 0x7f546db73250>)

State  : 8
Stack  : declaration_specifiers declarator LCURLYBRACKET type_specifier . LexToken(ID,'x',3,21)
Action : Reduce rule [declaration_specifiers -> type_specifier] with [<Node @ 0x7f546db73250>] and goto state 47
Result : <Node @ 0x7f546db73250> (<parser.Node object at 0x7f546db73250>)

State  : 47
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers . LexToken(ID,'x',3,21)
Action : Shift and goto state 32

State  : 32
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers ID . LexToken(COMMA,',',3,22)
Action : Reduce rule [direct_declarator -> ID] with ['x'] and goto state 11
Result : <Node @ 0x7f546db73220> (<parser.Node object at 0x7f546db73220>)

State  : 11
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers direct_declarator . LexToken(COMMA,',',3,22)
Action : Reduce rule [declarator -> direct_declarator] with [<Node @ 0x7f546db73220>] and goto state 136
Result : <Node @ 0x7f546db73220> (<parser.Node object at 0x7f546db73220>)

State  : 136
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers declarator . LexToken(COMMA,',',3,22)
Action : Reduce rule [init_declarator -> declarator] with [<Node @ 0x7f546db73220>] and goto state 42
Result : <Node @ 0x7f546db73220> (<parser.Node object at 0x7f546db73220>)

State  : 42
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator . LexToken(COMMA,',',3,22)
Action : Reduce rule [init_declarator_list -> init_declarator] with [<Node @ 0x7f546db73220>] and goto state 41
Result : <Node @ 0x7f546db73430> (<parser.Node object at 0x7f546db73430>)

State  : 41
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list . LexToken(COMMA,',',3,22)
Action : Shift and goto state 68

State  : 68
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list COMMA . LexToken(ID,'y',3,24)
Action : Shift and goto state 32

State  : 32
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list COMMA ID . LexToken(SEMICOLON,';',3,25)
Action : Reduce rule [direct_declarator -> ID] with ['y'] and goto state 11
Result : <Node @ 0x7f546db732e0> (<parser.Node object at 0x7f546db732e0>)

State  : 11
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list COMMA direct_declarator . LexToken(SEMICOLON,';',3,25)
Action : Reduce rule [declarator -> direct_declarator] with [<Node @ 0x7f546db732e0>] and goto state 136
Result : <Node @ 0x7f546db732e0> (<parser.Node object at 0x7f546db732e0>)

State  : 136
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list COMMA declarator . LexToken(SEMICOLON,';',3,25)
Action : Reduce rule [init_declarator -> declarator] with [<Node @ 0x7f546db732e0>] and goto state 164
Result : <Node @ 0x7f546db732e0> (<parser.Node object at 0x7f546db732e0>)

State  : 164
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list COMMA init_declarator . LexToken(SEMICOLON,';',3,25)
Action : Reduce rule [init_declarator_list -> init_declarator_list COMMA init_declarator] with [<Node @ 0x7f546db73430>,',',<Node @ 0x7f546db732e0>] and goto state 41
Result : <Node @ 0x7f546db73430> (<parser.Node object at 0x7f546db73430>)

State  : 41
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list . LexToken(SEMICOLON,';',3,25)
Action : Shift and goto state 67

State  : 67
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list SEMICOLON . LexToken(LCURLYBRACKET,'{',4,31)
Action : Reduce rule [declaration -> declaration_specifiers init_declarator_list SEMICOLON] with [<Node @ 0x7f546db73250>,<Node @ 0x7f546db73430>,';'] and goto state 45
Result : <Node @ 0x7f546db73280> (<parser.Node object at 0x7f546db73280>)

State  : 45
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration . LexToken(LCURLYBRACKET,'{',4,31)
Action : Reduce rule [declaration_list -> declaration] with [<Node @ 0x7f546db73280>] and goto state 73
Result : <Node @ 0x7f546db73280> (<parser.Node object at 0x7f546db73280>)

State  : 73
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list . LexToken(LCURLYBRACKET,'{',4,31)
Action : Shift and goto state 61

State  : 61
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list LCURLYBRACKET . LexToken(RETURN,'return',5,44)
Action : Reduce rule [openbrace -> LCURLYBRACKET] with ['{'] and goto state 86
Result : <str @ 0x7f546e144130> ('{')

State  : 86
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace . LexToken(RETURN,'return',5,44)
Action : Shift and goto state 95

State  : 95
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN . LexToken(INT_CONST,'0',5,51)
Action : Shift and goto state 126

State  : 126
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN INT_CONST . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [primary_expression -> INT_CONST] with ['0'] and goto state 114
Result : <Node @ 0x7f546db73730> (<parser.Node object at 0x7f546db73730>)

State  : 114
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN primary_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [postfix_expression -> primary_expression] with [<Node @ 0x7f546db73730>] and goto state 107
Result : <Node @ 0x7f546db73730> (<parser.Node object at 0x7f546db73730>)

State  : 107
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN postfix_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [unary_expression -> postfix_expression] with [<Node @ 0x7f546db73730>] and goto state 105
Result : <Node @ 0x7f546db73730> (<parser.Node object at 0x7f546db73730>)

State  : 105
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN unary_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [cast_expression -> unary_expression] with [<Node @ 0x7f546db73730>] and goto state 111
Result : <Node @ 0x7f546db73730> (<parser.Node object at 0x7f546db73730>)

State  : 111
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN cast_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [multiplicative_expression -> cast_expression] with [<Node @ 0x7f546db73730>] and goto state 135
Result : <Node @ 0x7f546db73730> (<parser.Node object at 0x7f546db73730>)

State  : 135
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN multiplicative_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [additive_expression -> multiplicative_expression] with [<Node @ 0x7f546db73730>] and goto state 134
Result : <Node @ 0x7f546db73730> (<parser.Node object at 0x7f546db73730>)

State  : 134
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN additive_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [shift_expression -> additive_expression] with [<Node @ 0x7f546db73730>] and goto state 133
Result : <Node @ 0x7f546db73730> (<parser.Node object at 0x7f546db73730>)

State  : 133
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN shift_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [relational_expression -> shift_expression] with [<Node @ 0x7f546db73730>] and goto state 132
Result : <Node @ 0x7f546db73730> (<parser.Node object at 0x7f546db73730>)

State  : 132
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN relational_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [equality_expression -> relational_expression] with [<Node @ 0x7f546db73730>] and goto state 131
Result : <Node @ 0x7f546db73730> (<parser.Node object at 0x7f546db73730>)

State  : 131
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN equality_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [and_expression -> equality_expression] with [<Node @ 0x7f546db73730>] and goto state 130
Result : <Node @ 0x7f546db73730> (<parser.Node object at 0x7f546db73730>)

State  : 130
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN and_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [exclusive_or_expression -> and_expression] with [<Node @ 0x7f546db73730>] and goto state 129
Result : <Node @ 0x7f546db73730> (<parser.Node object at 0x7f546db73730>)

State  : 129
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN exclusive_or_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [inclusive_or_expression -> exclusive_or_expression] with [<Node @ 0x7f546db73730>] and goto state 121
Result : <Node @ 0x7f546db73730> (<parser.Node object at 0x7f546db73730>)

State  : 121
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN inclusive_or_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [logical_and_expression -> inclusive_or_expression] with [<Node @ 0x7f546db73730>] and goto state 113
Result : <Node @ 0x7f546db73730> (<parser.Node object at 0x7f546db73730>)

State  : 113
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN logical_and_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [logical_or_expression -> logical_and_expression] with [<Node @ 0x7f546db73730>] and goto state 106
Result : <Node @ 0x7f546db73730> (<parser.Node object at 0x7f546db73730>)

State  : 106
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN logical_or_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [conditional_expression -> logical_or_expression] with [<Node @ 0x7f546db73730>] and goto state 104
Result : <Node @ 0x7f546db73730> (<parser.Node object at 0x7f546db73730>)

State  : 104
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN conditional_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [assignment_expression -> conditional_expression] with [<Node @ 0x7f546db73730>] and goto state 99
Result : <Node @ 0x7f546db73730> (<parser.Node object at 0x7f546db73730>)

State  : 99
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN assignment_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [expression -> assignment_expression] with [<Node @ 0x7f546db73730>] and goto state 189
Result : <Node @ 0x7f546db73730> (<parser.Node object at 0x7f546db73730>)

State  : 189
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN expression . LexToken(SEMICOLON,';',5,53)
Action : Shift and goto state 280

State  : 280
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN expression SEMICOLON . LexToken(RCURLYBRACKET,'}',6,59)
Action : Reduce rule [jump_statement -> RETURN expression SEMICOLON] with ['return',<Node @ 0x7f546db73730>,';'] and goto state 81
Result : <Node @ 0x7f546db732e0> (<parser.Node object at 0x7f546db732e0>)

State  : 81
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace jump_statement . LexToken(RCURLYBRACKET,'}',6,59)
Action : Reduce rule [statement -> jump_statement] with [<Node @ 0x7f546db732e0>] and goto state 75
Result : <Node @ 0x7f546db73670> (<parser.Node object at 0x7f546db73670>)

State  : 75
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace statement . LexToken(RCURLYBRACKET,'}',6,59)
Action : Reduce rule [statement_list -> statement] with [<Node @ 0x7f546db73670>] and goto state 176
Result : <Node @ 0x7f546db73670> (<parser.Node object at 0x7f546db73670>)

State  : 176
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace statement_list . LexToken(RCURLYBRACKET,'}',6,59)
Action : Shift and goto state 74

State  : 74
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace statement_list RCURLYBRACKET . LexToken(RCURLYBRACKET,'}',7,61)
Action : Reduce rule [closebrace -> RCURLYBRACKET] with ['}'] and goto state 266
Result : <str @ 0x7f546e144170> ('}')

State  : 266
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace statement_list closebrace . LexToken(RCURLYBRACKET,'}',7,61)
Action : Reduce rule [compound_statement -> openbrace statement_list closebrace] with ['{',<Node @ 0x7f546db73670>,'}'] and goto state 77
Result : <Node @ 0x7f546db73670> (<parser.Node object at 0x7f546db73670>)

State  : 77
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list compound_statement . LexToken(RCURLYBRACKET,'}',7,61)
Action : Reduce rule [statement -> compound_statement] with [<Node @ 0x7f546db73670>] and goto state 75
Result : <Node @ 0x7f546db73490> (<parser.Node object at 0x7f546db73490>)

State  : 75
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list statement . LexToken(RCURLYBRACKET,'}',7,61)
Action : Reduce rule [statement_list -> statement] with [<Node @ 0x7f546db73490>] and goto state 168
Result : <Node @ 0x7f546db73490> (<parser.Node object at 0x7f546db73490>)

State  : 168
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list statement_list . LexToken(RCURLYBRACKET,'}',7,61)
Action : Shift and goto state 74

State  : 74
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list statement_list RCURLYBRACKET . $end
Action : Reduce rule [closebrace -> RCURLYBRACKET] with ['}'] and goto state 262
Result : <str @ 0x7f546e144170> ('}')

State  : 262
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list statement_list closebrace . $end
Action : Reduce rule [function_compound_statement -> LCURLYBRACKET declaration_list statement_list closebrace] with ['{',<Node @ 0x7f546db73280>,<Node @ 0x7f546db73490>,'}'] and goto state 65
Result : <Node @ 0x7f546db73610> (<parser.Node object at 0x7f546db73610>)

State  : 65
Stack  : declaration_specifiers declarator function_compound_statement . $end
Action : Reduce rule [function_definition -> declaration_specifiers declarator function_compound_statement] with [<Node @ 0x7f546db73310>,<Node @ 0x7f546db731f0>,<Node @ 0x7f546db73610>] and goto state 3
Result : <Node @ 0x7f546db736a0> (<parser.Node object at 0x7f546db736a0>)

State  : 3
Stack  : function_definition . $end
Action : Reduce rule [external_declaration -> function_definition] with [<Node @ 0x7f546db736a0>] and goto state 2
Result : <Node @ 0x7f546db736a0> (<parser.Node object at 0x7f546db736a0>)

State  : 2
Stack  : external_declaration . $end
Action : Reduce rule [translation_unit -> external_declaration] with [<Node @ 0x7f546db736a0>] and goto state 1
Result : <Node @ 0x7f546db73400> (<parser.Node object at 0x7f546db73400>)

State  : 1
Stack  : translation_unit . $end
Done   : Returning <Node @ 0x7f546db73400> (<parser.Node object at 0x7f546db73400>)
PLY: PARSE DEBUG END
PLY: PARSE DEBUG START

State  : 0
Stack  : . LexToken(INT,'int',1,0)
Action : Shift and goto state 20

State  : 20
Stack  : INT . LexToken(ID,'main',1,4)
Action : Reduce rule [type_specifier -> INT] with ['int'] and goto state 8
Result : <Node @ 0x7f9b178f1bb0> (<parser.Node object at 0x7f9b178f1bb0>)

State  : 8
Stack  : type_specifier . LexToken(ID,'main',1,4)
Action : Reduce rule [declaration_specifiers -> type_specifier] with [<Node @ 0x7f9b178f1bb0>] and goto state 5
Result : <Node @ 0x7f9b178f1bb0> (<parser.Node object at 0x7f9b178f1bb0>)

State  : 5
Stack  : declaration_specifiers . LexToken(ID,'main',1,4)
Action : Shift and goto state 32

State  : 32
Stack  : declaration_specifiers ID . LexToken(LPAREN,'(',1,8)
Action : Reduce rule [direct_declarator -> ID] with ['main'] and goto state 11
Result : <Node @ 0x7f9b178f1a90> (<parser.Node object at 0x7f9b178f1a90>)

State  : 11
Stack  : declaration_specifiers direct_declarator . LexToken(LPAREN,'(',1,8)
Action : Shift and goto state 54

State  : 54
Stack  : declaration_specifiers direct_declarator LPAREN . LexToken(RPAREN,')',1,9)
Action : Reduce rule [lopenparen -> LPAREN] with ['('] and goto state 52
Result : <str @ 0x7f9b17dccef0> ('(')

State  : 52
Stack  : declaration_specifiers direct_declarator lopenparen . LexToken(RPAREN,')',1,9)
Action : Shift and goto state 138

State  : 138
Stack  : declaration_specifiers direct_declarator lopenparen RPAREN . LexToken(LCURLYBRACKET,'{',2,11)
Action : Reduce rule [direct_declarator -> direct_declarator lopenparen RPAREN] with [<Node @ 0x7f9b178f1a90>,'(',')'] and goto state 11
Result : <Node @ 0x7f9b178f1a90> (<parser.Node object at 0x7f9b178f1a90>)

State  : 11
Stack  : declaration_specifiers direct_declarator . LexToken(LCURLYBRACKET,'{',2,11)
Action : Reduce rule [declarator -> direct_declarator] with [<Node @ 0x7f9b178f1a90>] and goto state 39
Result : <Node @ 0x7f9b178f1a90> (<parser.Node object at 0x7f9b178f1a90>)

State  : 39
Stack  : declaration_specifiers declarator . LexToken(LCURLYBRACKET,'{',2,11)
Action : Shift and goto state 46

State  : 46
Stack  : declaration_specifiers declarator LCURLYBRACKET . LexToken(INT,'int',3,17)
Action : Shift and goto state 20

State  : 20
Stack  : declaration_specifiers declarator LCURLYBRACKET INT . LexToken(ID,'x',3,21)
Action : Reduce rule [type_specifier -> INT] with ['int'] and goto state 8
Result : <Node @ 0x7f9b17a8e340> (<parser.Node object at 0x7f9b17a8e340>)

State  : 8
Stack  : declaration_specifiers declarator LCURLYBRACKET type_specifier . LexToken(ID,'x',3,21)
Action : Reduce rule [declaration_specifiers -> type_specifier] with [<Node @ 0x7f9b17a8e340>] and goto state 47
Result : <Node @ 0x7f9b17a8e340> (<parser.Node object at 0x7f9b17a8e340>)

State  : 47
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers . LexToken(ID,'x',3,21)
Action : Shift and goto state 32

State  : 32
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers ID . LexToken(COMMA,',',3,22)
Action : Reduce rule [direct_declarator -> ID] with ['x'] and goto state 11
Result : <Node @ 0x7f9b17a8e460> (<parser.Node object at 0x7f9b17a8e460>)

State  : 11
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers direct_declarator . LexToken(COMMA,',',3,22)
Action : Reduce rule [declarator -> direct_declarator] with [<Node @ 0x7f9b17a8e460>] and goto state 136
Result : <Node @ 0x7f9b17a8e460> (<parser.Node object at 0x7f9b17a8e460>)

State  : 136
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers declarator . LexToken(COMMA,',',3,22)
Action : Reduce rule [init_declarator -> declarator] with [<Node @ 0x7f9b17a8e460>] and goto state 42
Result : <Node @ 0x7f9b17a8e460> (<parser.Node object at 0x7f9b17a8e460>)

State  : 42
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator . LexToken(COMMA,',',3,22)
Action : Reduce rule [init_declarator_list -> init_declarator] with [<Node @ 0x7f9b17a8e460>] and goto state 41
Result : <Node @ 0x7f9b17a8e370> (<parser.Node object at 0x7f9b17a8e370>)

State  : 41
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list . LexToken(COMMA,',',3,22)
Action : Shift and goto state 68

State  : 68
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list COMMA . LexToken(ID,'y',3,24)
Action : Shift and goto state 32

State  : 32
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list COMMA ID . LexToken(SEMICOLON,';',3,25)
Action : Reduce rule [direct_declarator -> ID] with ['y'] and goto state 11
Result : <Node @ 0x7f9b17a8e400> (<parser.Node object at 0x7f9b17a8e400>)

State  : 11
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list COMMA direct_declarator . LexToken(SEMICOLON,';',3,25)
Action : Reduce rule [declarator -> direct_declarator] with [<Node @ 0x7f9b17a8e400>] and goto state 136
Result : <Node @ 0x7f9b17a8e400> (<parser.Node object at 0x7f9b17a8e400>)

State  : 136
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list COMMA declarator . LexToken(SEMICOLON,';',3,25)
Action : Reduce rule [init_declarator -> declarator] with [<Node @ 0x7f9b17a8e400>] and goto state 164
Result : <Node @ 0x7f9b17a8e400> (<parser.Node object at 0x7f9b17a8e400>)

State  : 164
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list COMMA init_declarator . LexToken(SEMICOLON,';',3,25)
Action : Reduce rule [init_declarator_list -> init_declarator_list COMMA init_declarator] with [<Node @ 0x7f9b17a8e370>,',',<Node @ 0x7f9b17a8e400>] and goto state 41
Result : <Node @ 0x7f9b17a8e370> (<parser.Node object at 0x7f9b17a8e370>)

State  : 41
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list . LexToken(SEMICOLON,';',3,25)
Action : Shift and goto state 67

State  : 67
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_specifiers init_declarator_list SEMICOLON . LexToken(LCURLYBRACKET,'{',4,31)
Action : Reduce rule [declaration -> declaration_specifiers init_declarator_list SEMICOLON] with [<Node @ 0x7f9b17a8e340>,<Node @ 0x7f9b17a8e370>,';'] and goto state 45
Result : <Node @ 0x7f9b17a8e130> (<parser.Node object at 0x7f9b17a8e130>)

State  : 45
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration . LexToken(LCURLYBRACKET,'{',4,31)
Action : Reduce rule [declaration_list -> declaration] with [<Node @ 0x7f9b17a8e130>] and goto state 73
Result : <Node @ 0x7f9b17a8e130> (<parser.Node object at 0x7f9b17a8e130>)

State  : 73
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list . LexToken(LCURLYBRACKET,'{',4,31)
Action : Shift and goto state 61

State  : 61
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list LCURLYBRACKET . LexToken(RETURN,'return',5,44)
Action : Reduce rule [openbrace -> LCURLYBRACKET] with ['{'] and goto state 86
Result : <str @ 0x7f9b17e9b0b0> ('{')

State  : 86
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace . LexToken(RETURN,'return',5,44)
Action : Shift and goto state 95

State  : 95
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN . LexToken(INT_CONST,'0',5,51)
Action : Shift and goto state 126

State  : 126
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN INT_CONST . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [primary_expression -> INT_CONST] with ['0'] and goto state 114
Result : <Node @ 0x7f9b17a8e220> (<parser.Node object at 0x7f9b17a8e220>)

State  : 114
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN primary_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [postfix_expression -> primary_expression] with [<Node @ 0x7f9b17a8e220>] and goto state 107
Result : <Node @ 0x7f9b17a8e220> (<parser.Node object at 0x7f9b17a8e220>)

State  : 107
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN postfix_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [unary_expression -> postfix_expression] with [<Node @ 0x7f9b17a8e220>] and goto state 105
Result : <Node @ 0x7f9b17a8e220> (<parser.Node object at 0x7f9b17a8e220>)

State  : 105
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN unary_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [cast_expression -> unary_expression] with [<Node @ 0x7f9b17a8e220>] and goto state 111
Result : <Node @ 0x7f9b17a8e220> (<parser.Node object at 0x7f9b17a8e220>)

State  : 111
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN cast_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [multiplicative_expression -> cast_expression] with [<Node @ 0x7f9b17a8e220>] and goto state 135
Result : <Node @ 0x7f9b17a8e220> (<parser.Node object at 0x7f9b17a8e220>)

State  : 135
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN multiplicative_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [additive_expression -> multiplicative_expression] with [<Node @ 0x7f9b17a8e220>] and goto state 134
Result : <Node @ 0x7f9b17a8e220> (<parser.Node object at 0x7f9b17a8e220>)

State  : 134
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN additive_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [shift_expression -> additive_expression] with [<Node @ 0x7f9b17a8e220>] and goto state 133
Result : <Node @ 0x7f9b17a8e220> (<parser.Node object at 0x7f9b17a8e220>)

State  : 133
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN shift_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [relational_expression -> shift_expression] with [<Node @ 0x7f9b17a8e220>] and goto state 132
Result : <Node @ 0x7f9b17a8e220> (<parser.Node object at 0x7f9b17a8e220>)

State  : 132
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN relational_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [equality_expression -> relational_expression] with [<Node @ 0x7f9b17a8e220>] and goto state 131
Result : <Node @ 0x7f9b17a8e220> (<parser.Node object at 0x7f9b17a8e220>)

State  : 131
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN equality_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [and_expression -> equality_expression] with [<Node @ 0x7f9b17a8e220>] and goto state 130
Result : <Node @ 0x7f9b17a8e220> (<parser.Node object at 0x7f9b17a8e220>)

State  : 130
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN and_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [exclusive_or_expression -> and_expression] with [<Node @ 0x7f9b17a8e220>] and goto state 129
Result : <Node @ 0x7f9b17a8e220> (<parser.Node object at 0x7f9b17a8e220>)

State  : 129
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN exclusive_or_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [inclusive_or_expression -> exclusive_or_expression] with [<Node @ 0x7f9b17a8e220>] and goto state 121
Result : <Node @ 0x7f9b17a8e220> (<parser.Node object at 0x7f9b17a8e220>)

State  : 121
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN inclusive_or_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [logical_and_expression -> inclusive_or_expression] with [<Node @ 0x7f9b17a8e220>] and goto state 113
Result : <Node @ 0x7f9b17a8e220> (<parser.Node object at 0x7f9b17a8e220>)

State  : 113
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN logical_and_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [logical_or_expression -> logical_and_expression] with [<Node @ 0x7f9b17a8e220>] and goto state 106
Result : <Node @ 0x7f9b17a8e220> (<parser.Node object at 0x7f9b17a8e220>)

State  : 106
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN logical_or_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [conditional_expression -> logical_or_expression] with [<Node @ 0x7f9b17a8e220>] and goto state 104
Result : <Node @ 0x7f9b17a8e220> (<parser.Node object at 0x7f9b17a8e220>)

State  : 104
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN conditional_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [assignment_expression -> conditional_expression] with [<Node @ 0x7f9b17a8e220>] and goto state 99
Result : <Node @ 0x7f9b17a8e220> (<parser.Node object at 0x7f9b17a8e220>)

State  : 99
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN assignment_expression . LexToken(SEMICOLON,';',5,53)
Action : Reduce rule [expression -> assignment_expression] with [<Node @ 0x7f9b17a8e220>] and goto state 189
Result : <Node @ 0x7f9b17a8e220> (<parser.Node object at 0x7f9b17a8e220>)

State  : 189
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN expression . LexToken(SEMICOLON,';',5,53)
Action : Shift and goto state 280

State  : 280
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace RETURN expression SEMICOLON . LexToken(RCURLYBRACKET,'}',6,59)
Action : Reduce rule [jump_statement -> RETURN expression SEMICOLON] with ['return',<Node @ 0x7f9b17a8e220>,';'] and goto state 81
Result : <Node @ 0x7f9b17a8e3d0> (<parser.Node object at 0x7f9b17a8e3d0>)

State  : 81
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace jump_statement . LexToken(RCURLYBRACKET,'}',6,59)
Action : Reduce rule [statement -> jump_statement] with [<Node @ 0x7f9b17a8e3d0>] and goto state 75
Result : <Node @ 0x7f9b17a8e370> (<parser.Node object at 0x7f9b17a8e370>)

State  : 75
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace statement . LexToken(RCURLYBRACKET,'}',6,59)
Action : Reduce rule [statement_list -> statement] with [<Node @ 0x7f9b17a8e370>] and goto state 176
Result : <Node @ 0x7f9b17a8e370> (<parser.Node object at 0x7f9b17a8e370>)

State  : 176
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace statement_list . LexToken(RCURLYBRACKET,'}',6,59)
Action : Shift and goto state 74

State  : 74
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace statement_list RCURLYBRACKET . LexToken(RCURLYBRACKET,'}',7,61)
Action : Reduce rule [closebrace -> RCURLYBRACKET] with ['}'] and goto state 266
Result : <str @ 0x7f9b17e9b0f0> ('}')

State  : 266
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list openbrace statement_list closebrace . LexToken(RCURLYBRACKET,'}',7,61)
Action : Reduce rule [compound_statement -> openbrace statement_list closebrace] with ['{',<Node @ 0x7f9b17a8e370>,'}'] and goto state 77
Result : <Node @ 0x7f9b17a8e370> (<parser.Node object at 0x7f9b17a8e370>)

State  : 77
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list compound_statement . LexToken(RCURLYBRACKET,'}',7,61)
Action : Reduce rule [statement -> compound_statement] with [<Node @ 0x7f9b17a8e370>] and goto state 75
Result : <Node @ 0x7f9b17a8e310> (<parser.Node object at 0x7f9b17a8e310>)

State  : 75
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list statement . LexToken(RCURLYBRACKET,'}',7,61)
Action : Reduce rule [statement_list -> statement] with [<Node @ 0x7f9b17a8e310>] and goto state 168
Result : <Node @ 0x7f9b17a8e310> (<parser.Node object at 0x7f9b17a8e310>)

State  : 168
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list statement_list . LexToken(RCURLYBRACKET,'}',7,61)
Action : Shift and goto state 74

State  : 74
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list statement_list RCURLYBRACKET . $end
Action : Reduce rule [closebrace -> RCURLYBRACKET] with ['}'] and goto state 262
Result : <str @ 0x7f9b17e9b0f0> ('}')

State  : 262
Stack  : declaration_specifiers declarator LCURLYBRACKET declaration_list statement_list closebrace . $end
Action : Reduce rule [function_compound_statement -> LCURLYBRACKET declaration_list statement_list closebrace] with ['{',<Node @ 0x7f9b17a8e130>,<Node @ 0x7f9b17a8e310>,'}'] and goto state 65
Result : <Node @ 0x7f9b17a8e3d0> (<parser.Node object at 0x7f9b17a8e3d0>)

State  : 65
Stack  : declaration_specifiers declarator function_compound_statement . $end
Action : Reduce rule [function_definition -> declaration_specifiers declarator function_compound_statement] with [<Node @ 0x7f9b178f1bb0>,<Node @ 0x7f9b178f1a90>,<Node @ 0x7f9b17a8e3d0>] and goto state 3
Result : <Node @ 0x7f9b17a8e220> (<parser.Node object at 0x7f9b17a8e220>)

State  : 3
Stack  : function_definition . $end
Action : Reduce rule [external_declaration -> function_definition] with [<Node @ 0x7f9b17a8e220>] and goto state 2
Result : <Node @ 0x7f9b17a8e220> (<parser.Node object at 0x7f9b17a8e220>)

State  : 2
Stack  : external_declaration . $end
Action : Reduce rule [translation_unit -> external_declaration] with [<Node @ 0x7f9b17a8e220>] and goto state 1
Result : <Node @ 0x7f9b17a8e400> (<parser.Node object at 0x7f9b17a8e400>)

State  : 1
Stack  : translation_unit . $end
Done   : Returning <Node @ 0x7f9b17a8e400> (<parser.Node object at 0x7f9b17a8e400>)
PLY: PARSE DEBUG END
